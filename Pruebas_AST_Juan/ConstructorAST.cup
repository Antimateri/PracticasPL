package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);
:};


terminal IF, WHILE, IFELSE, ELSE, FUN, TIPEDEF, CALL, RETURN, STRUCT, LLEVA, PROC, EXEC,
         CLASS, ATRIBUTES, CONSTRUCTOR, METHODS,
         SUMA, RESTA, MUL, DIV, MOD, POT, AND, OR, MAYOR, MENOR, OPIGUAL,
         PRINT, READ,
         PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE,
         PUNTOCOMA, IGUAL, COMA, PUNTO, DOSPUNTOS,
         TIPOINT, TIPOBOOL, NULL, REF, PUNTERO, VALPTR,
         TRUE, FALSE;

terminal TokenValue INT, IDEN;

non terminal  Statement Linea, Instr;
non terminal  E Exp, Op0, Op1, Op2, Op3, Op4, Op5;
non terminal  Bloque Bl;
non terminal  TStruct StructBodyDef;
non terminal  D Dec;
non terminal  Iden Ident;
non terminal  T Tipo, Tipo2, Tipo3, Tipo4;
non terminal  StructIns StructInitAsign;
non terminal  StructIns StructInitOrden;
non terminal  InsBin Asign;


Bl ::= Bl: b1 Linea: l1 
   {: b1.append(l1);
      RESULT= b1; :};
Bl ::= Linea: l1
   {: RESULT=new Bloque(l1); :};

Linea ::= Instr: i1
   {: RESULT=i1; :};
Linea ::= Dec: d1 PUNTOCOMA
   {: RESULT=d1; :};
Linea ::= Exp: e1 PUNTOCOMA
   {: RESULT=e1; :};
Linea ::= PUNTOCOMA
   {: RESULT=null; :};

Instr ::= IF PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); :};
Instr ::= WHILE PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); :};
Instr ::= Asign: a1 PUNTOCOMA
   {: RESULT=a1; :};
Instr ::= IFELSE PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE ELSE LAP Bl: b3 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); :};
Instr ::= RETURN Exp: e1 PUNTOCOMA
   {: RESULT=new Return(e1); :};
Instr ::= PRINT PAP Exp: e1 PCIERRE PUNTOCOMA
   {: RESULT= new Print(e1); :};
Instr ::= READ PAP Ident: id1 PCIERRE PUNTOCOMA
   {: RESULT= new Read(id1); :};
Instr ::= Ident: id1 EXEC PAP Exp: args PCIERRE
   {: RESULT= new FunctCall(id1,args); :};
Instr ::= Ident: id1 EXEC Ident: args
   {: RESULT= new FunctCall(id1,args); :};
Instr ::= Ident: id1 EXEC PAP PCIERRE
   {: RESULT= new FunctCall(id1,null); :};

Asign ::= Ident: id1 IGUAL Exp: e2
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); :};

Exp ::= Exp: aDeexp1 SUMA Op0: aDeterm 
   {: RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); :};
Exp ::= Exp: aDeexp1 RESTA Op0: aDeterm 
   {: RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); :};
Exp ::= Op0: aDeterm
   {: RESULT=aDeterm; :};
Exp ::= PAP StructInitOrden: args1 COMA Exp: arg2 PCIERRE
   {: args1.addUnnamedArg(arg2);
      RESULT= args1; :};
Exp ::= PAP StructInitOrden: args1 COMA Asign: arg2 PCIERRE
   {: args1.addNamedArg(arg2);
      RESULT= args1; :};

   
Op0 ::= Op0: aDeterm1 MUL Op1: aDefact
   {: RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); :};
Op0 ::= Op0: aDeterm1 DIV Op1: aDefact
   {: RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); :};
Op0 ::= Op1: aDeterm2
   {: RESULT=aDeterm2; :};

Op1 ::= Op1: aDeterm1 POT Op2: aDefact
   {: RESULT= new EBin(KindE.POT,aDeterm1,aDefact); :};
Op1 ::= Op1: aDeterm1 MOD Op2: aDefact
   {: RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); :};
Op1 ::= Op2: aDefact
   {: RESULT=aDefact; :};

Op2 ::= Op2: aDeterm1 AND Op3: aDefact
   {: RESULT= new EBin(KindE.AND,aDeterm1,aDefact); :};
Op2 ::= Op2: aDeterm1 OR Op3: aDefact
   {: RESULT= new EBin(KindE.OR,aDeterm1,aDefact); :};
Op2 ::= Op3: aDefact
   {: RESULT=aDefact; :};

Op3 ::= Op3: aDeterm1 MAYOR Op4: aDefact
   {: RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); :};
Op3 ::= Op3: aDeterm1 MENOR Op4: aDefact
   {: RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); :};
Op3 ::= Op3: aDeterm1 OPIGUAL Op4: aDefact
   {: RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); :};
Op3 ::= Op4: aDefact
   {: RESULT=aDefact; :};

Op4 ::= Ident: id1 CALL PAP Exp: args PCIERRE
   {: RESULT= new FunctCall(id1,args); :};
Op4 ::= Ident: id1 CALL Ident: args
   {: RESULT= new FunctCall(id1,args); :};
Op4 ::= Ident: id1 CALL PAP PCIERRE
   {: RESULT= new FunctCall(id1,null); :};
Op4 ::= Op5: aDefact
   {: RESULT=aDefact; :};

Op5 ::= INT: intValue           
   {: RESULT = new Int(intValue.lexema); :};
Op5 ::= TRUE
   {: RESULT = new Bool("true"); :};        
Op5 ::= FALSE
   {: RESULT = new Bool("false"); :};
Op5 ::= Ident: id          
   {: RESULT = id; :};
Op5 ::= PAP Exp: aDeexp PCIERRE
   {: RESULT = aDeexp; :};
Op5 ::= VALPTR PAP Ident: id PCIERRE
   {: RESULT = new GetPointerVal(id); :};
Op5 ::= PUNTERO PAP Exp: id PCIERRE
   {: RESULT = new GetVarDir(id); :};
Op5 ::= NULL
   {: RESULT = new Null(); :};
Op5 ::= Op5: exp1 CAP Exp: exp2 CCIERRE
   {: RESULT = new ListAccess(exp1,exp2); :};

StructInitOrden ::= StructInitOrden: args1 COMA Exp: arg2
   {: args1.addUnnamedArg(arg2);
      RESULT= args1; :};
StructInitOrden ::= Exp: arg2
   {: StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; :};
StructInitOrden ::= StructInitOrden: args1 COMA Asign: arg 
   {: args1.addNamedArg(arg);
      RESULT= args1; :};
StructInitOrden ::= Asign: arg
   {: StructIns args1 = new StructIns();
      args1.addNamedArg(arg);
      RESULT= args1; :};

Tipo ::= PUNTERO Tipo2: t1
   {: RESULT = new Pointer(t1); :};
Tipo ::= Tipo2: t1
   {: RESULT = t1; :};

Tipo2 ::= Tipo2: t1 CAP INT: intValue CCIERRE
   {: RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); :};
Tipo2 ::= Tipo3: t1
   {: RESULT = t1; :};

Tipo3 ::= TIPOINT
   {: RESULT = new TSimple(KindT.INT, RefMode.VALUE); :};
Tipo3 ::= TIPOBOOL
   {: RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); :};
Tipo3 ::= DOSPUNTOS Ident: id
   {: RESULT = new TComp(id, RefMode.VALUE); :};
Tipo3 ::= PAP StructBodyDef: args1 PCIERRE
   {: RESULT = args1; :};
Tipo3 ::= REF TIPOINT
   {: RESULT = new TSimple(KindT.INT, RefMode.REF); :};
Tipo3 ::= REF TIPOBOOL
   {: RESULT = new TSimple(KindT.BOOL, RefMode.REF); :};
Tipo3 ::= REF Ident: id
   {: RESULT = new TComp(id, RefMode.REF); :};
Tipo3 ::= Tipo4: t1
   {: RESULT = t1; :};

Tipo4 ::= PAP Tipo : t1 PCIERRE
   {: RESULT = t1; :};

Ident ::= IDEN: idValue
   {: RESULT = new Iden(idValue.lexema); :};
Ident ::= IDEN: idValue PUNTO Ident: id2
   {: RESULT = new IdenComp(idValue.lexema, id2); :};

Dec ::= Tipo: t1 Ident: id
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); :};
Dec ::= FUN Tipo : t1 Ident: id1 PAP StructBodyDef: st1 PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new FunDef(t1, id1, st1, b1); :};
Dec ::= FUN Tipo : t1 Ident: id1 PAP PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new FunDef(t1, id1, null, b1); :};
Dec ::= PROC Ident: id1 PAP StructBodyDef: st1 PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new FunDef(null, id1, st1, b1); :};
Dec ::= PROC Ident: id1 PAP PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new FunDef(null, id1, null, b1); :};
Dec ::= STRUCT Ident: id1 LLEVA LAP StructBodyDef: st1 LCIERRE
   {: RESULT= new StructDef(id1, st1); :};
Dec ::= TIPEDEF Ident: id1 Tipo: id2
   {: RESULT= new TypeDef(id1,id2); :};

StructBodyDef ::= StructBodyDef: st1 COMA Dec: d1
   {: st1.append(d1);
      RESULT= st1; :};
StructBodyDef ::= Dec: d1
   {: RESULT= new TStruct(d1); :};

