
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 14 14:09:19 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 14 14:09:19 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\011\000\002\003\011\000" +
    "\002\003\004\000\002\003\015\000\002\003\005\000\002" +
    "\003\007\000\002\003\007\000\002\025\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\004\007" +
    "\000\002\004\007\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\011\007\000\002\011\006\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\006\000\002\012\006\000\002\012\003\000\002\012\006" +
    "\000\002\024\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\017\004\000\002\017\003\000\002" +
    "\020\006\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\004\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\003\000" +
    "\002\022\005\000\002\016\003\000\002\016\005\000\002" +
    "\015\004\000\002\015\013\000\002\015\010\000\002\015" +
    "\005\000\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\056\004\022\005\042\007\011\011\016\012" +
    "\006\014\024\015\051\032\052\033\036\034\034\042\010" +
    "\046\004\047\031\050\044\051\026\052\012\053\032\054" +
    "\013\055\025\056\050\057\007\060\040\001\002\000\004" +
    "\060\040\001\002\000\004\042\252\001\002\000\004\060" +
    "\040\001\002\000\042\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd\044\uffdd\001\002" +
    "\000\062\002\ufffb\004\ufffb\005\ufffb\007\ufffb\011\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\032\ufffb\033\ufffb\034\ufffb\041\ufffb" +
    "\042\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002" +
    "\000\004\034\236\001\002\000\010\047\233\050\235\060" +
    "\040\001\002\000\004\034\230\001\002\000\044\013\126" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\035\uffda\036\uffda" +
    "\042\uffda\043\226\044\uffda\001\002\000\060\002\225\004" +
    "\022\005\042\007\011\011\016\012\006\014\024\015\051" +
    "\032\052\033\036\034\034\042\010\046\004\047\031\050" +
    "\044\051\026\052\012\053\032\054\013\055\025\056\050" +
    "\057\007\060\040\001\002\000\016\034\142\046\004\047" +
    "\031\050\044\052\012\053\145\001\002\000\016\035\uffc5" +
    "\036\uffc5\041\uffc5\042\uffc5\044\uffc5\060\uffc5\001\002\000" +
    "\016\035\uffcd\036\uffcd\041\uffcd\042\uffcd\044\uffcd\060\uffcd" +
    "\001\002\000\016\035\uffcf\036\147\041\uffcf\042\uffcf\044" +
    "\uffcf\060\uffcf\001\002\000\004\034\207\001\002\000\004" +
    "\042\206\001\002\000\022\034\055\051\026\053\057\054" +
    "\013\055\025\056\050\057\007\060\040\001\002\000\042" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\042\uffdc\044\uffdc\001\002\000\042\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\035\uffd6\036\uffd6\037\uffd6\042" +
    "\uffd6\044\uffd6\001\002\000\062\002\uffff\004\uffff\005\uffff" +
    "\007\uffff\011\uffff\012\uffff\014\uffff\015\uffff\032\uffff\033" +
    "\uffff\034\uffff\041\uffff\042\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\001\002\000\004\060\040\001\002\000\016" +
    "\035\uffcc\036\uffcc\041\uffcc\042\uffcc\044\uffcc\060\uffcc\001" +
    "\002\000\014\034\203\046\004\047\031\050\044\052\012" +
    "\001\002\000\010\017\064\020\062\042\202\001\002\000" +
    "\040\011\016\012\006\015\051\034\034\046\004\047\031" +
    "\050\044\051\026\052\012\053\032\054\013\055\025\056" +
    "\050\057\007\060\040\001\002\000\042\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\035\uffde\036\177\037\uffde\042\uffde" +
    "\044\uffde\001\002\000\004\034\173\001\002\000\040\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\037\uffe1\042" +
    "\uffe1\044\uffe1\001\002\000\072\013\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\171\046" +
    "\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\060\uffc3\001\002" +
    "\000\040\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\104\030\103\031\102\035\uffe5" +
    "\037\uffe5\042\uffe5\044\uffe5\001\002\000\004\034\162\001" +
    "\002\000\032\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\077\026\100\035\uffe8\037\uffe8\042\uffe8\044" +
    "\uffe8\001\002\000\016\035\uffcb\036\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\060\uffcb\001\002\000\026\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\074\024\075\035\uffeb\037\uffeb\042\uffeb" +
    "\044\uffeb\001\002\000\022\017\ufff0\020\ufff0\021\071\022" +
    "\072\035\ufff0\037\ufff0\042\ufff0\044\ufff0\001\002\000\062" +
    "\002\ufffe\004\ufffe\005\ufffe\007\ufffe\011\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\032\ufffe\033\ufffe\034\ufffe\041\ufffe\042\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\001\002\000\042" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\042\uffdb\044\uffdb\001\002\000\004\060\040\001" +
    "\002\000\004\034\053\001\002\000\022\034\055\051\026" +
    "\053\057\054\013\055\025\056\050\057\007\060\040\001" +
    "\002\000\044\013\126\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\035\uffda\036\uffda\037\uffda\042\uffda\044\uffda\001\002" +
    "\000\022\034\055\051\026\053\057\054\013\055\025\056" +
    "\050\057\007\060\040\001\002\000\010\017\064\020\062" +
    "\035\114\001\002\000\004\034\060\001\002\000\022\034" +
    "\055\051\026\053\057\054\013\055\025\056\050\057\007" +
    "\060\040\001\002\000\010\017\064\020\062\035\063\001" +
    "\002\000\022\034\066\051\026\053\057\054\013\055\025" +
    "\056\050\057\007\060\040\001\002\000\042\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\035\uffd7\036\uffd7\037\uffd7\042" +
    "\uffd7\044\uffd7\001\002\000\022\034\066\051\026\053\057" +
    "\054\013\055\025\056\050\057\007\060\040\001\002\000" +
    "\022\017\ufff2\020\ufff2\021\071\022\072\035\ufff2\037\ufff2" +
    "\042\ufff2\044\ufff2\001\002\000\022\034\055\051\026\053" +
    "\057\054\013\055\025\056\050\057\007\060\040\001\002" +
    "\000\010\017\064\020\062\035\070\001\002\000\042\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\042\uffd9\044\uffd9\001\002\000\022\034\066\051\026" +
    "\053\057\054\013\055\025\056\050\057\007\060\040\001" +
    "\002\000\022\034\066\051\026\053\057\054\013\055\025" +
    "\056\050\057\007\060\040\001\002\000\026\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\074\024\075\035\uffec\037\uffec" +
    "\042\uffec\044\uffec\001\002\000\022\034\066\051\026\053" +
    "\057\054\013\055\025\056\050\057\007\060\040\001\002" +
    "\000\022\034\066\051\026\053\057\054\013\055\025\056" +
    "\050\057\007\060\040\001\002\000\032\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\077\026\100\035" +
    "\uffea\037\uffea\042\uffea\044\uffea\001\002\000\022\034\066" +
    "\051\026\053\057\054\013\055\025\056\050\057\007\060" +
    "\040\001\002\000\022\034\066\051\026\053\057\054\013" +
    "\055\025\056\050\057\007\060\040\001\002\000\040\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\104\030\103\031\102\035\uffe6\037\uffe6\042" +
    "\uffe6\044\uffe6\001\002\000\022\034\066\051\026\053\057" +
    "\054\013\055\025\056\050\057\007\060\040\001\002\000" +
    "\022\034\066\051\026\053\057\054\013\055\025\056\050" +
    "\057\007\060\040\001\002\000\022\034\066\051\026\053" +
    "\057\054\013\055\025\056\050\057\007\060\040\001\002" +
    "\000\040\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4" +
    "\037\uffe4\042\uffe4\044\uffe4\001\002\000\040\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\035\uffe3\037\uffe3\042\uffe3\044" +
    "\uffe3\001\002\000\040\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\035\uffe2\037\uffe2\042\uffe2\044\uffe2\001\002\000\040" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\104\030\103\031\102\035\uffe7\037\uffe7" +
    "\042\uffe7\044\uffe7\001\002\000\032\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\077\026\100\035\uffe9" +
    "\037\uffe9\042\uffe9\044\uffe9\001\002\000\026\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\074\024\075\035\uffed\037\uffed" +
    "\042\uffed\044\uffed\001\002\000\022\017\ufff1\020\ufff1\021" +
    "\071\022\072\035\ufff1\037\ufff1\042\ufff1\044\ufff1\001\002" +
    "\000\004\042\115\001\002\000\062\002\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\041\ufff5\042\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\001\002\000\006\035\uffd1\044\uffd1\001" +
    "\002\000\004\044\121\001\002\000\012\017\064\020\062" +
    "\035\070\044\uffd3\001\002\000\022\034\055\051\026\053" +
    "\057\054\013\055\025\056\050\057\007\060\040\001\002" +
    "\000\012\017\064\020\062\035\125\044\uffd4\001\002\000" +
    "\006\035\124\044\uffd2\001\002\000\016\017\uffee\020\uffee" +
    "\035\uffee\037\uffee\042\uffee\044\uffee\001\002\000\016\017" +
    "\uffef\020\uffef\035\uffef\037\uffef\042\uffef\044\uffef\001\002" +
    "\000\004\034\127\001\002\000\024\034\055\035\130\051" +
    "\026\053\057\054\013\055\025\056\050\057\007\060\040" +
    "\001\002\000\040\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\035\uffdf\037\uffdf\042\uffdf\044\uffdf\001\002\000\006\035" +
    "\134\044\133\001\002\000\012\017\064\020\062\035\uffd3" +
    "\044\uffd3\001\002\000\022\034\055\051\026\053\057\054" +
    "\013\055\025\056\050\057\007\060\040\001\002\000\040" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\037\uffe0" +
    "\042\uffe0\044\uffe0\001\002\000\012\017\064\020\062\035" +
    "\uffd4\044\uffd4\001\002\000\006\035\uffd2\044\uffd2\001\002" +
    "\000\004\016\140\001\002\000\004\040\141\001\002\000" +
    "\024\011\016\012\006\015\051\034\142\046\004\047\031" +
    "\050\044\052\012\053\145\001\002\000\024\011\016\012" +
    "\006\015\051\034\142\046\004\047\031\050\044\052\012" +
    "\053\145\001\002\000\010\035\uffbc\041\uffbc\044\uffbc\001" +
    "\002\000\006\041\153\044\152\001\002\000\014\034\142" +
    "\046\004\047\031\050\044\052\012\001\002\000\016\035" +
    "\uffd0\036\147\041\uffd0\042\uffd0\044\uffd0\060\uffd0\001\002" +
    "\000\004\057\150\001\002\000\004\037\151\001\002\000" +
    "\016\035\uffce\036\uffce\041\uffce\042\uffce\044\uffce\060\uffce" +
    "\001\002\000\024\011\016\012\006\015\051\034\142\046" +
    "\004\047\031\050\044\052\012\053\145\001\002\000\012" +
    "\035\uffbf\041\uffbf\042\uffbf\044\uffbf\001\002\000\010\035" +
    "\uffbd\041\uffbd\044\uffbd\001\002\000\006\035\160\060\040" +
    "\001\002\000\006\035\157\044\152\001\002\000\016\035" +
    "\uffc9\036\uffc9\041\uffc9\042\uffc9\044\uffc9\060\uffc9\001\002" +
    "\000\016\035\uffc4\036\uffc4\041\uffc4\042\uffc4\044\uffc4\060" +
    "\uffc4\001\002\000\012\035\uffc1\041\uffc1\042\uffc1\044\uffc1" +
    "\001\002\000\022\034\055\051\026\053\057\054\013\055" +
    "\025\056\050\057\007\060\040\001\002\000\010\017\064" +
    "\020\062\035\164\001\002\000\004\040\165\001\002\000" +
    "\056\004\022\005\042\007\011\011\016\012\006\014\024" +
    "\015\051\032\052\033\036\034\034\042\010\046\004\047" +
    "\031\050\044\051\026\052\012\053\032\054\013\055\025" +
    "\056\050\057\007\060\040\001\002\000\060\004\022\005" +
    "\042\007\011\011\016\012\006\014\024\015\051\032\052" +
    "\033\036\034\034\041\167\042\010\046\004\047\031\050" +
    "\044\051\026\052\012\053\032\054\013\055\025\056\050" +
    "\057\007\060\040\001\002\000\062\002\ufff9\004\ufff9\005" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\041\ufff9\042\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\001\002\000\062\002\001\004\001\005" +
    "\001\007\001\011\001\012\001\014\001\015\001\032\001" +
    "\033\001\034\001\041\001\042\001\046\001\047\001\050" +
    "\001\051\001\052\001\053\001\054\001\055\001\056\001" +
    "\057\001\060\001\001\002\000\004\060\040\001\002\000" +
    "\070\013\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\053" +
    "\uffc2\060\uffc2\001\002\000\004\060\040\001\002\000\004" +
    "\035\175\001\002\000\004\042\176\001\002\000\062\002" +
    "\ufff4\004\ufff4\005\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\032\ufff4\033\ufff4\034\ufff4\041\ufff4\042\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\001\002\000\022\034" +
    "\055\051\026\053\057\054\013\055\025\056\050\057\007" +
    "\060\040\001\002\000\010\017\064\020\062\037\201\001" +
    "\002\000\042\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\044\uffd5\001\002\000\062" +
    "\002\ufffc\004\ufffc\005\ufffc\007\ufffc\011\ufffc\012\ufffc\014" +
    "\ufffc\015\ufffc\032\ufffc\033\ufffc\034\ufffc\041\ufffc\042\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\001\002\000\040" +
    "\011\016\012\006\015\051\034\034\046\004\047\031\050" +
    "\044\051\026\052\012\053\032\054\013\055\025\056\050" +
    "\057\007\060\040\001\002\000\010\017\064\020\062\042" +
    "\205\001\002\000\062\002\ufff6\004\ufff6\005\ufff6\007\ufff6" +
    "\011\ufff6\012\ufff6\014\ufff6\015\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\041\ufff6\042\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\001\002\000\062\002\ufff8\004\ufff8\005\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\014\ufff8\015\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\041\ufff8\042\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\001\002\000\022\034\055\051\026\053\057\054\013" +
    "\055\025\056\050\057\007\060\040\001\002\000\010\017" +
    "\064\020\062\035\211\001\002\000\004\040\212\001\002" +
    "\000\056\004\022\005\042\007\011\011\016\012\006\014" +
    "\024\015\051\032\052\033\036\034\034\042\010\046\004" +
    "\047\031\050\044\051\026\052\012\053\032\054\013\055" +
    "\025\056\050\057\007\060\040\001\002\000\060\004\022" +
    "\005\042\007\011\011\016\012\006\014\024\015\051\032" +
    "\052\033\036\034\034\041\214\042\010\046\004\047\031" +
    "\050\044\051\026\052\012\053\032\054\013\055\025\056" +
    "\050\057\007\060\040\001\002\000\062\002\ufffa\004\ufffa" +
    "\005\ufffa\007\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\041\ufffa\042\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\001\002\000\004\060\040\001\002" +
    "\000\004\034\217\001\002\000\024\011\016\012\006\015" +
    "\051\034\142\046\004\047\031\050\044\052\012\053\145" +
    "\001\002\000\006\035\221\044\152\001\002\000\004\040" +
    "\222\001\002\000\056\004\022\005\042\007\011\011\016" +
    "\012\006\014\024\015\051\032\052\033\036\034\034\042" +
    "\010\046\004\047\031\050\044\051\026\052\012\053\032" +
    "\054\013\055\025\056\050\057\007\060\040\001\002\000" +
    "\060\004\022\005\042\007\011\011\016\012\006\014\024" +
    "\015\051\032\052\033\036\034\034\041\224\042\010\046" +
    "\004\047\031\050\044\051\026\052\012\053\032\054\013" +
    "\055\025\056\050\057\007\060\040\001\002\000\012\035" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\001\002\000\004\002\000" +
    "\001\002\000\022\034\055\051\026\053\057\054\013\055" +
    "\025\056\050\057\007\060\040\001\002\000\014\017\064" +
    "\020\062\035\ufff3\042\ufff3\044\ufff3\001\002\000\004\060" +
    "\040\001\002\000\004\035\232\001\002\000\042\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\042\uffd8\044\uffd8\001\002\000\016\035\uffc8\036\uffc8\041" +
    "\uffc8\042\uffc8\044\uffc8\060\uffc8\001\002\000\016\035\uffc6" +
    "\036\uffc6\041\uffc6\042\uffc6\044\uffc6\060\uffc6\001\002\000" +
    "\016\035\uffc7\036\uffc7\041\uffc7\042\uffc7\044\uffc7\060\uffc7" +
    "\001\002\000\022\034\055\051\026\053\057\054\013\055" +
    "\025\056\050\057\007\060\040\001\002\000\010\017\064" +
    "\020\062\035\240\001\002\000\004\040\241\001\002\000" +
    "\056\004\022\005\042\007\011\011\016\012\006\014\024" +
    "\015\051\032\052\033\036\034\034\042\010\046\004\047" +
    "\031\050\044\051\026\052\012\053\032\054\013\055\025" +
    "\056\050\057\007\060\040\001\002\000\060\004\022\005" +
    "\042\007\011\011\016\012\006\014\024\015\051\032\052" +
    "\033\036\034\034\041\243\042\010\046\004\047\031\050" +
    "\044\051\026\052\012\053\032\054\013\055\025\056\050" +
    "\057\007\060\040\001\002\000\004\010\244\001\002\000" +
    "\004\040\245\001\002\000\056\004\022\005\042\007\011" +
    "\011\016\012\006\014\024\015\051\032\052\033\036\034" +
    "\034\042\010\046\004\047\031\050\044\051\026\052\012" +
    "\053\032\054\013\055\025\056\050\057\007\060\040\001" +
    "\002\000\060\004\022\005\042\007\011\011\016\012\006" +
    "\014\024\015\051\032\052\033\036\034\034\041\247\042" +
    "\010\046\004\047\031\050\044\051\026\052\012\053\032" +
    "\054\013\055\025\056\050\057\007\060\040\001\002\000" +
    "\062\002\ufff7\004\ufff7\005\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\032\ufff7\033\ufff7\034\ufff7\041\ufff7\042" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002\000" +
    "\016\034\142\046\004\047\031\050\044\052\012\053\145" +
    "\001\002\000\012\035\uffbe\041\uffbe\042\uffbe\044\uffbe\001" +
    "\002\000\062\002\ufffd\004\ufffd\005\ufffd\007\ufffd\011\ufffd" +
    "\012\ufffd\014\ufffd\015\ufffd\032\ufffd\033\ufffd\034\ufffd\041" +
    "\ufffd\042\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\001" +
    "\002\000\016\035\uffca\036\uffca\041\uffca\042\uffca\044\uffca" +
    "\060\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\044\002\026\003\046\004\032\005\045\006" +
    "\044\007\042\010\040\011\036\012\034\013\014\015\004" +
    "\016\013\017\027\020\020\021\017\022\016\025\022\001" +
    "\001\000\004\016\252\001\001\000\002\001\001\000\004" +
    "\016\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\167\003\046\004\032\005" +
    "\045\006\044\007\042\010\040\011\036\012\034\015\004" +
    "\016\013\017\027\020\020\021\017\022\016\025\022\001" +
    "\001\000\012\017\214\020\020\021\017\022\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\203\005\045" +
    "\006\044\007\042\010\040\011\036\012\034\016\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\160\001\001\000\002\001\001\000\010\020" +
    "\145\021\017\022\016\001\001\000\002\001\001\000\042" +
    "\004\117\005\045\006\044\007\042\010\040\011\036\012" +
    "\034\014\155\015\142\016\013\017\154\020\020\021\017" +
    "\022\016\024\116\025\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\136\001\001\000\002\001" +
    "\001\000\022\004\055\005\045\006\044\007\042\010\040" +
    "\011\036\012\034\016\053\001\001\000\002\001\001\000" +
    "\026\004\117\005\045\006\044\007\042\010\040\011\036" +
    "\012\034\016\013\024\116\025\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\060\005\045\006\044" +
    "\007\042\010\040\011\036\012\034\016\053\001\001\000" +
    "\002\001\001\000\020\005\112\006\044\007\042\010\040" +
    "\011\036\012\034\016\053\001\001\000\002\001\001\000" +
    "\020\005\064\006\044\007\042\010\040\011\036\012\034" +
    "\016\053\001\001\000\002\001\001\000\022\004\066\005" +
    "\045\006\044\007\042\010\040\011\036\012\034\016\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\111\007\042\010\040\011\036\012\034\016\053\001\001" +
    "\000\016\006\072\007\042\010\040\011\036\012\034\016" +
    "\053\001\001\000\002\001\001\000\014\007\110\010\040" +
    "\011\036\012\034\016\053\001\001\000\014\007\075\010" +
    "\040\011\036\012\034\016\053\001\001\000\002\001\001" +
    "\000\012\010\107\011\036\012\034\016\053\001\001\000" +
    "\012\010\100\011\036\012\034\016\053\001\001\000\002" +
    "\001\001\000\010\011\106\012\034\016\053\001\001\000" +
    "\010\011\105\012\034\016\053\001\001\000\010\011\104" +
    "\012\034\016\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\121\005\045\006\044\007\042\010" +
    "\040\011\036\012\034\016\013\025\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\131\005\045\006\044" +
    "\007\042\010\040\011\036\012\034\016\013\024\130\025" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\134\005\045\006\044\007\042\010" +
    "\040\011\036\012\034\016\013\025\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\143\015\142\017\027" +
    "\020\020\021\017\022\016\001\001\000\016\014\155\015" +
    "\142\017\154\020\020\021\017\022\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\145\021\017\022" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\153\017\027\020" +
    "\020\021\017\022\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\162\005\045\006\044\007\042\010\040\011\036\012" +
    "\034\016\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\002\026\003\046\004\032\005\045\006\044\007" +
    "\042\010\040\011\036\012\034\013\165\015\004\016\013" +
    "\017\027\020\020\021\017\022\016\025\022\001\001\000" +
    "\042\002\167\003\046\004\032\005\045\006\044\007\042" +
    "\010\040\011\036\012\034\015\004\016\013\017\027\020" +
    "\020\021\017\022\016\025\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\171\001\001\000\002\001" +
    "\001\000\004\016\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\177\005\045\006" +
    "\044\007\042\010\040\011\036\012\034\016\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\060\005\045\006\044\007\042\010\040\011\036" +
    "\012\034\014\155\015\142\016\053\017\154\020\020\021" +
    "\017\022\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\207\005\045\006\044\007" +
    "\042\010\040\011\036\012\034\016\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\026\003\046\004" +
    "\032\005\045\006\044\007\042\010\040\011\036\012\034" +
    "\013\212\015\004\016\013\017\027\020\020\021\017\022" +
    "\016\025\022\001\001\000\042\002\167\003\046\004\032" +
    "\005\045\006\044\007\042\010\040\011\036\012\034\015" +
    "\004\016\013\017\027\020\020\021\017\022\016\025\022" +
    "\001\001\000\002\001\001\000\004\016\215\001\001\000" +
    "\002\001\001\000\016\014\217\015\142\017\027\020\020" +
    "\021\017\022\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\026\003\046\004\032\005\045\006\044" +
    "\007\042\010\040\011\036\012\034\013\222\015\004\016" +
    "\013\017\027\020\020\021\017\022\016\025\022\001\001" +
    "\000\042\002\167\003\046\004\032\005\045\006\044\007" +
    "\042\010\040\011\036\012\034\015\004\016\013\017\027" +
    "\020\020\021\017\022\016\025\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\226\005\045\006\044" +
    "\007\042\010\040\011\036\012\034\016\053\001\001\000" +
    "\002\001\001\000\004\016\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\236\005\045\006\044\007\042" +
    "\010\040\011\036\012\034\016\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\026\003\046\004\032" +
    "\005\045\006\044\007\042\010\040\011\036\012\034\013" +
    "\241\015\004\016\013\017\027\020\020\021\017\022\016" +
    "\025\022\001\001\000\042\002\167\003\046\004\032\005" +
    "\045\006\044\007\042\010\040\011\036\012\034\015\004" +
    "\016\013\017\027\020\020\021\017\022\016\025\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\002\026" +
    "\003\046\004\032\005\045\006\044\007\042\010\040\011" +
    "\036\012\034\013\245\015\004\016\013\017\027\020\020" +
    "\021\017\022\016\025\022\001\001\000\042\002\167\003" +
    "\046\004\032\005\045\006\044\007\042\010\040\011\036" +
    "\012\034\015\004\016\013\017\027\020\020\021\017\022" +
    "\016\025\022\001\001\000\002\001\001\000\012\017\250" +
    "\020\020\021\017\022\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Dec PUNTOCOMA 
            {
              Statement RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= PUNTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= PRINT PAP Exp PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Print(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instr ::= READ PAP Ident PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Read(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Asign ::= Ident IGUAL Exp 
            {
              InsBin RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= PAP StructInitOrden COMA Asign PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		InsBin arg2 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addNamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op0 ::= Op0 MUL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op0 ::= Op0 DIV Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op1 ::= Op1 POT Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op1 ::= Op1 MOD Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op2 ::= Op2 AND Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op2 ::= Op2 OR Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op3 ::= Op3 MAYOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op3 ::= Op3 MENOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op3 ::= Op3 OPIGUAL Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op4 ::= Ident CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op4 ::= Ident CALL PAP PCIERRE 
            {
              E RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new Bool("true"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new Bool("false"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op5 ::= Ident 
            {
              E RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Op5 ::= VALPTR PAP Ident PCIERRE 
            {
              E RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new GetPointerVal(id); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Op5 ::= PUNTERO PAP Exp PCIERRE 
            {
              E RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new GetVarDir(id); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op5 ::= NULL 
            {
              E RESULT =null;
		 RESULT = new Null(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op5 ::= Op5 CAP Exp CCIERRE 
            {
              E RESULT =null;
		E exp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E exp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ListAccess(exp1,exp2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StructInitOrden ::= StructInitOrden COMA Asign 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StructInitOrden ::= Asign 
            {
              StructIns RESULT =null;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo ::= PUNTERO Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Pointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo2 ::= Tipo2 CAP INT CCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo2 ::= Tipo3 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo3 ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo3 ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo3 ::= DOSPUNTOS Ident 
            {
              T RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo3 ::= PAP StructBodyDef PCIERRE 
            {
              T RESULT =null;
		TStruct args1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo3 ::= REF TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo3 ::= REF TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo3 ::= REF Ident 
            {
              T RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo3 ::= Tipo4 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo4 ::= PAP Tipo PCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo4",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Ident ::= IDEN 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Ident ::= IDEN PUNTO Ident 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Iden id2 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenComp(idValue.lexema, id2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Dec ::= Tipo Ident 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Dec ::= FUN Tipo Ident PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunDef(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Dec ::= STRUCT Ident LLEVA LAP StructBodyDef LCIERRE 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new StructDef(id1, st1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Dec ::= TIPEDEF Ident Tipo 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T id2 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new TypeDef(id1,id2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StructBodyDef ::= StructBodyDef COMA Dec 
            {
              TStruct RESULT =null;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StructBodyDef ::= Dec 
            {
              TStruct RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new TStruct(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

