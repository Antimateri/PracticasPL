
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 05 12:30:40 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 05 12:30:40 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\015\004\000\002\002\004\000\002\015" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\003\011\000\002\003\011\000\002\003\004\000" +
    "\002\003\015\000\002\003\005\000\002\003\006\000\002" +
    "\003\006\000\002\024\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\007\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\007" +
    "\000\002\013\006\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\006\000\002\023\005\000\002\023" +
    "\003\000\002\023\005\000\002\023\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\020\003\000\002\020\005\000\002\017\004\000\002\017" +
    "\013\000\002\017\010\000\002\017\005\000\002\016\005" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\046\004\021\005\013\007\005\011\043\012" +
    "\023\014\014\015\010\032\034\033\006\034\027\047\025" +
    "\050\022\052\020\053\026\054\016\055\030\056\011\057" +
    "\015\001\002\000\004\042\221\001\002\000\004\034\207" +
    "\001\002\000\004\034\204\001\002\000\052\002\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\041\ufffe\047\ufffe\050\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002" +
    "\000\004\057\015\001\002\000\036\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\035\uffdf\042\uffdf\044\uffdf\001\002\000" +
    "\050\002\176\004\021\005\013\007\005\011\043\012\023" +
    "\014\014\015\010\032\034\033\006\034\027\047\025\050" +
    "\022\052\020\053\026\054\016\055\030\056\011\057\015" +
    "\001\002\000\004\034\170\001\002\000\016\034\027\053" +
    "\071\054\016\055\030\056\011\057\015\001\002\000\064" +
    "\013\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\034\uffce\035\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\164\047\uffce\050\uffce\052\uffce\053\uffce\057\uffce\001\002" +
    "\000\036\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\035\uffde" +
    "\042\uffde\044\uffde\001\002\000\004\057\015\001\002\000" +
    "\010\047\160\050\162\057\015\001\002\000\004\034\152" +
    "\001\002\000\014\035\uffd4\041\uffd4\042\uffd4\044\uffd4\057" +
    "\uffd4\001\002\000\004\057\015\001\002\000\010\017\100" +
    "\020\076\042\147\001\002\000\014\035\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\057\uffd5\001\002\000\016\034\072\047\025" +
    "\050\022\052\020\053\046\057\015\001\002\000\016\034" +
    "\027\053\071\054\016\055\030\056\011\057\015\001\002" +
    "\000\036\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\035\uffdd" +
    "\042\uffdd\044\uffdd\001\002\000\052\002\uffff\004\uffff\005" +
    "\uffff\007\uffff\011\uffff\012\uffff\014\uffff\015\uffff\032\uffff" +
    "\033\uffff\034\uffff\041\uffff\047\uffff\050\uffff\052\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\001\002\000\036" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\042\uffe0" +
    "\044\uffe0\001\002\000\036\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\035\uffe3\042\uffe3\044\uffe3\001\002\000\004\034" +
    "\137\001\002\000\036\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\130\030\127\031" +
    "\126\035\uffe7\042\uffe7\044\uffe7\001\002\000\030\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\123\026" +
    "\124\035\uffea\042\uffea\044\uffea\001\002\000\040\013\103" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\042\uffdc\043\116" +
    "\057\uffd3\001\002\000\024\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\120\024\121\035\uffed\042\uffed\044\uffed\001\002" +
    "\000\020\017\ufff1\020\ufff1\021\064\022\065\035\ufff1\042" +
    "\ufff1\044\ufff1\001\002\000\004\042\063\001\002\000\014" +
    "\047\025\050\022\052\020\053\046\057\015\001\002\000" +
    "\004\057\015\001\002\000\014\035\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\057\uffd3\001\002\000\014\047\025\050\022\052" +
    "\020\053\046\057\015\001\002\000\014\035\uffcf\041\uffcf" +
    "\042\uffcf\044\uffcf\057\uffcf\001\002\000\004\034\051\001" +
    "\002\000\022\011\043\012\023\015\010\047\025\050\022" +
    "\052\020\053\046\057\015\001\002\000\010\035\uffc7\041" +
    "\uffc7\044\uffc7\001\002\000\006\035\055\044\054\001\002" +
    "\000\022\011\043\012\023\015\010\047\025\050\022\052" +
    "\020\053\046\057\015\001\002\000\004\040\056\001\002" +
    "\000\046\004\021\005\013\007\005\011\043\012\023\014" +
    "\014\015\010\032\034\033\006\034\027\047\025\050\022" +
    "\052\020\053\026\054\016\055\030\056\011\057\015\001" +
    "\002\000\050\004\021\005\013\007\005\011\043\012\023" +
    "\014\014\015\010\032\034\033\006\034\027\041\061\047" +
    "\025\050\022\052\020\053\026\054\016\055\030\056\011" +
    "\057\015\001\002\000\052\002\001\004\001\005\001\007" +
    "\001\011\001\012\001\014\001\015\001\032\001\033\001" +
    "\034\001\041\001\047\001\050\001\052\001\053\001\054" +
    "\001\055\001\056\001\057\001\001\002\000\012\035\uffcb" +
    "\041\uffcb\042\uffcb\044\uffcb\001\002\000\010\035\uffc8\041" +
    "\uffc8\044\uffc8\001\002\000\052\002\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\041\ufffd\047\ufffd\050\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002\000\016\034" +
    "\070\053\071\054\016\055\030\056\011\057\015\001\002" +
    "\000\016\034\070\053\071\054\016\055\030\056\011\057" +
    "\015\001\002\000\024\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\120\024\121\035\uffee\042\uffee\044\uffee\001\002\000" +
    "\040\013\103\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\035" +
    "\uffdc\042\uffdc\044\uffdc\001\002\000\016\034\027\053\071" +
    "\054\016\055\030\056\011\057\015\001\002\000\004\034" +
    "\072\001\002\000\004\057\015\001\002\000\004\035\074" +
    "\001\002\000\036\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\035\uffda\042\uffda\044\uffda\001\002\000\010\017\100\020" +
    "\076\035\077\001\002\000\016\034\070\053\071\054\016" +
    "\055\030\056\011\057\015\001\002\000\036\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\035\uffdb\042\uffdb\044\uffdb\001" +
    "\002\000\016\034\070\053\071\054\016\055\030\056\011" +
    "\057\015\001\002\000\020\017\ufff3\020\ufff3\021\064\022" +
    "\065\035\ufff3\042\ufff3\044\ufff3\001\002\000\020\017\ufff2" +
    "\020\ufff2\021\064\022\065\035\ufff2\042\ufff2\044\ufff2\001" +
    "\002\000\004\034\104\001\002\000\020\034\027\035\111" +
    "\053\071\054\016\055\030\056\011\057\015\001\002\000" +
    "\040\013\103\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\035" +
    "\uffdc\043\116\044\uffdc\001\002\000\012\017\100\020\076" +
    "\035\uffd8\044\uffd8\001\002\000\006\035\uffd6\044\uffd6\001" +
    "\002\000\006\035\113\044\112\001\002\000\036\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\042\uffe1\044\uffe1" +
    "\001\002\000\016\034\027\053\071\054\016\055\030\056" +
    "\011\057\015\001\002\000\036\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\035\uffe2\042\uffe2\044\uffe2\001\002\000\012" +
    "\017\100\020\076\035\uffd9\044\uffd9\001\002\000\006\035" +
    "\uffd7\044\uffd7\001\002\000\016\034\027\053\071\054\016" +
    "\055\030\056\011\057\015\001\002\000\014\017\100\020" +
    "\076\035\ufff4\042\ufff4\044\ufff4\001\002\000\016\034\070" +
    "\053\071\054\016\055\030\056\011\057\015\001\002\000" +
    "\016\034\070\053\071\054\016\055\030\056\011\057\015" +
    "\001\002\000\030\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\123\026\124\035\uffec\042\uffec\044\uffec" +
    "\001\002\000\016\034\070\053\071\054\016\055\030\056" +
    "\011\057\015\001\002\000\016\034\070\053\071\054\016" +
    "\055\030\056\011\057\015\001\002\000\036\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\130\030\127\031\126\035\uffe8\042\uffe8\044\uffe8\001" +
    "\002\000\016\034\070\053\071\054\016\055\030\056\011" +
    "\057\015\001\002\000\016\034\070\053\071\054\016\055" +
    "\030\056\011\057\015\001\002\000\016\034\070\053\071" +
    "\054\016\055\030\056\011\057\015\001\002\000\036\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\035\uffe6\042\uffe6\044" +
    "\uffe6\001\002\000\036\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\035\uffe5\042\uffe5\044\uffe5\001\002\000\036\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4\042\uffe4\044\uffe4" +
    "\001\002\000\036\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\130\030\127\031\126" +
    "\035\uffe9\042\uffe9\044\uffe9\001\002\000\030\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\123\026\124" +
    "\035\uffeb\042\uffeb\044\uffeb\001\002\000\024\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\120\024\121\035\uffef\042\uffef" +
    "\044\uffef\001\002\000\016\034\027\053\071\054\016\055" +
    "\030\056\011\057\015\001\002\000\010\017\100\020\076" +
    "\035\141\001\002\000\052\002\ufff6\004\ufff6\005\ufff6\007" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\041\ufff6\047\ufff6\050\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\012\017\100" +
    "\020\076\035\077\044\uffd8\001\002\000\004\044\144\001" +
    "\002\000\016\034\027\053\071\054\016\055\030\056\011" +
    "\057\015\001\002\000\012\017\100\020\076\035\146\044" +
    "\uffd9\001\002\000\014\017\ufff0\020\ufff0\035\ufff0\042\ufff0" +
    "\044\ufff0\001\002\000\052\002\ufffc\004\ufffc\005\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\041\ufffc\047\ufffc\050\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002\000\014\047\025" +
    "\050\022\052\020\053\046\057\015\001\002\000\012\035" +
    "\uffc9\041\uffc9\042\uffc9\044\uffc9\001\002\000\016\034\027" +
    "\053\071\054\016\055\030\056\011\057\015\001\002\000" +
    "\010\017\100\020\076\035\154\001\002\000\004\040\155" +
    "\001\002\000\046\004\021\005\013\007\005\011\043\012" +
    "\023\014\014\015\010\032\034\033\006\034\027\047\025" +
    "\050\022\052\020\053\026\054\016\055\030\056\011\057" +
    "\015\001\002\000\050\004\021\005\013\007\005\011\043" +
    "\012\023\014\014\015\010\032\034\033\006\034\027\041" +
    "\157\047\025\050\022\052\020\053\026\054\016\055\030" +
    "\056\011\057\015\001\002\000\052\002\ufffb\004\ufffb\005" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\041\ufffb\047\ufffb\050\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002\000\014" +
    "\035\uffd2\041\uffd2\042\uffd2\044\uffd2\057\uffd2\001\002\000" +
    "\014\035\uffd0\041\uffd0\042\uffd0\044\uffd0\057\uffd0\001\002" +
    "\000\014\035\uffd1\041\uffd1\042\uffd1\044\uffd1\057\uffd1\001" +
    "\002\000\012\035\uffcc\041\uffcc\042\uffcc\044\uffcc\001\002" +
    "\000\004\057\015\001\002\000\062\013\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd\035\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\057\uffcd\001\002\000\010\017\100\020\076\042" +
    "\167\001\002\000\052\002\ufff7\004\ufff7\005\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\015\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\041\ufff7\047\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\057\ufff7\001\002\000\016\034\027\053" +
    "\071\054\016\055\030\056\011\057\015\001\002\000\010" +
    "\017\100\020\076\035\172\001\002\000\004\040\173\001" +
    "\002\000\046\004\021\005\013\007\005\011\043\012\023" +
    "\014\014\015\010\032\034\033\006\034\027\047\025\050" +
    "\022\052\020\053\026\054\016\055\030\056\011\057\015" +
    "\001\002\000\050\004\021\005\013\007\005\011\043\012" +
    "\023\014\014\015\010\032\034\033\006\034\027\041\175" +
    "\047\025\050\022\052\020\053\026\054\016\055\030\056" +
    "\011\057\015\001\002\000\052\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\041\ufffa\047\ufffa\050\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000\004\002" +
    "\000\001\002\000\004\016\200\001\002\000\004\040\201" +
    "\001\002\000\022\011\043\012\023\015\010\047\025\050" +
    "\022\052\020\053\046\057\015\001\002\000\006\041\203" +
    "\044\054\001\002\000\012\035\uffca\041\uffca\042\uffca\044" +
    "\uffca\001\002\000\004\057\015\001\002\000\004\035\206" +
    "\001\002\000\052\002\ufff5\004\ufff5\005\ufff5\007\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\041\ufff5\047\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\016\034\027\053\071" +
    "\054\016\055\030\056\011\057\015\001\002\000\010\017" +
    "\100\020\076\035\211\001\002\000\004\040\212\001\002" +
    "\000\046\004\021\005\013\007\005\011\043\012\023\014" +
    "\014\015\010\032\034\033\006\034\027\047\025\050\022" +
    "\052\020\053\026\054\016\055\030\056\011\057\015\001" +
    "\002\000\050\004\021\005\013\007\005\011\043\012\023" +
    "\014\014\015\010\032\034\033\006\034\027\041\214\047" +
    "\025\050\022\052\020\053\026\054\016\055\030\056\011" +
    "\057\015\001\002\000\004\010\215\001\002\000\004\040" +
    "\216\001\002\000\046\004\021\005\013\007\005\011\043" +
    "\012\023\014\014\015\010\032\034\033\006\034\027\047" +
    "\025\050\022\052\020\053\026\054\016\055\030\056\011" +
    "\057\015\001\002\000\050\004\021\005\013\007\005\011" +
    "\043\012\023\014\014\015\010\032\034\033\006\034\027" +
    "\041\220\047\025\050\022\052\020\053\026\054\016\055" +
    "\030\056\011\057\015\001\002\000\052\002\ufff8\004\ufff8" +
    "\005\ufff8\007\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\041\ufff8\047\ufff8\050\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000" +
    "\052\002\ufff9\004\ufff9\005\ufff9\007\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\032\ufff9\033\ufff9\034\ufff9\041\ufff9\047" +
    "\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\036\002\030\003\006\006\023\007\040\010" +
    "\037\011\035\012\034\013\032\014\031\015\011\017\041" +
    "\020\036\021\016\024\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\176\001\001\000\002\001\001\000\034\002\057\003" +
    "\006\006\023\007\040\010\037\011\035\012\034\013\032" +
    "\014\031\017\041\020\036\021\016\024\003\001\001\000" +
    "\002\001\001\000\022\006\165\007\040\010\037\011\035" +
    "\012\034\013\032\014\031\020\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\162\001\001\000\004" +
    "\020\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\044\021\046\001\001\000\026\006\141\007" +
    "\040\010\037\011\035\012\034\013\032\014\031\020\104" +
    "\023\142\024\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\044\021\043\001\001\000\004\020\047\001\001\000" +
    "\002\001\001\000\006\020\044\021\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\052\017\051\020" +
    "\044\021\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\061\020\044\021\016\001\001\000\002\001" +
    "\001\000\036\002\030\003\006\006\023\007\040\010\037" +
    "\011\035\012\034\013\032\014\031\015\056\017\041\020" +
    "\036\021\016\024\003\001\001\000\034\002\057\003\006" +
    "\006\023\007\040\010\037\011\035\012\034\013\032\014" +
    "\031\017\041\020\036\021\016\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\135\011\035\012\034\013\032\014\031" +
    "\020\066\001\001\000\016\010\065\011\035\012\034\013" +
    "\032\014\031\020\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\074\007\040\010\037\011\035\012" +
    "\034\013\032\014\031\020\066\001\001\000\002\001\001" +
    "\000\004\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\101\010\037\011\035" +
    "\012\034\013\032\014\031\020\066\001\001\000\002\001" +
    "\001\000\020\007\100\010\037\011\035\012\034\013\032" +
    "\014\031\020\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\105\007\040\010\037" +
    "\011\035\012\034\013\032\014\031\020\104\023\107\024" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\113\007\040\010\037\011\035\012\034\013\032\014\031" +
    "\020\104\024\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\116\007\040\010\037" +
    "\011\035\012\034\013\032\014\031\020\066\001\001\000" +
    "\002\001\001\000\014\011\134\012\034\013\032\014\031" +
    "\020\066\001\001\000\014\011\121\012\034\013\032\014" +
    "\031\020\066\001\001\000\002\001\001\000\012\012\133" +
    "\013\032\014\031\020\066\001\001\000\012\012\124\013" +
    "\032\014\031\020\066\001\001\000\002\001\001\000\010" +
    "\013\132\014\031\020\066\001\001\000\010\013\131\014" +
    "\031\020\066\001\001\000\010\013\130\014\031\020\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\137\007\040\010\037\011\035\012\034\013" +
    "\032\014\031\020\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\144\007\040\010\037\011\035\012\034\013\032\014\031" +
    "\020\104\024\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\044\021\150\001\001" +
    "\000\002\001\001\000\022\006\152\007\040\010\037\011" +
    "\035\012\034\013\032\014\031\020\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\030\003\006\006" +
    "\023\007\040\010\037\011\035\012\034\013\032\014\031" +
    "\015\155\017\041\020\036\021\016\024\003\001\001\000" +
    "\034\002\057\003\006\006\023\007\040\010\037\011\035" +
    "\012\034\013\032\014\031\017\041\020\036\021\016\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\170\007\040\010\037\011\035\012" +
    "\034\013\032\014\031\020\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\030\003\006\006\023\007" +
    "\040\010\037\011\035\012\034\013\032\014\031\015\173" +
    "\017\041\020\036\021\016\024\003\001\001\000\034\002" +
    "\057\003\006\006\023\007\040\010\037\011\035\012\034" +
    "\013\032\014\031\017\041\020\036\021\016\024\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\201\017\051\020\044\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\207\007\040\010\037\011\035\012\034\013\032" +
    "\014\031\020\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\030\003\006\006\023\007\040\010\037" +
    "\011\035\012\034\013\032\014\031\015\212\017\041\020" +
    "\036\021\016\024\003\001\001\000\034\002\057\003\006" +
    "\006\023\007\040\010\037\011\035\012\034\013\032\014" +
    "\031\017\041\020\036\021\016\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\030\003\006\006" +
    "\023\007\040\010\037\011\035\012\034\013\032\014\031" +
    "\015\216\017\041\020\036\021\016\024\003\001\001\000" +
    "\034\002\057\003\006\006\023\007\040\010\037\011\035" +
    "\012\034\013\032\014\031\017\041\020\036\021\016\024" +
    "\003\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Dec PUNTOCOMA 
            {
              Statement RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= PRINT PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new Print(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= READ PAP Ident PCIERRE 
            {
              Statement RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new Read(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Asign ::= Ident IGUAL Exp 
            {
              InsBin RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op0 ::= Op0 MUL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op0 ::= Op0 DIV Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op1 ::= Op1 POT Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op1 ::= Op1 MOD Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op2 ::= Op2 AND Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op2 ::= Op2 OR Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op3 ::= Op3 MAYOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op3 ::= Op3 MENOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op3 ::= Op3 OPIGUAL Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op4 ::= Ident CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op4 ::= Ident CALL PAP PCIERRE 
            {
              E RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new Bool("true"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new Bool("false"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op5 ::= Ident 
            {
              E RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op5 ::= PUNTERO PAP Ident PCIERRE 
            {
              E RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new GetPointerVal(id); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StructInitOrden ::= StructInitOrden COMA Asign 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StructInitOrden ::= Asign 
            {
              StructIns RESULT =null;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo ::= Ident 
            {
              T RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo ::= REF TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo ::= REF TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo ::= REF Ident 
            {
              T RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= PUNTERO Tipo 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Pointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Ident ::= IDEN 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Ident ::= IDEN PUNTO Ident 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Iden id2 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenComp(idValue.lexema, id2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dec ::= Tipo Ident 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dec ::= FUN Tipo Ident PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunDef(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dec ::= STRUCT Ident LLEVA LAP StructBodyDef LCIERRE 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 st1.setName(id1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Dec ::= TIPEDEF Ident Tipo 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T id2 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new TypeDef(id1,id2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StructBodyDef ::= StructBodyDef COMA Dec 
            {
              StructDef RESULT =null;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StructBodyDef ::= Dec 
            {
              StructDef RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new StructDef(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

