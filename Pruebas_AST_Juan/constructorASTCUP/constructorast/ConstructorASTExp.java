
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 04 13:39:08 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 04 13:39:08 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\015\004\000\002\002\004\000\002\015" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\003\011\000\002\003\011\000\002\003\004\000" +
    "\002\003\015\000\002\024\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\007\000\002\013" +
    "\006\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\023\005\000\002\023\003\000" +
    "\002\023\005\000\002\023\003\000\002\021\003\000\002" +
    "\021\003\000\002\020\003\000\002\017\004\000\002\017" +
    "\013\000\002\017\010\000\002\016\005\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\026\004\015\005\012\007\005\011\033\014" +
    "\007\031\021\042\020\043\016\044\010\045\013\001\002" +
    "\000\004\037\154\001\002\000\004\031\142\001\002\000" +
    "\032\002\ufffe\004\ufffe\005\ufffe\007\ufffe\011\ufffe\014\ufffe" +
    "\031\ufffe\036\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\001" +
    "\002\000\004\045\013\001\002\000\036\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\032\uffe3\037\uffe3\041\uffe3\001\002" +
    "\000\030\002\134\004\015\005\012\007\005\011\033\014" +
    "\007\031\021\042\020\043\016\044\010\045\013\001\002" +
    "\000\004\031\126\001\002\000\050\012\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\001\002\000\004\045\013" +
    "\001\002\000\004\031\117\001\002\000\004\045\uffdb\001" +
    "\002\000\010\016\070\017\067\037\116\001\002\000\004" +
    "\045\uffdc\001\002\000\010\031\021\044\010\045\013\001" +
    "\002\000\036\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032" +
    "\uffe4\037\uffe4\041\uffe4\001\002\000\032\002\uffff\004\uffff" +
    "\005\uffff\007\uffff\011\uffff\014\uffff\031\uffff\036\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\001\002\000\036\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\037\uffe7\041\uffe7" +
    "\001\002\000\036\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\103\027\102\030\101" +
    "\032\uffeb\037\uffeb\041\uffeb\001\002\000\030\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\076\025\077" +
    "\032\uffee\037\uffee\041\uffee\001\002\000\042\012\055\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\037\uffe2\040" +
    "\112\041\uffe2\001\002\000\024\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\073\023\074\032\ufff1\037\ufff1\041\ufff1\001" +
    "\002\000\020\016\ufff4\017\ufff4\020\051\021\052\032\ufff4" +
    "\037\ufff4\041\ufff4\001\002\000\004\037\050\001\002\000" +
    "\006\042\020\043\016\001\002\000\004\045\013\001\002" +
    "\000\004\031\036\001\002\000\012\011\033\014\007\042" +
    "\020\043\016\001\002\000\006\032\042\041\041\001\002" +
    "\000\010\032\uffd5\036\uffd5\041\uffd5\001\002\000\012\011" +
    "\033\014\007\042\020\043\016\001\002\000\004\035\043" +
    "\001\002\000\026\004\015\005\012\007\005\011\033\014" +
    "\007\031\021\042\020\043\016\044\010\045\013\001\002" +
    "\000\030\004\015\005\012\007\005\011\033\014\007\031" +
    "\021\036\046\042\020\043\016\044\010\045\013\001\002" +
    "\000\032\002\001\004\001\005\001\007\001\011\001\014" +
    "\001\031\001\036\001\042\001\043\001\044\001\045\001" +
    "\001\002\000\012\032\uffd8\036\uffd8\037\uffd8\041\uffd8\001" +
    "\002\000\010\032\uffd6\036\uffd6\041\uffd6\001\002\000\032" +
    "\002\ufffd\004\ufffd\005\ufffd\007\ufffd\011\ufffd\014\ufffd\031" +
    "\ufffd\036\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002" +
    "\000\010\031\021\044\010\045\013\001\002\000\010\031" +
    "\021\044\010\045\013\001\002\000\024\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\073\023\074\032\ufff2\037\ufff2\041" +
    "\ufff2\001\002\000\040\012\055\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\032\uffe2\037\uffe2\041\uffe2\001\002\000\004" +
    "\031\056\001\002\000\012\031\021\032\062\044\010\045" +
    "\013\001\002\000\012\016\070\017\067\032\uffdf\041\uffdf" +
    "\001\002\000\006\032\uffdd\041\uffdd\001\002\000\006\032" +
    "\064\041\063\001\002\000\036\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\032\uffe5\037\uffe5\041\uffe5\001\002\000\010" +
    "\031\021\044\010\045\013\001\002\000\036\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\032\uffe6\037\uffe6\041\uffe6\001" +
    "\002\000\012\016\070\017\067\032\uffe0\041\uffe0\001\002" +
    "\000\006\032\uffde\041\uffde\001\002\000\010\031\021\044" +
    "\010\045\013\001\002\000\010\031\021\044\010\045\013" +
    "\001\002\000\020\016\ufff6\017\ufff6\020\051\021\052\032" +
    "\ufff6\037\ufff6\041\ufff6\001\002\000\020\016\ufff5\017\ufff5" +
    "\020\051\021\052\032\ufff5\037\ufff5\041\ufff5\001\002\000" +
    "\010\031\021\044\010\045\013\001\002\000\010\031\021" +
    "\044\010\045\013\001\002\000\030\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\076\025\077\032\ufff0" +
    "\037\ufff0\041\ufff0\001\002\000\010\031\021\044\010\045" +
    "\013\001\002\000\010\031\021\044\010\045\013\001\002" +
    "\000\036\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\103\027\102\030\101\032\uffec" +
    "\037\uffec\041\uffec\001\002\000\010\031\021\044\010\045" +
    "\013\001\002\000\010\031\021\044\010\045\013\001\002" +
    "\000\010\031\021\044\010\045\013\001\002\000\036\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\037\uffea\041" +
    "\uffea\001\002\000\036\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\032\uffe9\037\uffe9\041\uffe9\001\002\000\036\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\037\uffe8\041\uffe8" +
    "\001\002\000\036\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\103\027\102\030\101" +
    "\032\uffed\037\uffed\041\uffed\001\002\000\030\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\076\025\077" +
    "\032\uffef\037\uffef\041\uffef\001\002\000\024\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\073\023\074\032\ufff3\037\ufff3" +
    "\041\ufff3\001\002\000\010\031\021\044\010\045\013\001" +
    "\002\000\014\016\070\017\067\032\ufff7\037\ufff7\041\ufff7" +
    "\001\002\000\010\016\070\017\067\032\115\001\002\000" +
    "\036\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\037" +
    "\uffe1\041\uffe1\001\002\000\032\002\ufffc\004\ufffc\005\ufffc" +
    "\007\ufffc\011\ufffc\014\ufffc\031\ufffc\036\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\001\002\000\010\031\021\044\010" +
    "\045\013\001\002\000\010\016\070\017\067\032\121\001" +
    "\002\000\004\035\122\001\002\000\026\004\015\005\012" +
    "\007\005\011\033\014\007\031\021\042\020\043\016\044" +
    "\010\045\013\001\002\000\030\004\015\005\012\007\005" +
    "\011\033\014\007\031\021\036\124\042\020\043\016\044" +
    "\010\045\013\001\002\000\032\002\ufffb\004\ufffb\005\ufffb" +
    "\007\ufffb\011\ufffb\014\ufffb\031\ufffb\036\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\001\002\000\012\032\uffd9\036\uffd9" +
    "\037\uffd9\041\uffd9\001\002\000\010\031\021\044\010\045" +
    "\013\001\002\000\010\016\070\017\067\032\130\001\002" +
    "\000\004\035\131\001\002\000\026\004\015\005\012\007" +
    "\005\011\033\014\007\031\021\042\020\043\016\044\010" +
    "\045\013\001\002\000\030\004\015\005\012\007\005\011" +
    "\033\014\007\031\021\036\133\042\020\043\016\044\010" +
    "\045\013\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\007" +
    "\ufffa\011\ufffa\014\ufffa\031\ufffa\036\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\001\002\000\004\002\000\001\002\000" +
    "\004\015\136\001\002\000\004\035\137\001\002\000\012" +
    "\011\033\014\007\042\020\043\016\001\002\000\006\036" +
    "\141\041\041\001\002\000\012\032\uffd7\036\uffd7\037\uffd7" +
    "\041\uffd7\001\002\000\010\031\021\044\010\045\013\001" +
    "\002\000\010\016\070\017\067\032\144\001\002\000\004" +
    "\035\145\001\002\000\026\004\015\005\012\007\005\011" +
    "\033\014\007\031\021\042\020\043\016\044\010\045\013" +
    "\001\002\000\030\004\015\005\012\007\005\011\033\014" +
    "\007\031\021\036\147\042\020\043\016\044\010\045\013" +
    "\001\002\000\004\010\150\001\002\000\004\035\151\001" +
    "\002\000\026\004\015\005\012\007\005\011\033\014\007" +
    "\031\021\042\020\043\016\044\010\045\013\001\002\000" +
    "\030\004\015\005\012\007\005\011\033\014\007\031\021" +
    "\036\153\042\020\043\016\044\010\045\013\001\002\000" +
    "\032\002\ufff8\004\ufff8\005\ufff8\007\ufff8\011\ufff8\014\ufff8" +
    "\031\ufff8\036\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\001" +
    "\002\000\032\002\ufff9\004\ufff9\005\ufff9\007\ufff9\011\ufff9" +
    "\014\ufff9\031\ufff9\036\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\036\002\022\003\005\006\016\007\030\010" +
    "\027\011\025\012\024\013\023\014\021\015\010\017\031" +
    "\020\026\021\013\024\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\134\001\001" +
    "\000\002\001\001\000\034\002\044\003\005\006\016\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\017\031" +
    "\020\026\021\013\024\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\113\007\030\010\027\011\025\012\024\013\023" +
    "\014\021\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\033\001\001\000\004\020\034" +
    "\001\001\000\002\001\001\000\010\016\036\017\037\021" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\046\021\013\001\001\000\002\001\001\000\036\002" +
    "\022\003\005\006\016\007\030\010\027\011\025\012\024" +
    "\013\023\014\021\015\043\017\031\020\026\021\013\024" +
    "\003\001\001\000\034\002\044\003\005\006\016\007\030" +
    "\010\027\011\025\012\024\013\023\014\021\017\031\020" +
    "\026\021\013\024\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\110\011\025\012\024\013\023\014\021\020\053\001\001" +
    "\000\016\010\052\011\025\012\024\013\023\014\021\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\056\007\030\010\027\011\025\012" +
    "\024\013\023\014\021\020\026\023\060\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\064\007\030\010\027\011\025" +
    "\012\024\013\023\014\021\020\026\024\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\071\010\027\011\025\012\024\013\023\014\021\020" +
    "\053\001\001\000\020\007\070\010\027\011\025\012\024" +
    "\013\023\014\021\020\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\107\012\024\013\023\014\021" +
    "\020\053\001\001\000\014\011\074\012\024\013\023\014" +
    "\021\020\053\001\001\000\002\001\001\000\012\012\106" +
    "\013\023\014\021\020\053\001\001\000\012\012\077\013" +
    "\023\014\021\020\053\001\001\000\002\001\001\000\010" +
    "\013\105\014\021\020\053\001\001\000\010\013\104\014" +
    "\021\020\053\001\001\000\010\013\103\014\021\020\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\112\007\030\010\027\011\025\012\024\013" +
    "\023\014\021\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\117\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\022\003\005\006\016\007\030\010\027\011\025" +
    "\012\024\013\023\014\021\015\122\017\031\020\026\021" +
    "\013\024\003\001\001\000\034\002\044\003\005\006\016" +
    "\007\030\010\027\011\025\012\024\013\023\014\021\017" +
    "\031\020\026\021\013\024\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\126\007\030\010\027\011" +
    "\025\012\024\013\023\014\021\020\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\022\003\005\006" +
    "\016\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\015\131\017\031\020\026\021\013\024\003\001\001\000" +
    "\034\002\044\003\005\006\016\007\030\010\027\011\025" +
    "\012\024\013\023\014\021\017\031\020\026\021\013\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\137\017\037\021" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\142\007\030\010\027\011\025\012\024\013\023\014" +
    "\021\020\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\022\003\005\006\016\007\030\010\027\011" +
    "\025\012\024\013\023\014\021\015\145\017\031\020\026" +
    "\021\013\024\003\001\001\000\034\002\044\003\005\006" +
    "\016\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\017\031\020\026\021\013\024\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\022\003\005\006\016" +
    "\007\030\010\027\011\025\012\024\013\023\014\021\015" +
    "\151\017\031\020\026\021\013\024\003\001\001\000\034" +
    "\002\044\003\005\006\016\007\030\010\027\011\025\012" +
    "\024\013\023\014\021\017\031\020\026\021\013\024\003" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Dec PUNTOCOMA 
            {
              Statement RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Asign ::= Ident IGUAL Exp 
            {
              InsBin RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Exp SUMA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Exp RESTA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= Op0 
            {
              Statement RESULT =null;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= Op0 MUL Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op0 ::= Op0 DIV Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Op0 ::= Op1 
            {
              Statement RESULT =null;
		Statement aDeterm2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Op1 ::= Op1 POT Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op1 ::= Op1 MOD Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op1 ::= Op2 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op2 ::= Op2 AND Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op2 ::= Op2 OR Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op2 ::= Op3 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op3 ::= Op3 MAYOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op3 ::= Op3 MENOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op3 ::= Op3 OPIGUAL Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op3 ::= Op4 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op4 ::= Ident CALL PAP StructInitOrden PCIERRE 
            {
              Statement RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op4 ::= Ident CALL PAP PCIERRE 
            {
              Statement RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op4 ::= Op5 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op5 ::= INT 
            {
              Statement RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op5 ::= Ident 
            {
              Statement RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op5 ::= PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement arg2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		Statement arg2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StructInitOrden ::= StructInitOrden COMA Asign 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StructInitOrden ::= Asign 
            {
              StructIns RESULT =null;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ident ::= IDEN 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Dec ::= Tipo Ident 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Dec ::= FUN Tipo Ident PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunDef(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dec ::= STRUCT Ident LLEVA LAP StructBodyDef LCIERRE 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 st1.setName(id1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StructBodyDef ::= StructBodyDef COMA Dec 
            {
              StructDef RESULT =null;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StructBodyDef ::= Dec 
            {
              StructDef RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new StructDef(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

