
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 03 19:26:38 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 03 19:26:38 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\003\011\000\002\003\011\000\002\003\006\000" +
    "\002\003\015\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\005\000\002\020\003\000\002\020\003\000\002\017\003" +
    "\000\002\016\004\000\002\016\013\000\002\016\010\000" +
    "\002\015\005\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\026\004\014\005\011\007\004\011\031\014" +
    "\006\031\020\042\017\043\015\044\007\045\012\001\002" +
    "\000\004\031\127\001\002\000\032\002\ufffe\004\ufffe\005" +
    "\ufffe\007\ufffe\011\ufffe\014\ufffe\031\ufffe\036\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\001\002\000\004\045\012\001" +
    "\002\000\034\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032" +
    "\uffe7\037\uffe7\001\002\000\030\002\121\004\014\005\011" +
    "\007\004\011\031\014\006\031\020\042\017\043\015\044" +
    "\007\045\012\001\002\000\004\031\113\001\002\000\046" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000" +
    "\004\045\012\001\002\000\004\031\104\001\002\000\004" +
    "\045\uffe3\001\002\000\010\016\075\017\074\037\103\001" +
    "\002\000\004\045\uffe4\001\002\000\010\031\020\044\007" +
    "\045\012\001\002\000\032\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\011\uffff\014\uffff\031\uffff\036\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\001\002\000\034\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\037\uffe8\001\002\000\034\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\063\027\062\030\061\032\uffec\037\uffec\001" +
    "\002\000\026\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\056\025\057\032\uffef\037\uffef\001\002\000" +
    "\034\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\037\uffe6\040" +
    "\072\001\002\000\022\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\053\023\054\032\ufff2\037\ufff2\001\002\000\016\016" +
    "\ufff5\017\ufff5\020\047\021\050\032\ufff5\037\ufff5\001\002" +
    "\000\004\037\046\001\002\000\006\042\017\043\015\001" +
    "\002\000\004\045\012\001\002\000\004\031\034\001\002" +
    "\000\012\011\031\014\006\042\017\043\015\001\002\000" +
    "\006\032\040\041\037\001\002\000\010\032\uffdd\036\uffdd" +
    "\041\uffdd\001\002\000\012\011\031\014\006\042\017\043" +
    "\015\001\002\000\004\035\041\001\002\000\026\004\014" +
    "\005\011\007\004\011\031\014\006\031\020\042\017\043" +
    "\015\044\007\045\012\001\002\000\030\004\014\005\011" +
    "\007\004\011\031\014\006\031\020\036\044\042\017\043" +
    "\015\044\007\045\012\001\002\000\032\002\001\004\001" +
    "\005\001\007\001\011\001\014\001\031\001\036\001\042" +
    "\001\043\001\044\001\045\001\001\002\000\012\032\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\001\002\000\010\032\uffde\036" +
    "\uffde\041\uffde\001\002\000\032\002\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\011\ufffd\014\ufffd\031\ufffd\036\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\001\002\000\010\031\020\044\007" +
    "\045\012\001\002\000\010\031\020\044\007\045\012\001" +
    "\002\000\022\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\053" +
    "\023\054\032\ufff3\037\ufff3\001\002\000\034\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\032\uffe6\037\uffe6\001\002\000" +
    "\010\031\020\044\007\045\012\001\002\000\010\031\020" +
    "\044\007\045\012\001\002\000\026\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\056\025\057\032\ufff1" +
    "\037\ufff1\001\002\000\010\031\020\044\007\045\012\001" +
    "\002\000\010\031\020\044\007\045\012\001\002\000\034" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\063\027\062\030\061\032\uffed\037\uffed" +
    "\001\002\000\010\031\020\044\007\045\012\001\002\000" +
    "\010\031\020\044\007\045\012\001\002\000\010\031\020" +
    "\044\007\045\012\001\002\000\034\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\032\uffeb\037\uffeb\001\002\000\034\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\037\uffea\001" +
    "\002\000\034\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032" +
    "\uffe9\037\uffe9\001\002\000\034\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\063\027" +
    "\062\030\061\032\uffee\037\uffee\001\002\000\026\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\056\025" +
    "\057\032\ufff0\037\ufff0\001\002\000\022\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\053\023\054\032\ufff4\037\ufff4\001" +
    "\002\000\010\031\020\044\007\045\012\001\002\000\010" +
    "\016\075\017\074\037\076\001\002\000\010\031\020\044" +
    "\007\045\012\001\002\000\010\031\020\044\007\045\012" +
    "\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\007\ufff9\011" +
    "\ufff9\014\ufff9\031\ufff9\036\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\001\002\000\016\016\ufff7\017\ufff7\020\047\021" +
    "\050\032\ufff7\037\ufff7\001\002\000\016\016\ufff6\017\ufff6" +
    "\020\047\021\050\032\ufff6\037\ufff6\001\002\000\010\016" +
    "\075\017\074\032\102\001\002\000\034\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\037\uffe5\001\002\000\032" +
    "\002\ufffc\004\ufffc\005\ufffc\007\ufffc\011\ufffc\014\ufffc\031" +
    "\ufffc\036\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\001\002" +
    "\000\010\031\020\044\007\045\012\001\002\000\010\016" +
    "\075\017\074\032\106\001\002\000\004\035\107\001\002" +
    "\000\026\004\014\005\011\007\004\011\031\014\006\031" +
    "\020\042\017\043\015\044\007\045\012\001\002\000\030" +
    "\004\014\005\011\007\004\011\031\014\006\031\020\036" +
    "\111\042\017\043\015\044\007\045\012\001\002\000\032" +
    "\002\ufffb\004\ufffb\005\ufffb\007\ufffb\011\ufffb\014\ufffb\031" +
    "\ufffb\036\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\001\002" +
    "\000\012\032\uffe1\036\uffe1\037\uffe1\041\uffe1\001\002\000" +
    "\010\031\020\044\007\045\012\001\002\000\010\016\075" +
    "\017\074\032\115\001\002\000\004\035\116\001\002\000" +
    "\026\004\014\005\011\007\004\011\031\014\006\031\020" +
    "\042\017\043\015\044\007\045\012\001\002\000\030\004" +
    "\014\005\011\007\004\011\031\014\006\031\020\036\120" +
    "\042\017\043\015\044\007\045\012\001\002\000\032\002" +
    "\ufffa\004\ufffa\005\ufffa\007\ufffa\011\ufffa\014\ufffa\031\ufffa" +
    "\036\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\001\002\000" +
    "\004\002\000\001\002\000\004\015\123\001\002\000\004" +
    "\035\124\001\002\000\012\011\031\014\006\042\017\043" +
    "\015\001\002\000\006\036\126\041\037\001\002\000\012" +
    "\032\uffdf\036\uffdf\037\uffdf\041\uffdf\001\002\000\010\031" +
    "\020\044\007\045\012\001\002\000\010\016\075\017\074" +
    "\032\131\001\002\000\004\035\132\001\002\000\026\004" +
    "\014\005\011\007\004\011\031\014\006\031\020\042\017" +
    "\043\015\044\007\045\012\001\002\000\030\004\014\005" +
    "\011\007\004\011\031\014\006\031\020\036\134\042\017" +
    "\043\015\044\007\045\012\001\002\000\004\010\135\001" +
    "\002\000\004\035\136\001\002\000\026\004\014\005\011" +
    "\007\004\011\031\014\006\031\020\042\017\043\015\044" +
    "\007\045\012\001\002\000\030\004\014\005\011\007\004" +
    "\011\031\014\006\031\020\036\140\042\017\043\015\044" +
    "\007\045\012\001\002\000\032\002\ufff8\004\ufff8\005\ufff8" +
    "\007\ufff8\011\ufff8\014\ufff8\031\ufff8\036\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\032\002\020\003\004\006\015\007\026\010" +
    "\025\011\023\012\022\013\021\014\007\016\027\017\024" +
    "\020\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\121\001\001\000\002\001\001\000\030\002\042" +
    "\003\004\006\015\007\026\010\025\011\023\012\022\013" +
    "\021\016\027\017\024\020\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\100\007\026\010\025\011\023\012\022\013" +
    "\021\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\031\001\001\000\004\017\032\001\001\000\002\001" +
    "\001\000\010\015\034\016\035\020\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\044\020\012\001" +
    "\001\000\002\001\001\000\032\002\020\003\004\006\015" +
    "\007\026\010\025\011\023\012\022\013\021\014\041\016" +
    "\027\017\024\020\012\001\001\000\030\002\042\003\004" +
    "\006\015\007\026\010\025\011\023\012\022\013\021\016" +
    "\027\017\024\020\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\070\011\023\012\022\013\021\017\051\001\001\000\014" +
    "\010\050\011\023\012\022\013\021\017\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\067\012\022" +
    "\013\021\017\051\001\001\000\012\011\054\012\022\013" +
    "\021\017\051\001\001\000\002\001\001\000\010\012\066" +
    "\013\021\017\051\001\001\000\010\012\057\013\021\017" +
    "\051\001\001\000\002\001\001\000\006\013\065\017\051" +
    "\001\001\000\006\013\064\017\051\001\001\000\006\013" +
    "\063\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\072\007\026\010\025\011\023" +
    "\012\022\013\021\017\051\001\001\000\002\001\001\000" +
    "\016\007\077\010\025\011\023\012\022\013\021\017\051" +
    "\001\001\000\016\007\076\010\025\011\023\012\022\013" +
    "\021\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\104\007\026\010\025\011\023" +
    "\012\022\013\021\017\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\020\003\004\006\015\007\026" +
    "\010\025\011\023\012\022\013\021\014\107\016\027\017" +
    "\024\020\012\001\001\000\030\002\042\003\004\006\015" +
    "\007\026\010\025\011\023\012\022\013\021\016\027\017" +
    "\024\020\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\113\007\026\010\025\011\023\012\022\013" +
    "\021\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\020\003\004\006\015\007\026\010\025\011" +
    "\023\012\022\013\021\014\116\016\027\017\024\020\012" +
    "\001\001\000\030\002\042\003\004\006\015\007\026\010" +
    "\025\011\023\012\022\013\021\016\027\017\024\020\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\124\016\035\020\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\127\007\026\010\025\011\023\012\022\013\021\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\020\003\004\006\015\007\026\010\025\011\023\012\022" +
    "\013\021\014\132\016\027\017\024\020\012\001\001\000" +
    "\030\002\042\003\004\006\015\007\026\010\025\011\023" +
    "\012\022\013\021\016\027\017\024\020\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\020\003\004" +
    "\006\015\007\026\010\025\011\023\012\022\013\021\014" +
    "\136\016\027\017\024\020\012\001\001\000\030\002\042" +
    "\003\004\006\015\007\026\010\025\011\023\012\022\013" +
    "\021\016\027\017\024\020\012\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Dec PUNTOCOMA 
            {
              Statement RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= Ident IGUAL Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp SUMA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Exp RESTA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Op0 
            {
              Statement RESULT =null;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op0 ::= Op0 MUL Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= Op0 DIV Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op0 ::= Op1 
            {
              Statement RESULT =null;
		Statement aDeterm2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Op1 ::= Op1 POT Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Op1 ::= Op1 MOD Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op1 ::= Op2 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op2 ::= Op2 AND Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op2 ::= Op2 OR Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op2 ::= Op3 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op3 ::= Op3 MAYOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op3 ::= Op3 MENOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op3 ::= Op3 OPIGUAL Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op3 ::= Op4 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op4 ::= INT 
            {
              Statement RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op4 ::= Ident 
            {
              Statement RESULT =null;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op4 ::= PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ident ::= IDEN 
            {
              Iden RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Dec ::= Tipo Ident 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Iden id = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Dec ::= FUN Tipo Ident PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              D RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunDef(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Dec ::= STRUCT Ident LLEVA LAP StructBodyDef LCIERRE 
            {
              D RESULT =null;
		Iden id1 = (Iden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 st1.setName(id1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StructBodyDef ::= StructBodyDef COMA Dec 
            {
              StructDef RESULT =null;
		StructDef st1 = (StructDef)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StructBodyDef ::= Dec 
            {
              StructDef RESULT =null;
		D d1 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new StructDef(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

