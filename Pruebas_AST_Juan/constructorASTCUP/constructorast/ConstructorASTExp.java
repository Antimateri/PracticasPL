
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Mar 28 19:59:06 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Mar 28 19:59:06 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\015\004\000\002\002\004\000\002\015" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\003\011\000\002\003\011\000\002\003\006\000" +
    "\002\003\015\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\005\000\002\012\003\000\002\012\003\000\002\014\003" +
    "\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\022\004\013\005\010\007\004\024\017\035" +
    "\016\036\014\037\006\040\011\001\002\000\004\024\105" +
    "\001\002\000\026\002\ufffe\004\ufffe\005\ufffe\007\ufffe\024" +
    "\ufffe\031\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\001\002" +
    "\000\034\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7" +
    "\032\uffe7\001\002\000\024\002\104\004\013\005\010\007" +
    "\004\024\017\035\016\036\014\037\006\040\011\001\002" +
    "\000\004\024\076\001\002\000\036\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\032\uffe2\033\uffe2\001\002\000" +
    "\004\040\011\001\002\000\004\024\066\001\002\000\004" +
    "\040\uffe3\001\002\000\010\011\057\012\056\032\065\001" +
    "\002\000\004\040\uffe4\001\002\000\010\024\017\037\006" +
    "\040\011\001\002\000\026\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\024\uffff\031\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\001\002\000\034\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\025\uffe8\032\uffe8\001\002\000\034\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\045" +
    "\022\044\023\043\025\uffec\032\uffec\001\002\000\026\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\040" +
    "\020\041\025\uffef\032\uffef\001\002\000\034\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\032\uffe6\033\054\001\002\000" +
    "\022\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\035\016\036" +
    "\025\ufff2\032\ufff2\001\002\000\016\011\ufff5\012\ufff5\013" +
    "\031\014\032\025\ufff5\032\ufff5\001\002\000\004\032\030" +
    "\001\002\000\026\002\ufffd\004\ufffd\005\ufffd\007\ufffd\024" +
    "\ufffd\031\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\001\002" +
    "\000\010\024\017\037\006\040\011\001\002\000\010\024" +
    "\017\037\006\040\011\001\002\000\022\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\035\016\036\025\ufff3\032\ufff3\001" +
    "\002\000\034\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025" +
    "\uffe6\032\uffe6\001\002\000\010\024\017\037\006\040\011" +
    "\001\002\000\010\024\017\037\006\040\011\001\002\000" +
    "\026\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\040\020\041\025\ufff1\032\ufff1\001\002\000\010\024" +
    "\017\037\006\040\011\001\002\000\010\024\017\037\006" +
    "\040\011\001\002\000\034\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\045\022\044" +
    "\023\043\025\uffed\032\uffed\001\002\000\010\024\017\037" +
    "\006\040\011\001\002\000\010\024\017\037\006\040\011" +
    "\001\002\000\010\024\017\037\006\040\011\001\002\000" +
    "\034\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\032" +
    "\uffeb\001\002\000\034\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\025\uffea\032\uffea\001\002\000\034\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\025\uffe9\032\uffe9\001\002\000\034" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\045\022\044\023\043\025\uffee\032\uffee" +
    "\001\002\000\026\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\040\020\041\025\ufff0\032\ufff0\001\002" +
    "\000\022\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\035\016" +
    "\036\025\ufff4\032\ufff4\001\002\000\010\024\017\037\006" +
    "\040\011\001\002\000\010\011\057\012\056\032\060\001" +
    "\002\000\010\024\017\037\006\040\011\001\002\000\010" +
    "\024\017\037\006\040\011\001\002\000\026\002\ufff9\004" +
    "\ufff9\005\ufff9\007\ufff9\024\ufff9\031\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\001\002\000\016\011\ufff7\012\ufff7\013" +
    "\031\014\032\025\ufff7\032\ufff7\001\002\000\016\011\ufff6" +
    "\012\ufff6\013\031\014\032\025\ufff6\032\ufff6\001\002\000" +
    "\010\011\057\012\056\025\064\001\002\000\034\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\032\uffe5\001\002" +
    "\000\026\002\ufffc\004\ufffc\005\ufffc\007\ufffc\024\ufffc\031" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\001\002\000\010" +
    "\024\017\037\006\040\011\001\002\000\010\011\057\012" +
    "\056\025\070\001\002\000\004\030\071\001\002\000\022" +
    "\004\013\005\010\007\004\024\017\035\016\036\014\037" +
    "\006\040\011\001\002\000\024\004\013\005\010\007\004" +
    "\024\017\031\074\035\016\036\014\037\006\040\011\001" +
    "\002\000\026\002\001\004\001\005\001\007\001\024\001" +
    "\031\001\035\001\036\001\037\001\040\001\001\002\000" +
    "\026\002\ufffb\004\ufffb\005\ufffb\007\ufffb\024\ufffb\031\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\001\002\000\004\032" +
    "\uffe1\001\002\000\010\024\017\037\006\040\011\001\002" +
    "\000\010\011\057\012\056\025\100\001\002\000\004\030" +
    "\101\001\002\000\022\004\013\005\010\007\004\024\017" +
    "\035\016\036\014\037\006\040\011\001\002\000\024\004" +
    "\013\005\010\007\004\024\017\031\103\035\016\036\014" +
    "\037\006\040\011\001\002\000\026\002\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\024\ufffa\031\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\001\002\000\004\002\000\001\002\000\010\024" +
    "\017\037\006\040\011\001\002\000\010\011\057\012\056" +
    "\025\107\001\002\000\004\030\110\001\002\000\022\004" +
    "\013\005\010\007\004\024\017\035\016\036\014\037\006" +
    "\040\011\001\002\000\024\004\013\005\010\007\004\024" +
    "\017\031\112\035\016\036\014\037\006\040\011\001\002" +
    "\000\004\010\113\001\002\000\004\030\114\001\002\000" +
    "\022\004\013\005\010\007\004\024\017\035\016\036\014" +
    "\037\006\040\011\001\002\000\024\004\013\005\010\007" +
    "\004\024\017\031\116\035\016\036\014\037\006\040\011" +
    "\001\002\000\026\002\ufff8\004\ufff8\005\ufff8\007\ufff8\024" +
    "\ufff8\031\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\032\002\017\003\004\004\014\005\025\006" +
    "\024\007\022\010\021\011\020\012\011\013\026\014\023" +
    "\015\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\072\003\004\004\014\005\025" +
    "\006\024\007\022\010\021\011\020\012\011\013\026\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\062\005\025" +
    "\006\024\007\022\010\021\011\020\014\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\052" +
    "\007\022\010\021\011\020\014\033\001\001\000\014\006" +
    "\032\007\022\010\021\011\020\014\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\051\010\021\011" +
    "\020\014\033\001\001\000\012\007\036\010\021\011\020" +
    "\014\033\001\001\000\002\001\001\000\010\010\050\011" +
    "\020\014\033\001\001\000\010\010\041\011\020\014\033" +
    "\001\001\000\002\001\001\000\006\011\047\014\033\001" +
    "\001\000\006\011\046\014\033\001\001\000\006\011\045" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\054\005\025\006\024\007\022\010" +
    "\021\011\020\014\033\001\001\000\002\001\001\000\016" +
    "\005\061\006\024\007\022\010\021\011\020\014\033\001" +
    "\001\000\016\005\060\006\024\007\022\010\021\011\020" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\066\005\025\006\024\007\022\010" +
    "\021\011\020\014\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\017\003\004\004\014\005\025\006" +
    "\024\007\022\010\021\011\020\012\011\013\026\014\023" +
    "\015\071\001\001\000\030\002\072\003\004\004\014\005" +
    "\025\006\024\007\022\010\021\011\020\012\011\013\026" +
    "\014\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\076\005\025\006\024\007\022" +
    "\010\021\011\020\014\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\017\003\004\004\014\005\025" +
    "\006\024\007\022\010\021\011\020\012\011\013\026\014" +
    "\023\015\101\001\001\000\030\002\072\003\004\004\014" +
    "\005\025\006\024\007\022\010\021\011\020\012\011\013" +
    "\026\014\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\105\005\025\006\024\007\022\010\021\011" +
    "\020\014\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\017\003\004\004\014\005\025\006\024\007" +
    "\022\010\021\011\020\012\011\013\026\014\023\015\110" +
    "\001\001\000\030\002\072\003\004\004\014\005\025\006" +
    "\024\007\022\010\021\011\020\012\011\013\026\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\017\003\004\004\014\005\025\006\024\007\022\010\021" +
    "\011\020\012\011\013\026\014\023\015\114\001\001\000" +
    "\030\002\072\003\004\004\014\005\025\006\024\007\022" +
    "\010\021\011\020\012\011\013\026\014\023\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Dec PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement d1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= Ident IGUAL Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement id1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(id1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp SUMA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Exp RESTA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Op0 
            {
              Statement RESULT =null;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op0 ::= Op0 MUL Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= Op0 DIV Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op0 ::= Op1 
            {
              Statement RESULT =null;
		Statement aDeterm2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Op1 ::= Op1 POT Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Op1 ::= Op1 MOD Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op1 ::= Op2 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op2 ::= Op2 AND Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op2 ::= Op2 OR Op3 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op2 ::= Op3 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op3 ::= Op3 MAYOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op3 ::= Op3 MENOR Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op3 ::= Op3 OPIGUAL Op4 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op3 ::= Op4 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op4 ::= INT 
            {
              Statement RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op4 ::= Ident 
            {
              Statement RESULT =null;
		Statement id = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op4 ::= PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= TIPOINT 
            {
              Statement RESULT =null;
		 RESULT = new TSimple(KindT.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= TIPOBOOL 
            {
              Statement RESULT =null;
		 RESULT = new TSimple(KindT.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ident ::= IDEN 
            {
              Statement RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ident",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Dec ::= Tipo Ident 
            {
              Statement RESULT =null;
		Statement t1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement id = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(t1); array.add(id);
      RESULT= new Dec(KindD.VAR, array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

