
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Mar 28 00:52:14 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Mar 28 00:52:14 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\003\003\000\002\003\004\000\002\005\011" +
    "\000\002\005\011\000\002\005\006\000\002\005\015\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\014\004\016\005\006\007\005\024\013\035" +
    "\007\001\002\000\024\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\025\ufff0\032\ufff0\033\ufff0\001\002\000" +
    "\004\024\060\001\002\000\004\024\052\001\002\000\024" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\025" +
    "\uffef\032\uffef\033\uffef\001\002\000\024\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\031\016\032\025\ufff3\032\ufff3\033" +
    "\ufff3\001\002\000\020\011\ufff6\012\ufff6\013\026\014\027" +
    "\025\ufff6\032\ufff6\033\ufff6\001\002\000\004\002\051\001" +
    "\002\000\006\024\013\035\007\001\002\000\012\011\024" +
    "\012\022\032\044\033\043\001\002\000\020\002\uffff\004" +
    "\016\005\006\007\005\024\013\031\uffff\035\007\001\002" +
    "\000\004\024\020\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\007\ufffe\024\ufffe\031\ufffe\035\ufffe\001\002\000\006" +
    "\024\013\035\007\001\002\000\010\011\024\012\022\025" +
    "\023\001\002\000\006\024\013\035\007\001\002\000\004" +
    "\030\036\001\002\000\006\024\013\035\007\001\002\000" +
    "\020\011\ufff8\012\ufff8\013\026\014\027\025\ufff8\032\ufff8" +
    "\033\ufff8\001\002\000\006\024\013\035\007\001\002\000" +
    "\006\024\013\035\007\001\002\000\024\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\031\016\032\025\ufff4\032\ufff4\033" +
    "\ufff4\001\002\000\006\024\013\035\007\001\002\000\006" +
    "\024\013\035\007\001\002\000\024\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\025\ufff2\032\ufff2\033\ufff2" +
    "\001\002\000\024\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\025\ufff1\032\ufff1\033\ufff1\001\002\000\024" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\031\016\032\025" +
    "\ufff5\032\ufff5\033\ufff5\001\002\000\014\004\016\005\006" +
    "\007\005\024\013\035\007\001\002\000\004\031\040\001" +
    "\002\000\020\002\ufffc\004\ufffc\005\ufffc\007\ufffc\024\ufffc" +
    "\031\ufffc\035\ufffc\001\002\000\020\011\ufff7\012\ufff7\013" +
    "\026\014\027\025\ufff7\032\ufff7\033\ufff7\001\002\000\006" +
    "\002\001\031\001\001\002\000\006\024\013\035\007\001" +
    "\002\000\020\002\ufffd\004\ufffd\005\ufffd\007\ufffd\024\ufffd" +
    "\031\ufffd\035\ufffd\001\002\000\010\011\024\012\022\032" +
    "\046\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\007\ufffa" +
    "\024\ufffa\031\ufffa\035\ufffa\001\002\000\010\011\024\012" +
    "\022\025\050\001\002\000\024\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\025\uffee\032\uffee\033\uffee\001" +
    "\002\000\004\002\000\001\002\000\006\024\013\035\007" +
    "\001\002\000\010\011\024\012\022\025\054\001\002\000" +
    "\004\030\055\001\002\000\014\004\016\005\006\007\005" +
    "\024\013\035\007\001\002\000\004\031\057\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\007\ufffb\024\ufffb\031\ufffb" +
    "\035\ufffb\001\002\000\006\024\013\035\007\001\002\000" +
    "\010\011\024\012\022\025\062\001\002\000\004\030\063" +
    "\001\002\000\014\004\016\005\006\007\005\024\013\035" +
    "\007\001\002\000\004\031\065\001\002\000\004\010\066" +
    "\001\002\000\004\030\067\001\002\000\014\004\016\005" +
    "\006\007\005\024\013\035\007\001\002\000\004\031\071" +
    "\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\007\ufff9\024" +
    "\ufff9\031\ufff9\035\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\020\003\014\004\011\005\016\006\013\007" +
    "\010\010\007\011\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\046" +
    "\007\010\010\007\011\003\001\001\000\002\001\001\000" +
    "\020\003\014\004\041\005\016\006\013\007\010\010\007" +
    "\011\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\020\007\010\010\007\011\003\001\001\000\002" +
    "\001\001\000\010\007\040\010\007\011\003\001\001\000" +
    "\002\001\001\000\010\007\024\010\007\011\003\001\001" +
    "\000\002\001\001\000\006\010\034\011\003\001\001\000" +
    "\006\010\027\011\003\001\001\000\002\001\001\000\004" +
    "\011\033\001\001\000\004\011\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\014" +
    "\004\036\005\016\006\013\007\010\010\007\011\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\044\007\010\010\007\011" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\052\007\010\010\007\011\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\014\004" +
    "\055\005\016\006\013\007\010\010\007\011\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\060\007" +
    "\010\010\007\011\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\014\004\063\005\016\006\013\007" +
    "\010\010\007\011\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\014\004\067\005" +
    "\016\006\013\007\010\010\007\011\003\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bloque ::= Linea Bloque 
            {
              Statement RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement b1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new InsBin(KindI.BLOQUE,l1,b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		Statement start_val = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= Linea 
            {
              Statement RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instr ::= IF PAP Exp PCIERRE LAP Bloque LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Statement b2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new InsBin(KindI.IF,e2,b2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instr ::= WHILE PAP Exp PCIERRE LAP Bloque LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Statement b2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new InsBin(KindI.WHILE,e2,b2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= Exp IGUAL Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new InsBin(KindI.ASIG,e1,e2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bloque LCIERRE ELSE LAP Bloque LCIERRE 
            {
              Statement RESULT =null;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Statement b2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Statement b3 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new InsTer(KindI.IFELSE,e2,b2,b3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= Exp SUMA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp RESTA Op0 
            {
              Statement RESULT =null;
		Statement aDeexp1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Op0 
            {
              Statement RESULT =null;
		Statement aDeterm = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Op0 ::= Op0 MUL Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op0 ::= Op0 DIV Op1 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= Op1 
            {
              Statement RESULT =null;
		Statement aDeterm2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op1 ::= Op1 POT Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Op1 ::= Op1 MOD Op2 
            {
              Statement RESULT =null;
		Statement aDeterm1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Op1 ::= Op2 
            {
              Statement RESULT =null;
		Statement aDefact = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op2 ::= INT 
            {
              Statement RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op2 ::= PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

