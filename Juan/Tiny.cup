package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal INT, BOOL, IF, IFELSE, ELSE, WHILE, FUN, CALL, RETURN, STRUCT, LLEVA, 
         IDEN, ENT, REAL, 
         SUMA, RESTA, MUL, DIV, MOD, POT, AND, OR, MAYOR, MENOR, OPIGUAL,
         PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE,
         PUNTOCOMA, IGUAL, COMA;

non terminal  S, Linea, Tipo, Def, Exp, Op0, Op1, Op2, Op3, DefFun, Bloque, Arg, InnerList, Val, DefStruct;

S         ::= S Linea | Linea;
Linea     ::= DefFun PUNTOCOMA | DefFun LAP Bloque LCIERRE | DefStruct LAP Arg LCIERRE | 
              Def PUNTOCOMA | Def IGUAL Exp PUNTOCOMA | IDEN CALL PAP InnerList PCIERRE PUNTOCOMA;
Exp       ::= Exp SUMA Op0 | Exp RESTA Op0 | Op0;
Op0       ::= Op0 MUL Op1 | Op0 DIV Op1 | Op1;
Op1       ::= Op1 MOD Op2 | Op1 POT Op2 | Op2;
Op2       ::= Op2 AND Op3 | Op2 OR Op3 | Op3;
Op3       ::= IDEN CALL PAP InnerList PCIERRE | Val;
Def       ::= Tipo IDEN;
DefFun    ::= FUN Tipo IDEN PAP Arg PCIERRE;
DefStruct ::= STRUCT IDEN LLEVA;
Tipo      ::= INT | BOOL | IDEN;
Arg       ::= Tipo IDEN COMA Arg | IDEN;
InnerList ::= Exp COMA InnerList | Exp;
Val       ::= IDEN | ENT | BOOL;
Bloque    ::= S RETURN PUNTOCOMA | S RETURN Val PUNTOCOMA;
