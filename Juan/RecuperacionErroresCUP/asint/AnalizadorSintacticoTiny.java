
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 17 13:13:25 CET 2023
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 17 13:13:25 CET 2023
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\006\000\002\003\006" +
    "\000\002\003\004\000\002\003\006\000\002\003\010\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\007\000" +
    "\002\012\003\000\002\005\004\000\002\005\004\000\002" +
    "\013\010\000\002\020\005\000\002\004\003\000\002\004" +
    "\003\000\002\015\006\000\002\015\003\000\002\015\002" +
    "\000\002\016\005\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\014\005\000\002" +
    "\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\016\003\017\004\005\005\007\012\011\015" +
    "\013\017\014\001\002\000\006\041\114\043\113\001\002" +
    "\000\004\017\uffe6\001\002\000\004\017\112\001\002\000" +
    "\004\017\uffe5\001\002\000\006\043\107\044\106\001\002" +
    "\000\006\004\005\005\007\001\002\000\004\041\071\001" +
    "\002\000\004\017\067\001\002\000\004\013\023\001\002" +
    "\000\020\002\021\003\017\004\005\005\007\012\011\015" +
    "\013\017\014\001\002\000\022\002\uffff\003\uffff\004\uffff" +
    "\005\uffff\012\uffff\014\uffff\015\uffff\017\uffff\001\002\000" +
    "\004\017\020\001\002\000\006\043\uffe9\044\uffe9\001\002" +
    "\000\004\002\000\001\002\000\022\002\001\003\001\004" +
    "\001\005\001\012\001\014\001\015\001\017\001\001\002" +
    "\000\004\035\024\001\002\000\010\005\030\017\033\020" +
    "\031\001\002\000\030\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\053\031\054\036\ufff0\043\ufff0\045" +
    "\ufff0\001\002\000\024\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\050\027\051\036\ufff3\043\ufff3\045\ufff3\001\002\000" +
    "\020\022\ufff6\023\ufff6\024\045\025\046\036\ufff6\043\ufff6" +
    "\045\ufff6\001\002\000\030\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\036\uffdd\043\uffdd" +
    "\045\uffdd\001\002\000\030\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\036\uffde\043\uffde" +
    "\045\uffde\001\002\000\030\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\036\uffeb\043\uffeb" +
    "\045\uffeb\001\002\000\032\013\063\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\036\uffdf" +
    "\043\uffdf\045\uffdf\001\002\000\012\022\043\023\041\036" +
    "\uffe0\045\042\001\002\000\004\036\037\001\002\000\030" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\036\uffed\043\uffed\045\uffed\001\002\000\004" +
    "\043\040\001\002\000\022\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\012\ufff9\014\ufff9\015\ufff9\017\ufff9\001\002\000\010" +
    "\005\030\017\033\020\031\001\002\000\010\005\030\017" +
    "\033\020\031\001\002\000\010\005\030\017\033\020\031" +
    "\001\002\000\020\022\ufff8\023\ufff8\024\045\025\046\036" +
    "\ufff8\043\ufff8\045\ufff8\001\002\000\010\005\030\017\033" +
    "\020\031\001\002\000\010\005\030\017\033\020\031\001" +
    "\002\000\024\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\050" +
    "\027\051\036\ufff4\043\ufff4\045\ufff4\001\002\000\010\005" +
    "\030\017\033\020\031\001\002\000\010\005\030\017\033" +
    "\020\031\001\002\000\030\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\053\031\054\036\ufff1\043\ufff1" +
    "\045\ufff1\001\002\000\010\005\030\017\033\020\031\001" +
    "\002\000\010\005\030\017\033\020\031\001\002\000\030" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\036\uffee\043\uffee\045\uffee\001\002\000\030" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\036\uffef\043\uffef\045\uffef\001\002\000\030" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\053\031\054\036\ufff2\043\ufff2\045\ufff2\001\002\000\024" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\050\027\051\036" +
    "\ufff5\043\ufff5\045\ufff5\001\002\000\004\036\uffe1\001\002" +
    "\000\020\022\ufff7\023\ufff7\024\045\025\046\036\ufff7\043" +
    "\ufff7\045\ufff7\001\002\000\004\035\064\001\002\000\010" +
    "\005\030\017\033\020\031\001\002\000\004\036\066\001" +
    "\002\000\030\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\036\uffec\043\uffec\045\uffec\001" +
    "\002\000\004\016\070\001\002\000\004\041\uffe7\001\002" +
    "\000\012\004\005\005\007\017\074\042\uffe2\001\002\000" +
    "\004\017\076\001\002\000\004\042\075\001\002\000\006" +
    "\036\uffe3\042\uffe3\001\002\000\022\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\012\ufffc\014\ufffc\015\ufffc\017\ufffc\001\002" +
    "\000\004\045\077\001\002\000\014\004\005\005\007\017" +
    "\074\036\uffe2\042\uffe2\001\002\000\006\036\uffe4\042\uffe4" +
    "\001\002\000\004\017\102\001\002\000\004\035\103\001" +
    "\002\000\012\004\005\005\007\017\074\036\uffe2\001\002" +
    "\000\004\036\105\001\002\000\006\041\uffe8\043\uffe8\001" +
    "\002\000\010\005\030\017\033\020\031\001\002\000\022" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\017\ufffb\001\002\000\010\022\043\023\041\043\111" +
    "\001\002\000\022\002\ufffa\003\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\017\ufffa\001\002\000\006\043\uffea" +
    "\044\uffea\001\002\000\022\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\012\ufffe\014\ufffe\015\ufffe\017\ufffe\001\002\000\016" +
    "\003\017\004\005\005\007\012\011\015\013\017\014\001" +
    "\002\000\004\042\124\001\002\000\020\003\017\004\005" +
    "\005\007\012\011\014\117\015\013\017\014\001\002\000" +
    "\012\005\030\017\121\020\031\043\122\001\002\000\004" +
    "\043\123\001\002\000\004\043\uffdf\001\002\000\004\042" +
    "\uffdc\001\002\000\004\042\uffdb\001\002\000\022\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\012\ufffd\014\ufffd\015\ufffd\017" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\016\002\014\003\015\004\005\005\007\013" +
    "\003\020\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\021\004\005\005\007\013" +
    "\003\020\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\033\007\026\010\025\011\024" +
    "\012\035\016\034\017\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\061\010\025\011\024\012" +
    "\035\017\031\001\001\000\020\006\033\007\026\010\025" +
    "\011\024\012\035\016\060\017\031\001\001\000\014\007" +
    "\043\010\025\011\024\012\035\017\031\001\001\000\002" +
    "\001\001\000\012\010\057\011\024\012\035\017\031\001" +
    "\001\000\012\010\046\011\024\012\035\017\031\001\001" +
    "\000\002\001\001\000\010\011\056\012\035\017\031\001" +
    "\001\000\010\011\051\012\035\017\031\001\001\000\002" +
    "\001\001\000\006\012\055\017\031\001\001\000\006\012" +
    "\054\017\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\033\007\026" +
    "\010\025\011\024\012\035\016\064\017\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\071\015\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\071\015\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\071\015\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\107\007\026\010\025\011\024\012\035" +
    "\017\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\115\003\015\004\005\005\007\013\003\014\114\020" +
    "\011\001\001\000\002\001\001\000\014\003\021\004\005" +
    "\005\007\013\003\020\011\001\001\000\004\017\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S Linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= DefFun PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= DefFun LAP Bloque LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= DefStruct LAP Arg LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= Def PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Linea ::= Def IGUAL Exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Linea ::= IDEN CALL PAP InnerList PCIERRE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Linea",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= Exp SUMA Op0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp RESTA Op0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Op0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Op0 ::= Op0 MUL Op1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op0 ::= Op0 DIV Op1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= Op1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op1 ::= Op1 MOD Op2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Op1 ::= Op1 POT Op2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Op1 ::= Op2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Op2 ::= Op2 AND Op3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Op2 ::= Op2 OR Op3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op2 ::= Op3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op3 ::= IDEN CALL PAP InnerList PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op3 ::= Val 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Def ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Def",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Def ::= error IDEN 
            {
              Object RESULT =null;
		 System.out.println(" Juan, a estas alturas deberias saber que es un tipo y que no. Por ejemplo, lo que sea que haya en la linea no es un tipo.");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Def",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefFun ::= FUN Tipo IDEN PAP Arg PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefFun",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefStruct ::= STRUCT IDEN LLEVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefStruct",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Arg ::= Tipo IDEN COMA Arg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arg",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Arg ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arg",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Arg ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arg",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InnerList ::= Exp COMA InnerList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InnerList",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InnerList ::= Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InnerList",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Val ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Val",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Val ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Val",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Val ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Val",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bloque ::= S RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bloque ::= S RETURN Val PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

