package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);
:};


terminal IF, WHILE, IFELSE, ELSE, FUN, TIPEDEF, CALL, RETURN, STRUCT, LLEVA, PROC, EXEC,
         SUMA, RESTA, MUL, DIV, MOD, POT, AND, OR, MAYOR, MENOR, OPIGUAL, DIST, NOT,
         PRINT, READ,
         PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE,
         PUNTOCOMA, IGUAL, COMA, PUNTO, DOSPUNTOS,
         TIPOINT, TIPOBOOL, NULL, REF, PUNTERO, VALPTR,
         TRUE, FALSE;

terminal TokenValue INT, IDEN;

non terminal  Statement Linea, Instr;
non terminal  E Exp, Op0, Op1, Op2, Op3, Op4, Op5;
non terminal  Bloque Bl;
non terminal  TStruct StructBodyDef;
non terminal  Dec Decl;
non terminal  IdenType IdType;
non terminal  IdenVar IdVar;
non terminal  IdenFun IdFun;
non terminal  T Tipo, Tipo2, Tipo3, Tipo4;
non terminal  StructIns StructInitOrden;
non terminal  InsBin Asign;
non terminal  Desig Des;
non terminal  ArrayList <Integer> dimensiones;



Bl ::= Bl: b1 Linea: l1 
   {: b1.append(l1);
      RESULT= b1; :};
Bl ::= Linea: l1
   {: RESULT=new Bloque(l1); :};

Linea ::= Instr: i1
   {: RESULT=i1; :};
Linea ::= Decl: d1 PUNTOCOMA
   {: RESULT=d1; :};
Linea ::= Exp: e1 PUNTOCOMA
   {: RESULT=e1; :};
Linea ::= PUNTOCOMA
   {: RESULT=null; :};

Instr ::= IF PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); :};
Instr ::= WHILE PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); :};
Instr ::= Asign: a1 PUNTOCOMA
   {: RESULT=a1; :};
Instr ::= IFELSE PAP Exp: e2 PCIERRE LAP Bl: b2 LCIERRE ELSE LAP Bl: b3 LCIERRE
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); :};
Instr ::= RETURN Exp: e1 PUNTOCOMA
   {: RESULT=new Return(e1); :};
Instr ::= PRINT PAP Exp: e1 PCIERRE PUNTOCOMA
   {: RESULT= new Print(e1); :};
Instr ::= READ PAP IdVar: id1 PCIERRE PUNTOCOMA
   {: RESULT= new Read(id1); :};
Instr ::= IdFun: id1 EXEC PAP StructInitOrden: args PCIERRE
   {: RESULT= new FunctCall(id1,args); :};
Instr ::= IdFun: id1 EXEC PAP PCIERRE
   {: RESULT= new FunctCall(id1,null); :};

Asign ::= Des: d1 IGUAL Exp: e2
   {: ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(d1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); :};

Exp ::= Exp: aDeexp1 SUMA Op0: aDeterm 
   {: RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); :};
Exp ::= Exp: aDeexp1 RESTA Op0: aDeterm 
   {: RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); :};
Exp ::= Op0: aDeterm
   {: RESULT=aDeterm; :};
Exp ::= PAP StructInitOrden: args1 COMA Exp: arg2 PCIERRE
   {: args1.addUnnamedArg(arg2);
      RESULT= args1; :};

Op0 ::= Op0: aDeterm1 MAYOR Op1: aDefact
   {: RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); :};
Op0 ::= Op0: aDeterm1 MENOR Op1: aDefact
   {: RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); :};
Op0 ::= Op0: aDeterm1 OPIGUAL Op1: aDefact
   {: RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); :};
Op0 ::= Op0: aDeterm1 DIST Op1: aDefact
   {: RESULT= new EBin(KindE.NEQ,aDeterm1,aDefact); :};
Op0 ::= Op1: aDefact
   {: RESULT=aDefact; :};    

Op1 ::= Op1: aDeterm1 MUL Op2: aDefact
   {: RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); :};
Op1 ::= Op1: aDeterm1 DIV Op2: aDefact
   {: RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); :};
Op1 ::= Op2: aDeterm2
   {: RESULT=aDeterm2; :};

Op2 ::= Op2: aDeterm1 POT Op3: aDefact
   {: RESULT= new EBin(KindE.POT,aDeterm1,aDefact); :};
Op2 ::= Op2: aDeterm1 MOD Op3: aDefact
   {: RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); :};
Op2 ::= Op3: aDefact
   {: RESULT=aDefact; :};

Op3 ::= Op3: aDeterm1 AND Op4: aDefact
   {: RESULT= new EBin(KindE.AND,aDeterm1,aDefact); :};
Op3 ::= Op3: aDeterm1 OR Op4: aDefact
   {: RESULT= new EBin(KindE.OR,aDeterm1,aDefact); :};
Op3 ::= Op4: aDefact
   {: RESULT=aDefact; :};                                  

Op4 ::= IdFun: id1 CALL PAP StructInitOrden: args PCIERRE
   {: RESULT= new FunctCall(id1,args); :};
//Op4 ::= IdFun: id1 CALL PAP Exp: args PCIERRE
//   {: RESULT= new FunctCall(id1,args); :};
Op4 ::= IdFun: id1 CALL PAP PCIERRE
   {: RESULT= new FunctCall(id1,null); :};
Op4 ::= Op5: aDefact
   {: RESULT=aDefact; :};

Op5 ::= INT: intValue           
   {: RESULT = new Int(intValue.lexema); :};
Op5 ::= TRUE
   {: RESULT = new Bool("true"); :};        
Op5 ::= FALSE
   {: RESULT = new Bool("false"); :};
Op5 ::= Des: d1    
   {: RESULT = new EBin(KindE.MEM, d1, null); :};
Op5 ::= PAP Exp: aDeexp PCIERRE
   {: RESULT = aDeexp; :};
Op5 ::= NULL
   {: RESULT = new Null(); :};
Op5 ::= NOT Op5: arg
   {: RESULT = new EBin(KindE.NOT, arg, null); :};

StructInitOrden ::= StructInitOrden: args1 COMA Exp: arg2
   {: args1.addUnnamedArg(arg2);
      RESULT= args1; :};
StructInitOrden ::= Exp: arg2
   {: StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; :};

Tipo ::= PUNTERO Tipo2: t1
   {: RESULT = new TPointer(t1); :};
Tipo ::= Tipo2: t1
   {: RESULT = t1; :};


// --- Pruebas para construccion de arrays: ignorar ---
/* dimensiones ::= CAP INT: intValue
   {: ArrayList <Integer> ret = new ArrayList <Integer> ();
      ret.add(Integer.parseInt(intValue.lexema));
      RESULT = ret; :};
dimensiones ::= dimensiones: d CCIERRE CAP INT: intValue
   {: d.add(Integer.parseInt(intValue.lexema)); 
      RESULT = d; :};

Tipo2 ::= Tipo3: t1 dimensiones: d1 CCIERRE
   {: RESULT = new TListMultDim(t1, d1); :};
*/


Tipo2 ::= Tipo2: t1 CAP INT: intValue CCIERRE
   {: RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); :};
Tipo2 ::= Tipo3: t1
   {: RESULT = t1; :};


Tipo3 ::= TIPOINT
   {: RESULT = new TSimple(KindT.INT, RefMode.VALUE); :};
Tipo3 ::= TIPOBOOL
   {: RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); :};
Tipo3 ::= DOSPUNTOS IdType: id
   {: RESULT = new TComp(id, RefMode.VALUE); :};
Tipo3 ::= PAP StructBodyDef: args1 PCIERRE
   {: RESULT = args1; :};
Tipo3 ::= REF TIPOINT
   {: RESULT = new TSimple(KindT.INT, RefMode.REF); :};
Tipo3 ::= REF TIPOBOOL
   {: RESULT = new TSimple(KindT.BOOL, RefMode.REF); :};
Tipo3 ::= REF IdType: id
   {: RESULT = new TComp(id, RefMode.REF); :};
Tipo3 ::= Tipo4: t1
   {: RESULT = t1; :};

Tipo4 ::= PAP Tipo : t1 PCIERRE
   {: RESULT = t1; :};


IdVar ::= IDEN: idValue 
   {: RESULT = new IdenVar(idValue.lexema); :};
IdType ::= IDEN: idValue
   {: RESULT = new IdenType(idValue.lexema); :};
IdFun ::= IDEN: idValue
   {: RESULT = new IdenFun(idValue.lexema); :};
   


Decl ::= Tipo: t1 IdVar: id1
   {:RESULT= new DecVar(t1, id1); :};
Decl ::= FUN Tipo : t1 IdFun: id1 PAP StructBodyDef: st1 PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new DecFun(t1, id1, st1, b1); :};
Decl ::= FUN Tipo : t1 IdFun: id1 PAP PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new DecFun(t1, id1, null, b1); :};
Decl ::= PROC IdFun: id1 PAP StructBodyDef: st1 PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new DecFun(null, id1, st1, b1); :};
Decl ::= PROC IdFun: id1 PAP PCIERRE LAP Bl: b1 LCIERRE
   {: RESULT= new DecFun(null, id1, null, b1); :};
Decl ::= STRUCT IdType: id1 LLEVA LAP StructBodyDef: st1 LCIERRE
   {: RESULT= new DecStruct(id1, st1); :};
Decl ::= TIPEDEF IdType: id1 Tipo: t1
   {: RESULT= new DecTipo(id1,t1); :};


StructBodyDef ::= StructBodyDef: st1 COMA Decl: d1
   {: st1.append(d1);
      RESULT= st1; :};
StructBodyDef ::= Decl: d1
   {: RESULT= new TStruct(d1); :};


Des ::= IdVar: id1
   {: RESULT= new DesigVar(id1); :};
Des ::= Des: d1 CAP Exp: e1 CCIERRE
   {: RESULT = new DesigPosArray(d1,e1); :};
Des ::= Des: d1 PUNTO IdVar: id1
   {: RESULT = new DesigCampo(d1,id1); :};
Des ::= PUNTERO PAP Des: d1 PCIERRE
   {: RESULT = new DesigRef(d1); :};
Des ::= VALPTR PAP Des: d1 PCIERRE
   {: RESULT = new GetPointerVal(d1); :};

   
