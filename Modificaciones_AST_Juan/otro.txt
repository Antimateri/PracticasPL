java -cp jflex.jar jflex.Main AnalizadorLexicoAbur.l
Reading "AnalizadorLexicoAbur.l"

Warning : Macro "tipo" has been declared but never used.

Warning : Macro "parteDecimal" has been declared but never used.

Warning : Macro "numeroReal" has been declared but never used.

Warning : Macro "reservada" has been declared but never used.

Warning : Macro "funcion" has been declared but never used.

Warning : Macro "registro" has been declared but never used.

Warning : Macro "bucle" has been declared but never used.

Warning : Macro "condicional" has been declared but never used.
Constructing NFA : 282 states in NFA
Converting NFA to DFA : 
.......................................................................................................................
121 states before minimization, 116 states in minimized DFA
Old file "AnalizadorLexicoExp.java" saved as "AnalizadorLexicoExp.java~"
Writing code to "AnalizadorLexicoExp.java"
cp AnalizadorLexicoExp.java constructorASTCUP/alex/
cd evaluadorExpresionesCUP/eval; java -cp ../../cup.jar java_cup.Main -parser Evaluador -symbols ClaseLexica -nopositions Eval.cup
cd constructorASTCUP/constructorast; java -cp ../../cup.jar java_cup.Main -parser ConstructorASTExp -symbols ClaseLexica -nopositions ../../ConstructorAST.cup
cd constructorASTCUP; javac -cp "../cup.jar:." */*.java; java -cp "../cup.jar:." constructorast.Main  input.txt
(module
(type $_sig_i32ri32 (func (param i32) (result i32)))
(type $_sig_i32 (func (param i32)))
(type $_sig_ri32 (func (result i32)))
(type $_sig_i32i32i32 (func (param i32 i32 i32)))(type $_sig_void (func ))
(import "runtime" "exceptionHandler" (func $exception (type $_sig_i32)))
(import "runtime" "print" (func $print (type $_sig_i32)))
(import "runtime" "read" (func $read (type $_sig_ri32)))
(memory 2000)
(global $SP (mut i32) (i32.const 0)) ;; start of stack
(global $MP (mut i32) (i32.const 0)) ;; mark pointer
(global $NP (mut i32) (i32.const 131071996)) ;; heap 2000*64*1024-4
(start $init)
(func $reserveStack (param $size i32)
(result i32)
get_global $MP
get_global $SP
set_global $MP
get_global $SP
get_local $size
i32.add
set_global $SP
get_global $SP
get_global $NP
i32.gt_u
if
i32.const 3
call $exception
end
)

(func $freeStack (type $_sig_void)
get_global $MP
i32.load
i32.load offset=4
set_global $SP
get_global $MP
i32.load
set_global $MP
)

(func $copyn (type $_sig_i32i32i32) ;; copy $n i32 slots from $src to $dest
(param $src i32)
(param $dest i32)
(param $n i32)
block
loop
get_local $n
i32.eqz
br_if 1
get_local $n
i32.const 1
i32.sub
set_local $n
get_local $dest
get_local $src
i32.load
i32.store
get_local $dest
i32.const 4
i32.add
set_local $dest
get_local $src
i32.const 4
i32.add
set_local $src
br 0
end
end
)

(func $init (type $_sig_void)
(local $localsStart i32) 
(local $temp i32) 
i32.const 44 
call $reserveStack 
set_local $temp 
get_global $MP 
get_local $temp 
i32.store 
get_global $MP 
get_global $SP 
i32.store offset=4 
get_global $MP 
i32.const 8 
i32.add 
set_local $localsStart 
i32.const 0
i32.const 8 
i32.add
i32.const 1
i32.store
i32.const 0
i32.const 8 
i32.add

i32.load

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 1

i32.add

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 1

i32.sub

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 2

i32.mul

call $print
i32.const 0
i32.const 8 
i32.add
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 5

i32.add
i32.store 
i32.const 0
i32.const 8 
i32.add

i32.load

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 2

i32.div_s

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 2

i32.rem_u

call $print
i32.const 0
i32.const 8 
i32.add

i32.load

i32.const 4

i32.rem_u

call $print
call $freeStack
)

(export "memory" (memory 0))
)

