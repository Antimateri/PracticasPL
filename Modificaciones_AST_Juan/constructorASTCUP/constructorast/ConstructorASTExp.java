
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 05 21:47:06 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import alex.AnalizadorLexicoExp;
import ast.Declaraciones.*;
import ast.Designadores.*;
import ast.Expresiones.*;
import ast.Instrucciones.*;
import ast.Tipos.*;
import ast.Enumeradores.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 05 21:47:06 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\014\005\000\002\014\003\000\002\002\003" +
    "\000\002\002\004\000\002\002\004\000\002\002\003\000" +
    "\002\003\010\000\002\003\007\000\002\003\004\000\002" +
    "\003\011\000\002\003\005\000\002\003\007\000\002\003" +
    "\007\000\002\003\006\000\002\027\005\000\002\031\003" +
    "\000\002\031\005\000\002\032\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\004\007\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\007\000\002\011" +
    "\006\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\026\005\000\002\026\003\000\002\022" +
    "\004\000\002\022\003\000\002\023\006\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\005\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\005\000\002\020" +
    "\003\000\002\017\003\000\002\021\003\000\002\016\004" +
    "\000\002\016\011\000\002\016\010\000\002\016\010\000" +
    "\002\016\007\000\002\016\010\000\002\016\005\000\002" +
    "\015\005\000\002\015\003\000\002\030\003\000\002\030" +
    "\006\000\002\030\005\000\002\030\006\000\002\030\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\064\004\024\005\045\007\020\010\007\012" +
    "\026\013\056\015\054\020\006\033\016\034\060\035\041" +
    "\036\037\040\010\044\012\050\004\051\033\052\050\053" +
    "\030\054\013\055\034\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\004\062\155\001\002\000\016\017" +
    "\uffe8\020\uffe8\037\uffe8\041\uffe8\044\uffe8\046\uffe8\001\002" +
    "\000\026\020\006\033\016\036\074\053\030\055\065\056" +
    "\014\057\027\060\055\061\011\062\131\001\002\000\004" +
    "\062\155\001\002\000\032\020\006\033\016\035\041\036" +
    "\066\040\010\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\042\001\002\000\042\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\037\uffd5\041\uffd5\044\uffd5\046" +
    "\uffd5\001\002\000\076\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\013\ufff9\015\ufff9\020\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\043\ufff9" +
    "\044\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\001\002\000\010\051\262\052\264\062\155\001\002\000" +
    "\004\036\257\001\002\000\050\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\037\uffb2\040\uffb2\041\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\001\002\000\026\020\006\033" +
    "\016\036\074\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\131\001\002\000\066\002\255\004\024\005" +
    "\045\007\020\010\007\012\026\013\056\015\054\020\006" +
    "\033\016\034\060\035\041\036\037\040\010\044\012\050" +
    "\004\051\033\052\050\053\030\054\013\055\034\056\014" +
    "\057\027\060\055\061\011\062\042\001\002\000\016\036" +
    "\161\050\004\051\033\052\050\054\013\055\163\001\002" +
    "\000\016\037\uffc0\040\uffc0\043\uffc0\044\uffc0\046\uffc0\062" +
    "\uffc0\001\002\000\016\037\uffc8\040\uffc8\043\uffc8\044\uffc8" +
    "\046\uffc8\062\uffc8\001\002\000\016\037\uffca\040\165\043" +
    "\uffca\044\uffca\046\uffca\062\uffca\001\002\000\004\036\236" +
    "\001\002\000\004\044\235\001\002\000\032\020\006\033" +
    "\016\035\041\036\066\040\010\053\030\055\065\056\014" +
    "\057\027\060\055\061\011\062\042\001\002\000\042\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\037\uffd4\041" +
    "\uffd4\044\uffd4\046\uffd4\001\002\000\042\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\037\uffd0\041\uffd0\044\uffd0" +
    "\046\uffd0\001\002\000\070\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\010\uffff\012\uffff\013\uffff\015\uffff\020\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\040\uffff\043\uffff\044\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\001\002\000\004\062" +
    "\131\001\002\000\016\037\uffc7\040\uffc7\043\uffc7\044\uffc7" +
    "\046\uffc7\062\uffc7\001\002\000\014\036\232\050\004\051" +
    "\033\052\050\054\013\001\002\000\006\011\142\016\225" +
    "\001\002\000\010\017\073\020\071\044\224\001\002\000" +
    "\052\007\020\010\007\013\056\015\054\020\006\033\016" +
    "\035\041\036\037\040\010\050\004\051\033\052\050\053" +
    "\030\054\013\055\034\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\042\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\037\uffd6\041\uffd6\044\uffd6\046\uffd6\001" +
    "\002\000\004\036\222\001\002\000\054\011\uffbc\016\uffbc" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001" +
    "\002\000\042\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\037\uffda\041\uffda\044\uffda\046\uffda\001\002\000\042" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\111\026\112\027\uffdd\030\uffdd\031\uffdd\032\uffdd\037\uffdd" +
    "\041\uffdd\044\uffdd\046\uffdd\001\002\000\004\036\216\001" +
    "\002\000\036\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\106" +
    "\024\107\027\uffe0\030\uffe0\031\uffe0\032\uffe0\037\uffe0\041" +
    "\uffe0\044\uffe0\046\uffe0\001\002\000\004\044\215\001\002" +
    "\000\016\037\uffc6\040\uffc6\043\uffc6\044\uffc6\046\uffc6\062" +
    "\uffc6\001\002\000\032\017\uffe3\020\uffe3\021\103\022\104" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\037\uffe3\041\uffe3\044" +
    "\uffe3\046\uffe3\001\002\000\026\017\uffea\020\uffea\027\101" +
    "\030\100\031\077\032\076\037\uffea\041\uffea\044\uffea\046" +
    "\uffea\001\002\000\076\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\012\ufffc\013\ufffc\015\ufffc\020\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\043\ufffc" +
    "\044\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\001\002\000\004\062\201\001\002\000\042\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\037\uffd3\041\uffd3\044" +
    "\uffd3\046\uffd3\001\002\000\004\062\155\001\002\000\042" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\040\132" +
    "\044\uffd2\045\152\047\133\001\002\000\004\036\061\001" +
    "\002\000\032\020\006\033\016\035\041\036\066\040\010" +
    "\053\030\055\065\056\014\057\027\060\055\061\011\062" +
    "\042\001\002\000\004\011\142\001\002\000\046\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\037\uffd2\040\132" +
    "\041\uffd2\044\uffd2\046\uffd2\047\133\001\002\000\010\017" +
    "\073\020\071\037\140\001\002\000\004\036\127\001\002" +
    "\000\032\020\006\033\016\035\041\036\066\040\010\053" +
    "\030\055\065\056\014\057\027\060\055\061\011\062\042" +
    "\001\002\000\004\046\124\001\002\000\012\017\073\020" +
    "\071\037\072\046\uffcc\001\002\000\030\020\006\033\016" +
    "\035\041\036\074\053\030\055\065\056\014\057\027\060" +
    "\055\061\011\062\042\001\002\000\042\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\037\uffd1\041\uffd1\044\uffd1" +
    "\046\uffd1\001\002\000\030\020\006\033\016\035\041\036" +
    "\074\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\032\020\006\033\016\035\041\036" +
    "\066\040\010\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\042\001\002\000\026\017\uffec\020\uffec\027" +
    "\101\030\100\031\077\032\076\037\uffec\041\uffec\044\uffec" +
    "\046\uffec\001\002\000\030\020\006\033\016\035\041\036" +
    "\074\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\030\020\006\033\016\035\041\036" +
    "\074\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\030\020\006\033\016\035\041\036" +
    "\074\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\030\020\006\033\016\035\041\036" +
    "\074\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\032\017\uffe7\020\uffe7\021\103\022" +
    "\104\027\uffe7\030\uffe7\031\uffe7\032\uffe7\037\uffe7\041\uffe7" +
    "\044\uffe7\046\uffe7\001\002\000\030\020\006\033\016\035" +
    "\041\036\074\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\042\001\002\000\030\020\006\033\016\035" +
    "\041\036\074\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\042\001\002\000\036\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\106\024\107\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\037\uffe1\041\uffe1\044\uffe1\046\uffe1\001\002\000" +
    "\030\020\006\033\016\035\041\036\074\053\030\055\065" +
    "\056\014\057\027\060\055\061\011\062\042\001\002\000" +
    "\030\020\006\033\016\035\041\036\074\053\030\055\065" +
    "\056\014\057\027\060\055\061\011\062\042\001\002\000" +
    "\042\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\111\026\112\027\uffdf\030\uffdf\031\uffdf\032\uffdf\037" +
    "\uffdf\041\uffdf\044\uffdf\046\uffdf\001\002\000\030\020\006" +
    "\033\016\035\041\036\074\053\030\055\065\056\014\057" +
    "\027\060\055\061\011\062\042\001\002\000\030\020\006" +
    "\033\016\035\041\036\074\053\030\055\065\056\014\057" +
    "\027\060\055\061\011\062\042\001\002\000\042\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\037\uffdb\041\uffdb" +
    "\044\uffdb\046\uffdb\001\002\000\042\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\037\uffdc\041\uffdc\044\uffdc\046" +
    "\uffdc\001\002\000\042\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\111\026\112\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\037\uffde\041\uffde\044\uffde\046\uffde\001\002" +
    "\000\036\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\106\024" +
    "\107\027\uffe2\030\uffe2\031\uffe2\032\uffe2\037\uffe2\041\uffe2" +
    "\044\uffe2\046\uffe2\001\002\000\032\017\uffe6\020\uffe6\021" +
    "\103\022\104\027\uffe6\030\uffe6\031\uffe6\032\uffe6\037\uffe6" +
    "\041\uffe6\044\uffe6\046\uffe6\001\002\000\032\017\uffe5\020" +
    "\uffe5\021\103\022\104\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\037\uffe5\041\uffe5\044\uffe5\046\uffe5\001\002\000\032\017" +
    "\uffe4\020\uffe4\021\103\022\104\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\037\uffe4\041\uffe4\044\uffe4\046\uffe4\001\002\000" +
    "\010\017\073\020\071\037\072\001\002\000\026\017\uffeb" +
    "\020\uffeb\027\101\030\100\031\077\032\076\037\uffeb\041" +
    "\uffeb\044\uffeb\046\uffeb\001\002\000\032\020\006\033\016" +
    "\035\041\036\066\040\010\053\030\055\065\056\014\057" +
    "\027\060\055\061\011\062\042\001\002\000\012\017\073" +
    "\020\071\037\126\046\uffcd\001\002\000\016\017\uffe9\020" +
    "\uffe9\037\uffe9\041\uffe9\044\uffe9\046\uffe9\001\002\000\010" +
    "\055\065\056\014\062\131\001\002\000\010\037\134\040" +
    "\132\047\133\001\002\000\052\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000\032\020" +
    "\006\033\016\035\041\036\066\040\010\053\030\055\065" +
    "\056\014\057\027\060\055\061\011\062\042\001\002\000" +
    "\004\062\131\001\002\000\050\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\037\uffaf\040\uffaf\041\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\001\002\000\050\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002\000\010" +
    "\017\073\020\071\041\137\001\002\000\050\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002\000\004" +
    "\044\141\001\002\000\076\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\015\ufff3\020\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043" +
    "\ufff3\044\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\001\002\000\004\036\143\001\002\000\034\020\006" +
    "\033\016\035\041\036\066\037\144\040\010\053\030\055" +
    "\065\056\014\057\027\060\055\061\011\062\042\001\002" +
    "\000\042\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\037\uffd8\041\uffd8\044\uffd8\046\uffd8\001\002\000\006\037" +
    "\150\046\147\001\002\000\012\017\073\020\071\037\uffcc" +
    "\046\uffcc\001\002\000\032\020\006\033\016\035\041\036" +
    "\066\040\010\053\030\055\065\056\014\057\027\060\055" +
    "\061\011\062\042\001\002\000\042\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\037\uffd9\041\uffd9\044\uffd9\046" +
    "\uffd9\001\002\000\012\017\073\020\071\037\uffcd\046\uffcd" +
    "\001\002\000\032\020\006\033\016\035\041\036\066\040" +
    "\010\053\030\055\065\056\014\057\027\060\055\061\011" +
    "\062\042\001\002\000\010\017\073\020\071\044\ufff0\001" +
    "\002\000\004\014\156\001\002\000\034\014\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\044\uffbd\046\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\055\uffbd\062\uffbd\001\002\000\004" +
    "\042\157\001\002\000\026\007\020\010\007\013\056\015" +
    "\054\036\161\050\004\051\033\052\050\054\013\055\163" +
    "\001\002\000\010\037\uffb3\043\uffb3\046\uffb3\001\002\000" +
    "\026\007\020\010\007\013\056\015\054\036\161\050\004" +
    "\051\033\052\050\054\013\055\163\001\002\000\006\043" +
    "\171\046\170\001\002\000\014\036\161\050\004\051\033" +
    "\052\050\054\013\001\002\000\016\037\uffcb\040\165\043" +
    "\uffcb\044\uffcb\046\uffcb\062\uffcb\001\002\000\004\061\166" +
    "\001\002\000\004\041\167\001\002\000\016\037\uffc9\040" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\062\uffc9\001\002\000\026" +
    "\007\020\010\007\013\056\015\054\036\161\050\004\051" +
    "\033\052\050\054\013\055\163\001\002\000\012\037\uffb6" +
    "\043\uffb6\044\uffb6\046\uffb6\001\002\000\010\037\uffb4\043" +
    "\uffb4\046\uffb4\001\002\000\006\037\176\062\131\001\002" +
    "\000\006\037\175\046\170\001\002\000\016\037\uffc4\040" +
    "\uffc4\043\uffc4\044\uffc4\046\uffc4\062\uffc4\001\002\000\016" +
    "\037\uffbf\040\uffbf\043\uffbf\044\uffbf\046\uffbf\062\uffbf\001" +
    "\002\000\012\037\uffbb\043\uffbb\044\uffbb\046\uffbb\001\002" +
    "\000\004\036\202\001\002\000\004\036\uffbc\001\002\000" +
    "\030\007\020\010\007\013\056\015\054\036\161\037\204" +
    "\050\004\051\033\052\050\054\013\055\163\001\002\000" +
    "\006\037\213\046\170\001\002\000\066\004\024\005\045" +
    "\007\020\010\007\012\026\013\056\015\054\020\006\033" +
    "\016\034\060\035\041\036\037\040\010\042\205\044\012" +
    "\050\004\051\033\052\050\053\030\054\013\055\034\056" +
    "\014\057\027\060\055\061\011\062\042\001\002\000\064" +
    "\004\024\005\045\007\020\010\007\012\026\013\056\015" +
    "\054\020\006\033\016\034\060\035\041\036\037\040\010" +
    "\044\012\050\004\051\033\052\050\053\030\054\013\055" +
    "\034\056\014\057\027\060\055\061\011\062\042\001\002" +
    "\000\012\037\uffb7\043\uffb7\044\uffb7\046\uffb7\001\002\000" +
    "\076\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\020\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\043\ufffd\044\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\001\002\000\066" +
    "\004\024\005\045\007\020\010\007\012\026\013\056\015" +
    "\054\020\006\033\016\034\060\035\041\036\037\040\010" +
    "\043\211\044\012\050\004\051\033\052\050\053\030\054" +
    "\013\055\034\056\014\057\027\060\055\061\011\062\042" +
    "\001\002\000\076\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\012\ufffe\013\ufffe\015\ufffe\020\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe\044" +
    "\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001" +
    "\002\000\070\002\001\004\001\005\001\007\001\010\001" +
    "\012\001\013\001\015\001\020\001\033\001\034\001\035" +
    "\001\036\001\040\001\043\001\044\001\050\001\051\001" +
    "\052\001\053\001\054\001\055\001\056\001\057\001\060" +
    "\001\061\001\062\001\001\002\000\066\004\024\005\045" +
    "\007\020\010\007\012\026\013\056\015\054\020\006\033" +
    "\016\034\060\035\041\036\037\040\010\042\205\044\012" +
    "\050\004\051\033\052\050\053\030\054\013\055\034\056" +
    "\014\057\027\060\055\061\011\062\042\001\002\000\012" +
    "\037\uffb8\043\uffb8\044\uffb8\046\uffb8\001\002\000\076\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\020\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\043\ufffb\044\ufffb\046\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\032\020\006" +
    "\033\016\035\041\036\066\040\010\053\030\055\065\056" +
    "\014\057\027\060\055\061\011\062\042\001\002\000\010" +
    "\017\073\020\071\037\220\001\002\000\066\004\024\005" +
    "\045\007\020\010\007\012\026\013\056\015\054\020\006" +
    "\033\016\034\060\035\041\036\037\040\010\042\205\044" +
    "\012\050\004\051\033\052\050\053\030\054\013\055\034" +
    "\056\014\057\027\060\055\061\011\062\042\001\002\000" +
    "\076\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\013\ufff7\015\ufff7\020\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\043\ufff7\044\ufff7\046\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\004" +
    "\037\223\001\002\000\042\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\037\uffd7\041\uffd7\044\uffd7\046\uffd7\001" +
    "\002\000\076\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\012\ufffa\013\ufffa\015\ufffa\020\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\043\ufffa\044\ufffa" +
    "\046\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002" +
    "\000\004\036\226\001\002\000\034\020\006\033\016\035" +
    "\041\036\066\037\227\040\010\053\030\055\065\056\014" +
    "\057\027\060\055\061\011\062\042\001\002\000\076\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\020\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\046\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000\006\037\231" +
    "\046\147\001\002\000\076\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\015\ufff2\020\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043" +
    "\ufff2\044\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\001\002\000\032\007\020\010\007\013\056\015\054" +
    "\036\161\050\004\051\033\052\050\054\013\055\034\056" +
    "\014\062\131\001\002\000\010\017\073\020\071\044\234" +
    "\001\002\000\076\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\012\ufff4\013\ufff4\015\ufff4\020\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\043\ufff4\044" +
    "\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001" +
    "\002\000\076\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\012\ufff6\013\ufff6\015\ufff6\020\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6" +
    "\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002" +
    "\000\032\020\006\033\016\035\041\036\066\040\010\053" +
    "\030\055\065\056\014\057\027\060\055\061\011\062\042" +
    "\001\002\000\010\017\073\020\071\037\240\001\002\000" +
    "\066\004\024\005\045\007\020\010\007\012\026\013\056" +
    "\015\054\020\006\033\016\034\060\035\041\036\037\040" +
    "\010\042\205\044\012\050\004\051\033\052\050\053\030" +
    "\054\013\055\034\056\014\057\027\060\055\061\011\062" +
    "\042\001\002\000\006\006\242\044\243\001\002\000\066" +
    "\004\024\005\045\007\020\010\007\012\026\013\056\015" +
    "\054\020\006\033\016\034\060\035\041\036\037\040\010" +
    "\042\205\044\012\050\004\051\033\052\050\053\030\054" +
    "\013\055\034\056\014\057\027\060\055\061\011\062\042" +
    "\001\002\000\076\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\015\ufff8\020\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\043\ufff8\044" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001" +
    "\002\000\076\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\012\ufff5\013\ufff5\015\ufff5\020\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5" +
    "\046\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\001\002" +
    "\000\004\062\201\001\002\000\004\036\247\001\002\000" +
    "\030\007\020\010\007\013\056\015\054\036\161\037\251" +
    "\050\004\051\033\052\050\054\013\055\163\001\002\000" +
    "\006\037\253\046\170\001\002\000\066\004\024\005\045" +
    "\007\020\010\007\012\026\013\056\015\054\020\006\033" +
    "\016\034\060\035\041\036\037\040\010\042\205\044\012" +
    "\050\004\051\033\052\050\053\030\054\013\055\034\056" +
    "\014\057\027\060\055\061\011\062\042\001\002\000\012" +
    "\037\uffb9\043\uffb9\044\uffb9\046\uffb9\001\002\000\066\004" +
    "\024\005\045\007\020\010\007\012\026\013\056\015\054" +
    "\020\006\033\016\034\060\035\041\036\037\040\010\042" +
    "\205\044\012\050\004\051\033\052\050\053\030\054\013" +
    "\055\034\056\014\057\027\060\055\061\011\062\042\001" +
    "\002\000\012\037\uffba\043\uffba\044\uffba\046\uffba\001\002" +
    "\000\004\002\000\001\002\000\042\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\037\uffcf\041\uffcf\044\uffcf\046" +
    "\uffcf\001\002\000\010\055\065\056\014\062\131\001\002" +
    "\000\010\037\261\040\132\047\133\001\002\000\050\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\037\uffae\040" +
    "\uffae\041\uffae\044\uffae\045\uffae\046\uffae\047\uffae\001\002" +
    "\000\016\037\uffc3\040\uffc3\043\uffc3\044\uffc3\046\uffc3\062" +
    "\uffc3\001\002\000\016\037\uffc1\040\uffc1\043\uffc1\044\uffc1" +
    "\046\uffc1\062\uffc1\001\002\000\016\037\uffc2\040\uffc2\043" +
    "\uffc2\044\uffc2\046\uffc2\062\uffc2\001\002\000\006\041\270" +
    "\046\267\001\002\000\012\017\073\020\071\041\uffef\046" +
    "\uffef\001\002\000\032\020\006\033\016\035\041\036\066" +
    "\040\010\053\030\055\065\056\014\057\027\060\055\061" +
    "\011\062\042\001\002\000\016\017\uffed\020\uffed\037\uffed" +
    "\041\uffed\044\uffed\046\uffed\001\002\000\012\017\073\020" +
    "\071\041\uffee\046\uffee\001\002\000\016\036\161\050\004" +
    "\051\033\052\050\054\013\055\163\001\002\000\012\037" +
    "\uffb5\043\uffb5\044\uffb5\046\uffb5\001\002\000\042\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\037\uffce\041\uffce" +
    "\044\uffce\046\uffce\001\002\000\016\037\uffc5\040\uffc5\043" +
    "\uffc5\044\uffc5\046\uffc5\062\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\052\002\030\003\052\004\035\005\051\006" +
    "\050\007\045\010\043\011\042\012\037\013\016\016\046" +
    "\020\014\021\034\022\031\023\022\024\021\025\020\027" +
    "\024\030\056\032\004\001\001\000\004\017\274\001\001" +
    "\000\002\001\001\000\010\012\273\020\014\030\062\001" +
    "\001\000\004\017\271\001\001\000\032\004\265\005\051" +
    "\006\050\007\045\010\043\011\042\012\037\020\014\021" +
    "\061\030\062\031\264\032\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\255\020\014\030\062" +
    "\001\001\000\050\002\211\003\052\004\035\005\051\006" +
    "\050\007\045\010\043\011\042\012\037\016\046\020\014" +
    "\021\034\022\031\023\022\024\021\025\020\027\024\030" +
    "\056\032\004\001\001\000\012\022\244\023\022\024\021" +
    "\025\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\232\005\051\006\050\007\045\010\043\011\042\012" +
    "\037\020\014\021\061\030\062\032\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\176\001\001\000\002\001\001\000\010\023\163\024\021" +
    "\025\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\067\005\051\006\050\007\045\010\043\011\042" +
    "\012\037\015\173\016\157\020\014\021\061\022\172\023" +
    "\022\024\021\025\020\026\066\030\062\032\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\177" +
    "\001\001\000\002\001\001\000\004\017\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\063\005\051" +
    "\006\050\007\045\010\043\011\042\012\037\020\014\021" +
    "\061\030\062\032\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\067\005\051\006\050\007\045\010\043\011\042\012\037" +
    "\020\014\021\061\026\066\030\062\032\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\122\006\050" +
    "\007\045\010\043\011\042\012\037\020\014\021\061\030" +
    "\062\001\001\000\002\001\001\000\024\005\074\006\050" +
    "\007\045\010\043\011\042\012\037\020\014\021\061\030" +
    "\062\001\001\000\030\004\121\005\051\006\050\007\045" +
    "\010\043\011\042\012\037\020\014\021\061\030\062\032" +
    "\004\001\001\000\002\001\001\000\022\006\120\007\045" +
    "\010\043\011\042\012\037\020\014\021\061\030\062\001" +
    "\001\000\022\006\117\007\045\010\043\011\042\012\037" +
    "\020\014\021\061\030\062\001\001\000\022\006\116\007" +
    "\045\010\043\011\042\012\037\020\014\021\061\030\062" +
    "\001\001\000\022\006\101\007\045\010\043\011\042\012" +
    "\037\020\014\021\061\030\062\001\001\000\002\001\001" +
    "\000\020\007\115\010\043\011\042\012\037\020\014\021" +
    "\061\030\062\001\001\000\020\007\104\010\043\011\042" +
    "\012\037\020\014\021\061\030\062\001\001\000\002\001" +
    "\001\000\016\010\114\011\042\012\037\020\014\021\061" +
    "\030\062\001\001\000\016\010\107\011\042\012\037\020" +
    "\014\021\061\030\062\001\001\000\002\001\001\000\014" +
    "\011\113\012\037\020\014\021\061\030\062\001\001\000" +
    "\014\011\112\012\037\020\014\021\061\030\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\124\005\051\006\050\007\045\010\043\011\042\012\037" +
    "\020\014\021\061\030\062\032\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\014\030\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\135\005" +
    "\051\006\050\007\045\010\043\011\042\012\037\020\014" +
    "\021\061\030\062\032\004\001\001\000\004\020\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\145\005\051\006\050\007\045" +
    "\010\043\011\042\012\037\020\014\021\061\026\144\030" +
    "\062\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\150\005\051\006\050\007" +
    "\045\010\043\011\042\012\037\020\014\021\061\030\062" +
    "\032\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\152\005\051\006\050\007\045\010\043\011\042" +
    "\012\037\020\014\021\061\030\062\032\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\161\016\157\022\031\023\022\024" +
    "\021\025\020\001\001\000\002\001\001\000\016\015\173" +
    "\016\157\022\172\023\022\024\021\025\020\001\001\000" +
    "\002\001\001\000\010\023\163\024\021\025\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\171\022\031\023\022\024\021" +
    "\025\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\202\016\157\022\031\023\022" +
    "\024\021\025\020\001\001\000\002\001\001\000\052\002" +
    "\206\003\052\004\035\005\051\006\050\007\045\010\043" +
    "\011\042\012\037\014\205\016\046\020\014\021\034\022" +
    "\031\023\022\024\021\025\020\027\024\030\056\032\004" +
    "\001\001\000\052\002\030\003\052\004\035\005\051\006" +
    "\050\007\045\010\043\011\042\012\037\013\207\016\046" +
    "\020\014\021\034\022\031\023\022\024\021\025\020\027" +
    "\024\030\056\032\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\211\003\052\004\035\005\051\006" +
    "\050\007\045\010\043\011\042\012\037\016\046\020\014" +
    "\021\034\022\031\023\022\024\021\025\020\027\024\030" +
    "\056\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\002\206\003\052\004\035\005\051\006\050\007" +
    "\045\010\043\011\042\012\037\014\213\016\046\020\014" +
    "\021\034\022\031\023\022\024\021\025\020\027\024\030" +
    "\056\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\216\005\051\006\050\007\045\010\043\011" +
    "\042\012\037\020\014\021\061\030\062\032\004\001\001" +
    "\000\002\001\001\000\052\002\206\003\052\004\035\005" +
    "\051\006\050\007\045\010\043\011\042\012\037\014\220" +
    "\016\046\020\014\021\034\022\031\023\022\024\021\025" +
    "\020\027\024\030\056\032\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\145\005\051\006\050\007\045" +
    "\010\043\011\042\012\037\020\014\021\061\026\227\030" +
    "\062\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\173\016\157\020\014\022" +
    "\172\023\022\024\021\025\020\030\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\236\005\051\006\050\007\045\010\043\011\042\012\037" +
    "\020\014\021\061\030\062\032\004\001\001\000\002\001" +
    "\001\000\052\002\206\003\052\004\035\005\051\006\050" +
    "\007\045\010\043\011\042\012\037\014\240\016\046\020" +
    "\014\021\034\022\031\023\022\024\021\025\020\027\024" +
    "\030\056\032\004\001\001\000\002\001\001\000\052\002" +
    "\206\003\052\004\035\005\051\006\050\007\045\010\043" +
    "\011\042\012\037\014\243\016\046\020\014\021\034\022" +
    "\031\023\022\024\021\025\020\027\024\030\056\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\245\001\001\000\002\001\001\000\016\015\247\016\157" +
    "\022\031\023\022\024\021\025\020\001\001\000\002\001" +
    "\001\000\052\002\206\003\052\004\035\005\051\006\050" +
    "\007\045\010\043\011\042\012\037\014\251\016\046\020" +
    "\014\021\034\022\031\023\022\024\021\025\020\027\024" +
    "\030\056\032\004\001\001\000\002\001\001\000\052\002" +
    "\206\003\052\004\035\005\051\006\050\007\045\010\043" +
    "\011\042\012\037\014\253\016\046\020\014\021\034\022" +
    "\031\023\022\024\021\025\020\027\024\030\056\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\014\030\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\270\005\051\006\050\007\045\010\043\011\042\012" +
    "\037\020\014\021\061\030\062\032\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\272\023\022\024" +
    "\021\025\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bloque out = new Bloque(l1);
      out.setLine(l1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Blin ::= LAP Bl LCIERRE 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Blin",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Blin ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bloque out = new Bloque(l1);
      out.setLine(l1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Blin",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= Decl PUNTOCOMA 
            {
              Statement RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Linea ::= PUNTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= IF PAP Exp PCIERRE Blin PUNTOCOMA 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      InsBin out = new InsBin(KindI.IF,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instr ::= WHILE PAP Exp PCIERRE Blin 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      InsBin out = new InsBin(KindI.WHILE,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= IF PAP Exp PCIERRE Blin ELSE Blin 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      InsBin out = new InsBin(KindI.IFELSE,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 Return out = new Return(e1);
      out.setLine(e1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instr ::= PRINT PAP Exp PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 Print out = new Print(e1);
      out.setLine(e1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instr ::= IdFun EXEC PAP StructInitOrden PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 FunctCall out = new FunctCall(id1,args);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instr ::= IdFun EXEC PAP PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 FunctCall out = new FunctCall(id1,null);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asign ::= Des IGUAL Exp 
            {
              InsBin RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(d1); array.add(e2);
      InsBin out = new InsBin(KindI.ASIG,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListaExp ::= Exp 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList <E> ret = new ArrayList <E> ();
      ret.add(e);
      RESULT = ret; 
   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaExp",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListaExp ::= ListaExp COMA Exp 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> le = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 le.add(e);
      RESULT = le;
   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaExp",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArrayAnonimo ::= CAP ListaExp CCIERRE 
            {
              TListIns RESULT =null;
		ArrayList<E> le = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TListIns(le); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ArrayAnonimo",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.SUMA,aDeexp1,aDeterm);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.RESTA,aDeexp1,aDeterm);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= ArrayAnonimo 
            {
              E RESULT =null;
		TListIns a = (TListIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = a; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op0 ::= Op0 MAYOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MAY,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op0 ::= Op0 MENOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MEN,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op0 ::= Op0 OPIGUAL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.EQ,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op0 ::= Op0 DIST Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.NEQ,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op1 ::= Op1 MUL Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MUL,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op1 ::= Op1 DIV Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.DIV,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op2 ::= Op2 POT Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.POT,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op2 ::= Op2 MOD Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MOD,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op3 ::= Op3 AND Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.AND,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op3 ::= Op3 OR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.OR,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Op4 ::= IdFun CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 FunctCall out = new FunctCall(id1,args);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Op4 ::= IdFun CALL PAP PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 FunctCall out = new FunctCall(id1,null);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Op4 ::= READ PAP PCIERRE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 Read out = new Read();
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Int out = new Int(intValue.lexema);
      out.setLine(intValue.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Op5 ::= TRUE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bool out = new Bool("true");
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Op5 ::= FALSE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bool out = new Bool("false");
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Op5 ::= Des 
            {
              E RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MEM, d1, null);
      out.setLine(d1.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Op5 ::= NULL 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Null out = new Null();
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Op5 ::= NOT Op5 
            {
              E RESULT =null;
		E arg = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out =  new EBin(KindE.NOT, arg, null);
      out.setLine(arg.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Op5 ::= RESTA Op5 
            {
              E RESULT =null;
		E arg = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out =  new EBin(KindE.RESTA, new Int("0"), arg);
      out.setLine(arg.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo ::= PUNTERO Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TPointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo ::= Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo2 ::= Tipo2 CAP INT CCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo2 ::= Tipo3 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo3 ::= TIPOINT 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.INT, RefMode.VALUE);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo3 ::= TIPOBOOL 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.BOOL, RefMode.VALUE);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo3 ::= DOSPUNTOS IdType 
            {
              T RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TComp out = new TComp(id, RefMode.VALUE);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo3 ::= PAP StructBodyDef PCIERRE 
            {
              T RESULT =null;
		TStruct args1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo3 ::= REF TIPOINT 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.INT, RefMode.REF);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo3 ::= REF TIPOBOOL 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.BOOL, RefMode.REF);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo3 ::= REF IdType 
            {
              T RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TComp out = new TComp(id, RefMode.REF);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo3 ::= Tipo4 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo4 ::= PAP Tipo PCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IdVar ::= IDEN 
            {
              IdenVar RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenVar res = new IdenVar(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdVar",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IdType ::= IDEN 
            {
              IdenType RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenType res = new IdenType(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdType",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IdFun ::= IDEN 
            {
              IdenFun RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenFun res = new IdenFun(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdFun",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Decl ::= Tipo IdVar 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecVar out = new DecVar(t1, id1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Decl ::= FUN Tipo IdFun PAP StructBodyDef PCIERRE Blin 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(t1, id1, st1, b1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Decl ::= FUN Tipo IdFun PAP PCIERRE Blin 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(t1, id1, null, b1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Decl ::= PROC IdFun PAP StructBodyDef PCIERRE Blin 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(null, id1, st1, b1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Decl ::= PROC IdFun PAP PCIERRE Blin 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(null, id1, null, b1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Decl ::= STRUCT IdType LLEVA LAP StructBodyDef LCIERRE 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DecStruct out = new DecStruct(id1, st1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Decl ::= TIPEDEF IdType Tipo 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecTipo out = new DecTipo(id1,t1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StructBodyDef ::= StructBodyDef COMA Decl 
            {
              TStruct RESULT =null;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StructBodyDef ::= Decl 
            {
              TStruct RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TStruct out = new TStruct(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Des ::= IdVar 
            {
              Desig RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DesigVar out = new DesigVar(id1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Des ::= Des CAP Exp CCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DesigPosArray out = new DesigPosArray(d1,e1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Des ::= Des PUNTO IdVar 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DesigCampo out = new DesigCampo(d1,id1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Des ::= PUNTERO PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DesigRef out = new DesigRef(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Des ::= VALPTR PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 GetPointerVal out = new GetPointerVal(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

