
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon May 08 01:41:25 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import alex.AnalizadorLexicoExp;
import ast.Declaraciones.*;
import ast.Designadores.*;
import ast.Expresiones.*;
import ast.Instrucciones.*;
import ast.Tipos.*;
import ast.Enumeradores.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon May 08 01:41:25 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\013\010\000\002\013\007\000\002\014\005" +
    "\000\002\014\003\000\002\002\003\000\002\002\004\000" +
    "\002\002\004\000\002\002\003\000\002\003\010\000\002" +
    "\003\007\000\002\003\004\000\002\003\011\000\002\003" +
    "\005\000\002\003\007\000\002\003\007\000\002\003\006" +
    "\000\002\027\005\000\002\031\003\000\002\031\005\000" +
    "\002\032\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\004\007\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\003\000\002\011\004\000\002\011\007\000\002\011\006" +
    "\000\002\011\005\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\026\005\000\002\026\003\000\002\022\004" +
    "\000\002\022\003\000\002\023\006\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\005\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\003\000\002\025\005\000\002\020\003" +
    "\000\002\017\003\000\002\021\003\000\002\016\004\000" +
    "\002\016\011\000\002\016\010\000\002\016\010\000\002" +
    "\016\007\000\002\016\010\000\002\016\005\000\002\015" +
    "\005\000\002\015\003\000\002\030\003\000\002\030\006" +
    "\000\002\030\005\000\002\030\006\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\066\004\024\005\046\007\020\010\007\012" +
    "\026\013\057\015\055\020\006\033\016\034\061\035\042" +
    "\036\030\037\040\041\010\045\012\051\004\052\034\053" +
    "\052\054\031\055\013\056\035\057\014\060\027\061\056" +
    "\062\011\063\044\001\002\000\004\063\156\001\002\000" +
    "\016\017\uffe6\020\uffe6\040\uffe6\042\uffe6\045\uffe6\047\uffe6" +
    "\001\002\000\026\020\006\033\016\037\075\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\132\001\002" +
    "\000\004\063\156\001\002\000\034\020\006\033\016\035" +
    "\042\036\030\037\067\041\010\054\031\056\066\057\014" +
    "\060\027\061\056\062\011\063\044\001\002\000\042\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\040\uffd2\042" +
    "\uffd2\045\uffd2\047\uffd2\001\002\000\100\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\020\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\001\002\000\010\052\276\053" +
    "\300\063\156\001\002\000\004\037\273\001\002\000\050" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001" +
    "\002\000\026\020\006\033\016\037\075\054\031\056\066" +
    "\057\014\060\027\061\056\062\011\063\132\001\002\000" +
    "\070\002\271\004\024\005\046\007\020\010\007\012\026" +
    "\013\057\015\055\020\006\033\016\034\061\035\042\036" +
    "\030\037\040\041\010\045\012\051\004\052\034\053\052" +
    "\054\031\055\013\056\035\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\016\037\163\051\004\052\034" +
    "\053\052\055\013\056\165\001\002\000\050\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\063\uffbd\001\002\000\050" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\045\uffc5\047\uffc5\063\uffc5\001" +
    "\002\000\050\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\040\uffc7\041\167\042\uffc7\044\uffc7\045\uffc7\047\uffc7" +
    "\063\uffc7\001\002\000\004\037\252\001\002\000\004\045" +
    "\251\001\002\000\034\020\006\033\016\035\042\036\030" +
    "\037\067\041\010\054\031\056\066\057\014\060\027\061" +
    "\056\062\011\063\044\001\002\000\042\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\040\uffd1\042\uffd1\045\uffd1" +
    "\047\uffd1\001\002\000\016\037\163\051\004\052\034\053" +
    "\052\055\013\056\165\001\002\000\042\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\040\uffcd\042\uffcd\045\uffcd" +
    "\047\uffcd\001\002\000\072\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\010\uffff\012\uffff\013\uffff\015\uffff\020\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\041\uffff\044\uffff\045" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\001\002\000" +
    "\004\063\132\001\002\000\050\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\063\uffc4\001\002\000\014\037\241\051" +
    "\004\052\034\053\052\055\013\001\002\000\006\011\143" +
    "\016\234\001\002\000\010\017\074\020\072\045\233\001" +
    "\002\000\054\007\020\010\007\013\057\015\055\020\006" +
    "\033\016\035\042\036\030\037\040\041\010\051\004\052" +
    "\034\053\052\054\031\055\013\056\035\057\014\060\027" +
    "\061\056\062\011\063\044\001\002\000\042\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\040\uffd3\042\uffd3\045" +
    "\uffd3\047\uffd3\001\002\000\004\037\231\001\002\000\042" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\040\uffd8" +
    "\042\uffd8\045\uffd8\047\uffd8\001\002\000\054\011\uffb9\016" +
    "\uffb9\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\001\002\000\042\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\112\026\113\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\040\uffdb\042\uffdb\045\uffdb\047\uffdb\001\002\000" +
    "\004\037\225\001\002\000\004\045\224\001\002\000\036" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\107\024\110\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\040\uffde\042\uffde\045\uffde" +
    "\047\uffde\001\002\000\032\017\uffe1\020\uffe1\021\104\022" +
    "\105\027\uffe1\030\uffe1\031\uffe1\032\uffe1\040\uffe1\042\uffe1" +
    "\045\uffe1\047\uffe1\001\002\000\050\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\040\uffc3\041\uffc3\042\uffc3\044" +
    "\uffc3\045\uffc3\047\uffc3\063\uffc3\001\002\000\026\017\uffe8" +
    "\020\uffe8\027\102\030\101\031\100\032\077\040\uffe8\042" +
    "\uffe8\045\uffe8\047\uffe8\001\002\000\100\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\020\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\044\ufffa\045\ufffa\047\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\001\002\000\004\063\203\001" +
    "\002\000\042\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\040\uffd0\042\uffd0\045\uffd0\047\uffd0\001\002\000\004" +
    "\063\156\001\002\000\042\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\041\133\045\uffcf\046\153\050\134\001" +
    "\002\000\004\037\062\001\002\000\034\020\006\033\016" +
    "\035\042\036\030\037\067\041\010\054\031\056\066\057" +
    "\014\060\027\061\056\062\011\063\044\001\002\000\004" +
    "\011\143\001\002\000\046\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\040\uffcf\041\133\042\uffcf\045\uffcf\047" +
    "\uffcf\050\134\001\002\000\010\017\074\020\072\040\141" +
    "\001\002\000\004\037\130\001\002\000\034\020\006\033" +
    "\016\035\042\036\030\037\067\041\010\054\031\056\066" +
    "\057\014\060\027\061\056\062\011\063\044\001\002\000" +
    "\004\047\125\001\002\000\012\017\074\020\072\040\073" +
    "\047\uffc9\001\002\000\032\020\006\033\016\035\042\036" +
    "\030\037\075\054\031\056\066\057\014\060\027\061\056" +
    "\062\011\063\044\001\002\000\042\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\040\uffce\042\uffce\045\uffce\047" +
    "\uffce\001\002\000\032\020\006\033\016\035\042\036\030" +
    "\037\075\054\031\056\066\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\034\020\006\033\016\035\042" +
    "\036\030\037\067\041\010\054\031\056\066\057\014\060" +
    "\027\061\056\062\011\063\044\001\002\000\026\017\uffea" +
    "\020\uffea\027\102\030\101\031\100\032\077\040\uffea\042" +
    "\uffea\045\uffea\047\uffea\001\002\000\032\020\006\033\016" +
    "\035\042\036\030\037\075\054\031\056\066\057\014\060" +
    "\027\061\056\062\011\063\044\001\002\000\032\020\006" +
    "\033\016\035\042\036\030\037\075\054\031\056\066\057" +
    "\014\060\027\061\056\062\011\063\044\001\002\000\032" +
    "\020\006\033\016\035\042\036\030\037\075\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\044\001\002" +
    "\000\032\020\006\033\016\035\042\036\030\037\075\054" +
    "\031\056\066\057\014\060\027\061\056\062\011\063\044" +
    "\001\002\000\032\017\uffe5\020\uffe5\021\104\022\105\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\040\uffe5\042\uffe5\045\uffe5" +
    "\047\uffe5\001\002\000\032\020\006\033\016\035\042\036" +
    "\030\037\075\054\031\056\066\057\014\060\027\061\056" +
    "\062\011\063\044\001\002\000\032\020\006\033\016\035" +
    "\042\036\030\037\075\054\031\056\066\057\014\060\027" +
    "\061\056\062\011\063\044\001\002\000\036\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\107\024\110\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\040\uffdf\042\uffdf\045\uffdf\047\uffdf\001" +
    "\002\000\032\020\006\033\016\035\042\036\030\037\075" +
    "\054\031\056\066\057\014\060\027\061\056\062\011\063" +
    "\044\001\002\000\032\020\006\033\016\035\042\036\030" +
    "\037\075\054\031\056\066\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\042\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\112\026\113\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\040\uffdd\042\uffdd\045\uffdd\047\uffdd" +
    "\001\002\000\032\020\006\033\016\035\042\036\030\037" +
    "\075\054\031\056\066\057\014\060\027\061\056\062\011" +
    "\063\044\001\002\000\032\020\006\033\016\035\042\036" +
    "\030\037\075\054\031\056\066\057\014\060\027\061\056" +
    "\062\011\063\044\001\002\000\042\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\040\uffd9\042\uffd9\045\uffd9\047" +
    "\uffd9\001\002\000\042\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\040\uffda\042\uffda\045\uffda\047\uffda\001\002" +
    "\000\042\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\112\026\113\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\040\uffdc\042\uffdc\045\uffdc\047\uffdc\001\002\000\036\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\107\024\110\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\040\uffe0\042\uffe0\045\uffe0\047" +
    "\uffe0\001\002\000\032\017\uffe4\020\uffe4\021\104\022\105" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\040\uffe4\042\uffe4\045" +
    "\uffe4\047\uffe4\001\002\000\032\017\uffe3\020\uffe3\021\104" +
    "\022\105\027\uffe3\030\uffe3\031\uffe3\032\uffe3\040\uffe3\042" +
    "\uffe3\045\uffe3\047\uffe3\001\002\000\032\017\uffe2\020\uffe2" +
    "\021\104\022\105\027\uffe2\030\uffe2\031\uffe2\032\uffe2\040" +
    "\uffe2\042\uffe2\045\uffe2\047\uffe2\001\002\000\010\017\074" +
    "\020\072\040\073\001\002\000\026\017\uffe9\020\uffe9\027" +
    "\102\030\101\031\100\032\077\040\uffe9\042\uffe9\045\uffe9" +
    "\047\uffe9\001\002\000\034\020\006\033\016\035\042\036" +
    "\030\037\067\041\010\054\031\056\066\057\014\060\027" +
    "\061\056\062\011\063\044\001\002\000\012\017\074\020" +
    "\072\040\127\047\uffca\001\002\000\016\017\uffe7\020\uffe7" +
    "\040\uffe7\042\uffe7\045\uffe7\047\uffe7\001\002\000\010\056" +
    "\066\057\014\063\132\001\002\000\010\040\135\041\133" +
    "\050\134\001\002\000\052\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\040\uffbb\041\uffbb\042\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\001\002\000\034\020\006" +
    "\033\016\035\042\036\030\037\067\041\010\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\044\001\002" +
    "\000\004\063\132\001\002\000\050\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\040\uffac\041\uffac\042\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\001\002\000\050\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\040\uffad\041\uffad" +
    "\042\uffad\045\uffad\046\uffad\047\uffad\050\uffad\001\002\000" +
    "\010\017\074\020\072\042\140\001\002\000\050\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\040\uffae\041\uffae" +
    "\042\uffae\045\uffae\046\uffae\047\uffae\050\uffae\001\002\000" +
    "\004\045\142\001\002\000\100\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\020" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\044\ufff1\045\ufff1\047\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\001\002\000\004\037\144\001\002\000" +
    "\036\020\006\033\016\035\042\036\030\037\067\040\145" +
    "\041\010\054\031\056\066\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\042\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\040\uffd5\042\uffd5\045\uffd5\047\uffd5" +
    "\001\002\000\006\040\151\047\150\001\002\000\012\017" +
    "\074\020\072\040\uffc9\047\uffc9\001\002\000\034\020\006" +
    "\033\016\035\042\036\030\037\067\041\010\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\044\001\002" +
    "\000\042\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\040\uffd6\042\uffd6\045\uffd6\047\uffd6\001\002\000\012\017" +
    "\074\020\072\040\uffca\047\uffca\001\002\000\034\020\006" +
    "\033\016\035\042\036\030\037\067\041\010\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\044\001\002" +
    "\000\010\017\074\020\072\045\uffee\001\002\000\004\014" +
    "\157\001\002\000\066\014\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\044\uffba\045\uffba\047\uffba\051\uffba\052\uffba\053\uffba\055" +
    "\uffba\056\uffba\063\uffba\001\002\000\004\043\160\001\002" +
    "\000\026\007\020\010\007\013\057\015\055\037\163\051" +
    "\004\052\034\053\052\055\013\056\165\001\002\000\010" +
    "\040\uffb0\044\uffb0\047\uffb0\001\002\000\004\063\132\001" +
    "\002\000\026\007\020\010\007\013\057\015\055\037\163" +
    "\051\004\052\034\053\052\055\013\056\165\001\002\000" +
    "\006\044\173\047\172\001\002\000\014\037\163\051\004" +
    "\052\034\053\052\055\013\001\002\000\050\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\040\uffc8\041\167\042" +
    "\uffc8\044\uffc8\045\uffc8\047\uffc8\063\uffc8\001\002\000\004" +
    "\062\170\001\002\000\004\042\171\001\002\000\050\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\063\uffc6\001\002" +
    "\000\026\007\020\010\007\013\057\015\055\037\163\051" +
    "\004\052\034\053\052\055\013\056\165\001\002\000\012" +
    "\040\uffb3\044\uffb3\045\uffb3\047\uffb3\001\002\000\010\040" +
    "\uffb1\044\uffb1\047\uffb1\001\002\000\006\040\200\063\132" +
    "\001\002\000\006\040\177\047\172\001\002\000\050\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\044\uffc1\045\uffc1\047\uffc1\063\uffc1\001\002" +
    "\000\050\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\047\uffbc\063" +
    "\uffbc\001\002\000\012\040\uffb8\044\uffb8\045\uffb8\047\uffb8" +
    "\001\002\000\004\037\204\001\002\000\004\037\uffb9\001" +
    "\002\000\030\007\020\010\007\013\057\015\055\037\163" +
    "\040\206\051\004\052\034\053\052\055\013\056\165\001" +
    "\002\000\006\040\222\047\172\001\002\000\070\004\024" +
    "\005\046\007\020\010\007\012\026\013\057\015\055\020" +
    "\006\033\016\034\061\035\042\036\030\037\040\041\010" +
    "\043\207\045\012\051\004\052\034\053\052\054\031\055" +
    "\013\056\035\057\014\060\027\061\056\062\011\063\044" +
    "\001\002\000\066\004\024\005\046\007\020\010\007\012" +
    "\026\013\057\015\055\020\006\033\016\034\061\035\042" +
    "\036\030\037\040\041\010\045\012\051\004\052\034\053" +
    "\052\054\031\055\013\056\035\057\014\060\027\061\056" +
    "\062\011\063\044\001\002\000\012\040\uffb4\044\uffb4\045" +
    "\uffb4\047\uffb4\001\002\000\100\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\015\ufffb\020" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\044\ufffb\045\ufffb\047\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\001\002\000\070\004\024\005\046\007" +
    "\020\010\007\012\026\013\057\015\055\020\006\033\016" +
    "\034\061\035\042\036\030\037\040\041\010\044\213\045" +
    "\012\051\004\052\034\053\052\054\031\055\013\056\035" +
    "\057\014\060\027\061\056\062\011\063\044\001\002\000" +
    "\100\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\012\ufffc\013\ufffc\015\ufffc\020\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\044\ufffc\045\ufffc" +
    "\047\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002" +
    "\000\072\002\001\004\001\005\001\007\001\010\001\012" +
    "\001\013\001\015\001\020\001\033\001\034\001\035\001" +
    "\036\001\037\001\041\001\044\001\045\001\051\001\052" +
    "\001\053\001\054\001\055\001\056\001\057\001\060\001" +
    "\061\001\062\001\063\001\001\002\000\004\063\132\001" +
    "\002\000\006\045\uffb8\046\217\001\002\000\034\020\006" +
    "\033\016\035\042\036\030\037\067\041\010\054\031\056" +
    "\066\057\014\060\027\061\056\062\011\063\044\001\002" +
    "\000\010\017\074\020\072\045\221\001\002\000\072\002" +
    "\ufffe\004\ufffe\005\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe" +
    "\015\ufffe\020\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\041\ufffe\044\ufffe\045\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\070\004\024\005\046\007\020" +
    "\010\007\012\026\013\057\015\055\020\006\033\016\034" +
    "\061\035\042\036\030\037\040\041\010\043\207\045\012" +
    "\051\004\052\034\053\052\054\031\055\013\056\035\057" +
    "\014\060\027\061\056\062\011\063\044\001\002\000\012" +
    "\040\uffb5\044\uffb5\045\uffb5\047\uffb5\001\002\000\100\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9" +
    "\013\ufff9\015\ufff9\020\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000\034" +
    "\020\006\033\016\035\042\036\030\037\067\041\010\054" +
    "\031\056\066\057\014\060\027\061\056\062\011\063\044" +
    "\001\002\000\010\017\074\020\072\040\227\001\002\000" +
    "\070\004\024\005\046\007\020\010\007\012\026\013\057" +
    "\015\055\020\006\033\016\034\061\035\042\036\030\037" +
    "\040\041\010\043\207\045\012\051\004\052\034\053\052" +
    "\054\031\055\013\056\035\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\100\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\015\ufff5\020" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\044\ufff5\045\ufff5\047\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\001\002\000\004\040\232\001\002\000" +
    "\042\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\040" +
    "\uffd4\042\uffd4\045\uffd4\047\uffd4\001\002\000\100\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013" +
    "\ufff8\015\ufff8\020\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\004\037" +
    "\235\001\002\000\036\020\006\033\016\035\042\036\030" +
    "\037\067\040\236\041\010\054\031\056\066\057\014\060" +
    "\027\061\056\062\011\063\044\001\002\000\100\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\013" +
    "\uffef\015\uffef\020\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\044\uffef\045\uffef\047\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\001\002\000\006\040" +
    "\240\047\150\001\002\000\100\002\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\015\ufff0\020" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\044\ufff0\045\ufff0\047\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\001\002\000\032\007\020\010\007\013" +
    "\057\015\055\037\163\051\004\052\034\053\052\055\013" +
    "\056\035\057\014\063\132\001\002\000\006\045\uffb8\046" +
    "\243\001\002\000\034\020\006\033\016\035\042\036\030" +
    "\037\067\041\010\054\031\056\066\057\014\060\027\061" +
    "\056\062\011\063\044\001\002\000\010\017\074\020\072" +
    "\045\245\001\002\000\072\002\ufffd\004\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\012\ufffd\013\ufffd\015\ufffd\020\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000" +
    "\042\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\040" +
    "\uffd7\042\uffd7\045\uffd7\047\uffd7\001\002\000\010\017\074" +
    "\020\072\045\250\001\002\000\100\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\020\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\001\002\000\100\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\015" +
    "\ufff4\020\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\001\002\000\034\020\006\033" +
    "\016\035\042\036\030\037\067\041\010\054\031\056\066" +
    "\057\014\060\027\061\056\062\011\063\044\001\002\000" +
    "\010\017\074\020\072\040\254\001\002\000\070\004\024" +
    "\005\046\007\020\010\007\012\026\013\057\015\055\020" +
    "\006\033\016\034\061\035\042\036\030\037\040\041\010" +
    "\043\207\045\012\051\004\052\034\053\052\054\031\055" +
    "\013\056\035\057\014\060\027\061\056\062\011\063\044" +
    "\001\002\000\006\006\256\045\257\001\002\000\070\004" +
    "\024\005\046\007\020\010\007\012\026\013\057\015\055" +
    "\020\006\033\016\034\061\035\042\036\030\037\040\041" +
    "\010\043\207\045\012\051\004\052\034\053\052\054\031" +
    "\055\013\056\035\057\014\060\027\061\056\062\011\063" +
    "\044\001\002\000\100\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\015\ufff6\020\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\001\002\000\100\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\015\ufff3\020\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\044\ufff3\045\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\001\002\000\004\063\203\001\002\000\004" +
    "\037\263\001\002\000\030\007\020\010\007\013\057\015" +
    "\055\037\163\040\265\051\004\052\034\053\052\055\013" +
    "\056\165\001\002\000\006\040\267\047\172\001\002\000" +
    "\070\004\024\005\046\007\020\010\007\012\026\013\057" +
    "\015\055\020\006\033\016\034\061\035\042\036\030\037" +
    "\040\041\010\043\207\045\012\051\004\052\034\053\052" +
    "\054\031\055\013\056\035\057\014\060\027\061\056\062" +
    "\011\063\044\001\002\000\012\040\uffb6\044\uffb6\045\uffb6" +
    "\047\uffb6\001\002\000\070\004\024\005\046\007\020\010" +
    "\007\012\026\013\057\015\055\020\006\033\016\034\061" +
    "\035\042\036\030\037\040\041\010\043\207\045\012\051" +
    "\004\052\034\053\052\054\031\055\013\056\035\057\014" +
    "\060\027\061\056\062\011\063\044\001\002\000\012\040" +
    "\uffb7\044\uffb7\045\uffb7\047\uffb7\001\002\000\004\002\000" +
    "\001\002\000\042\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\040\uffcc\042\uffcc\045\uffcc\047\uffcc\001\002\000" +
    "\010\056\066\057\014\063\132\001\002\000\010\040\275" +
    "\041\133\050\134\001\002\000\050\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\040\uffab\041\uffab\042\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\001\002\000\050\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\044\uffc0\045\uffc0\047\uffc0\063\uffc0\001\002\000" +
    "\050\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\047\uffbe\063\uffbe" +
    "\001\002\000\050\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\063\uffbf\001\002\000\006\042\304\047\303\001\002" +
    "\000\012\017\074\020\072\042\uffed\047\uffed\001\002\000" +
    "\034\020\006\033\016\035\042\036\030\037\067\041\010" +
    "\054\031\056\066\057\014\060\027\061\056\062\011\063" +
    "\044\001\002\000\016\017\uffeb\020\uffeb\040\uffeb\042\uffeb" +
    "\045\uffeb\047\uffeb\001\002\000\012\017\074\020\072\042" +
    "\uffec\047\uffec\001\002\000\016\037\163\051\004\052\034" +
    "\053\052\055\013\056\165\001\002\000\012\040\uffb2\044" +
    "\uffb2\045\uffb2\047\uffb2\001\002\000\042\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\040\uffcb\042\uffcb\045\uffcb" +
    "\047\uffcb\001\002\000\050\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045" +
    "\uffc2\047\uffc2\063\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\052\002\031\003\053\004\036\005\052\006" +
    "\050\007\047\010\044\011\042\012\040\013\016\016\046" +
    "\020\014\021\035\022\032\023\022\024\021\025\020\027" +
    "\024\030\057\032\004\001\001\000\004\017\310\001\001" +
    "\000\002\001\001\000\010\012\307\020\014\030\063\001" +
    "\001\000\004\017\305\001\001\000\032\004\301\005\052" +
    "\006\050\007\047\010\044\011\042\012\040\020\014\021" +
    "\062\030\063\031\300\032\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\271\020\014\030\063" +
    "\001\001\000\050\002\213\003\053\004\036\005\052\006" +
    "\050\007\047\010\044\011\042\012\040\016\046\020\014" +
    "\021\035\022\214\023\022\024\021\025\020\027\024\030" +
    "\057\032\004\001\001\000\012\022\260\023\022\024\021" +
    "\025\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\246\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\020\014\021\062\030\063\032\004\001\001\000\002" +
    "\001\001\000\012\022\245\023\022\024\021\025\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\241" +
    "\001\001\000\002\001\001\000\010\023\165\024\021\025" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\004\070\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\015\175\016\160\020\014\021\062\022\174\023\022" +
    "\024\021\025\020\026\067\030\063\032\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\201\001" +
    "\001\000\002\001\001\000\004\017\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\064\005\052\006" +
    "\050\007\047\010\044\011\042\012\040\020\014\021\062" +
    "\030\063\032\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\070" +
    "\005\052\006\050\007\047\010\044\011\042\012\040\020" +
    "\014\021\062\026\067\030\063\032\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\123\006\050\007" +
    "\047\010\044\011\042\012\040\020\014\021\062\030\063" +
    "\001\001\000\002\001\001\000\024\005\075\006\050\007" +
    "\047\010\044\011\042\012\040\020\014\021\062\030\063" +
    "\001\001\000\030\004\122\005\052\006\050\007\047\010" +
    "\044\011\042\012\040\020\014\021\062\030\063\032\004" +
    "\001\001\000\002\001\001\000\022\006\121\007\047\010" +
    "\044\011\042\012\040\020\014\021\062\030\063\001\001" +
    "\000\022\006\120\007\047\010\044\011\042\012\040\020" +
    "\014\021\062\030\063\001\001\000\022\006\117\007\047" +
    "\010\044\011\042\012\040\020\014\021\062\030\063\001" +
    "\001\000\022\006\102\007\047\010\044\011\042\012\040" +
    "\020\014\021\062\030\063\001\001\000\002\001\001\000" +
    "\020\007\116\010\044\011\042\012\040\020\014\021\062" +
    "\030\063\001\001\000\020\007\105\010\044\011\042\012" +
    "\040\020\014\021\062\030\063\001\001\000\002\001\001" +
    "\000\016\010\115\011\042\012\040\020\014\021\062\030" +
    "\063\001\001\000\016\010\110\011\042\012\040\020\014" +
    "\021\062\030\063\001\001\000\002\001\001\000\014\011" +
    "\114\012\040\020\014\021\062\030\063\001\001\000\014" +
    "\011\113\012\040\020\014\021\062\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\125" +
    "\005\052\006\050\007\047\010\044\011\042\012\040\020" +
    "\014\021\062\030\063\032\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\014\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\136\005\052" +
    "\006\050\007\047\010\044\011\042\012\040\020\014\021" +
    "\062\030\063\032\004\001\001\000\004\020\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\146\005\052\006\050\007\047\010" +
    "\044\011\042\012\040\020\014\021\062\026\145\030\063" +
    "\032\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\151\005\052\006\050\007\047" +
    "\010\044\011\042\012\040\020\014\021\062\030\063\032" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\153\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\020\014\021\062\030\063\032\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\163\016\160\022\161\023\022\024\021" +
    "\025\020\001\001\000\002\001\001\000\004\020\200\001" +
    "\001\000\016\015\175\016\160\022\174\023\022\024\021" +
    "\025\020\001\001\000\002\001\001\000\010\023\165\024" +
    "\021\025\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\173\022" +
    "\161\023\022\024\021\025\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\204\016" +
    "\160\022\161\023\022\024\021\025\020\001\001\000\002" +
    "\001\001\000\052\002\210\003\053\004\036\005\052\006" +
    "\050\007\047\010\044\011\042\012\040\014\207\016\046" +
    "\020\014\021\035\022\161\023\022\024\021\025\020\027" +
    "\024\030\057\032\004\001\001\000\052\002\031\003\053" +
    "\004\036\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\013\211\016\046\020\014\021\035\022\032\023\022" +
    "\024\021\025\020\027\024\030\057\032\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\213\003\053" +
    "\004\036\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\016\046\020\014\021\035\022\214\023\022\024\021" +
    "\025\020\027\024\030\057\032\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\215\001\001\000\002" +
    "\001\001\000\030\004\217\005\052\006\050\007\047\010" +
    "\044\011\042\012\040\020\014\021\062\030\063\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\210\003\053\004\036\005\052\006\050\007\047\010\044" +
    "\011\042\012\040\014\222\016\046\020\014\021\035\022" +
    "\161\023\022\024\021\025\020\027\024\030\057\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\225\005\052\006\050\007\047\010\044\011\042\012\040" +
    "\020\014\021\062\030\063\032\004\001\001\000\002\001" +
    "\001\000\052\002\210\003\053\004\036\005\052\006\050" +
    "\007\047\010\044\011\042\012\040\014\227\016\046\020" +
    "\014\021\035\022\161\023\022\024\021\025\020\027\024" +
    "\030\057\032\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\146\005\052\006\050\007\047\010\044\011" +
    "\042\012\040\020\014\021\062\026\236\030\063\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\175\016\160\020\014\022\174\023\022" +
    "\024\021\025\020\030\130\001\001\000\002\001\001\000" +
    "\030\004\243\005\052\006\050\007\047\010\044\011\042" +
    "\012\040\020\014\021\062\030\063\032\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\252\005\052\006\050\007\047\010\044\011\042\012\040" +
    "\020\014\021\062\030\063\032\004\001\001\000\002\001" +
    "\001\000\052\002\210\003\053\004\036\005\052\006\050" +
    "\007\047\010\044\011\042\012\040\014\254\016\046\020" +
    "\014\021\035\022\161\023\022\024\021\025\020\027\024" +
    "\030\057\032\004\001\001\000\002\001\001\000\052\002" +
    "\210\003\053\004\036\005\052\006\050\007\047\010\044" +
    "\011\042\012\040\014\257\016\046\020\014\021\035\022" +
    "\161\023\022\024\021\025\020\027\024\030\057\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\261\001\001\000\002\001\001\000\016\015\263\016\160" +
    "\022\161\023\022\024\021\025\020\001\001\000\002\001" +
    "\001\000\052\002\210\003\053\004\036\005\052\006\050" +
    "\007\047\010\044\011\042\012\040\014\265\016\046\020" +
    "\014\021\035\022\161\023\022\024\021\025\020\027\024" +
    "\030\057\032\004\001\001\000\002\001\001\000\052\002" +
    "\210\003\053\004\036\005\052\006\050\007\047\010\044" +
    "\011\042\012\040\014\267\016\046\020\014\021\035\022" +
    "\161\023\022\024\021\025\020\027\024\030\057\032\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\014\030\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\304\005\052\006\050\007\047\010\044\011\042\012" +
    "\040\020\014\021\062\030\063\032\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\306\023\022\024" +
    "\021\025\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bloque out = new Bloque(l1);
      out.setLine(l1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bl ::= Bl Tipo IdVar IGUAL Exp PUNTOCOMA 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DecVar dec = new DecVar(t1, id1);
      dec.setLine(t1.getLine());
      b1.append(dec);
      DesigVar des = new DesigVar(id1);
      des.setLine(id1.getLine());
      ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(des); array.add(e2);
      InsBin out = new InsBin(KindI.ASIG,array);
      out.setLine(palinea.fila);
      b1.append(out);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bl ::= Tipo IdVar IGUAL Exp PUNTOCOMA 
            {
              Bloque RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DecVar dec = new DecVar(t1, id1);
      dec.setLine(t1.getLine());
      Bloque b1 = new Bloque(dec);
      DesigVar des = new DesigVar(id1);
      des.setLine(id1.getLine());
      ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(des); array.add(e2);
      InsBin out = new InsBin(KindI.ASIG,array);
      out.setLine(palinea.fila);
      b1.append(out);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Blin ::= LAP Bl LCIERRE 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Blin",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Blin ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bloque out = new Bloque(l1);
      out.setLine(l1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Blin",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Linea ::= Decl PUNTOCOMA 
            {
              Statement RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Linea ::= PUNTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= IF PAP Exp PCIERRE Blin PUNTOCOMA 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      InsBin out = new InsBin(KindI.IF,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= WHILE PAP Exp PCIERRE Blin 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      InsBin out = new InsBin(KindI.WHILE,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instr ::= IF PAP Exp PCIERRE Blin ELSE Blin 
            {
              Statement RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      InsBin out = new InsBin(KindI.IFELSE,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 Return out = new Return(e1);
      out.setLine(e1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instr ::= PRINT PAP Exp PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 Print out = new Print(e1);
      out.setLine(e1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instr ::= IdFun EXEC PAP StructInitOrden PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 FunctCall out = new FunctCall(id1,args);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instr ::= IdFun EXEC PAP PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 FunctCall out = new FunctCall(id1,null);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asign ::= Des IGUAL Exp 
            {
              InsBin RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(d1); array.add(e2);
      InsBin out = new InsBin(KindI.ASIG,array);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListaExp ::= Exp 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList <E> ret = new ArrayList <E> ();
      ret.add(e);
      RESULT = ret; 
   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaExp",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListaExp ::= ListaExp COMA Exp 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> le = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 le.add(e);
      RESULT = le;
   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaExp",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArrayAnonimo ::= CAP ListaExp CCIERRE 
            {
              TListIns RESULT =null;
		ArrayList<E> le = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TListIns(le); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ArrayAnonimo",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.SUMA,aDeexp1,aDeterm);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.RESTA,aDeexp1,aDeterm);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= ArrayAnonimo 
            {
              E RESULT =null;
		TListIns a = (TListIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = a; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op0 ::= Op0 MAYOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MAY,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op0 ::= Op0 MENOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MEN,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op0 ::= Op0 OPIGUAL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.EQ,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op0 ::= Op0 DIST Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.NEQ,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op1 ::= Op1 MUL Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MUL,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op1 ::= Op1 DIV Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.DIV,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op2 ::= Op2 POT Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.POT,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op2 ::= Op2 MOD Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MOD,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op3 ::= Op3 AND Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.AND,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Op3 ::= Op3 OR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.OR,aDeterm1,aDefact);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Op4 ::= NEW Tipo 
            {
              E RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new New(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op4 ::= IdFun CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 FunctCall out = new FunctCall(id1,args);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op4 ::= IdFun CALL PAP PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 FunctCall out = new FunctCall(id1,null);
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Op4 ::= READ PAP PCIERRE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 Read out = new Read();
      out.setLine(palinea.fila);
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Int out = new Int(intValue.lexema);
      out.setLine(intValue.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Op5 ::= TRUE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bool out = new Bool("true");
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Op5 ::= FALSE 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Bool out = new Bool("false");
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Op5 ::= Des 
            {
              E RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out = new EBin(KindE.MEM, d1, null);
      out.setLine(d1.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Op5 ::= NULL 
            {
              E RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 Null out = new Null();
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Op5 ::= NOT Op5 
            {
              E RESULT =null;
		E arg = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out =  new EBin(KindE.NOT, arg, null);
      out.setLine(arg.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Op5 ::= RESTA Op5 
            {
              E RESULT =null;
		E arg = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EBin out =  new EBin(KindE.RESTA, new Int("0"), arg);
      out.setLine(arg.getLine());
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo ::= PUNTERO Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TPointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo ::= Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo2 ::= Tipo2 CAP INT CCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo2 ::= Tipo3 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo3 ::= TIPOINT 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.INT, RefMode.VALUE);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo3 ::= TIPOBOOL 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.BOOL, RefMode.VALUE);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo3 ::= DOSPUNTOS IdType 
            {
              T RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TComp out = new TComp(id, RefMode.VALUE);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo3 ::= PAP StructBodyDef PCIERRE 
            {
              T RESULT =null;
		TStruct args1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo3 ::= REF TIPOINT 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.INT, RefMode.REF);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo3 ::= REF TIPOBOOL 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TSimple res = new TSimple(KindT.BOOL, RefMode.REF);
      res.setLine(tipo.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo3 ::= REF IdType 
            {
              T RESULT =null;
		TokenValue palinea = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TComp out = new TComp(id, RefMode.REF);
      out.setLine(palinea.fila);
      RESULT = out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo3 ::= Tipo4 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo4 ::= PAP Tipo PCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IdVar ::= IDEN 
            {
              IdenVar RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenVar res = new IdenVar(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdVar",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IdType ::= IDEN 
            {
              IdenType RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenType res = new IdenType(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdType",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IdFun ::= IDEN 
            {
              IdenFun RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 IdenFun res = new IdenFun(idValue.lexema);
      res.setLine(idValue.fila);
      RESULT = res; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdFun",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Decl ::= Tipo IdVar 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecVar out = new DecVar(t1, id1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Decl ::= FUN Tipo IdFun PAP StructBodyDef PCIERRE Blin 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(t1, id1, st1, b1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Decl ::= FUN Tipo IdFun PAP PCIERRE Blin 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(t1, id1, null, b1);
      out.setLine(t1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Decl ::= PROC IdFun PAP StructBodyDef PCIERRE Blin 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(null, id1, st1, b1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Decl ::= PROC IdFun PAP PCIERRE Blin 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecFun out = new DecFun(null, id1, null, b1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Decl ::= STRUCT IdType LLEVA LAP StructBodyDef LCIERRE 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DecStruct out = new DecStruct(id1, st1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Decl ::= TIPEDEF IdType Tipo 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DecTipo out = new DecTipo(id1,t1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StructBodyDef ::= StructBodyDef COMA Decl 
            {
              TStruct RESULT =null;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StructBodyDef ::= Decl 
            {
              TStruct RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 TStruct out = new TStruct(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Des ::= IdVar 
            {
              Desig RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DesigVar out = new DesigVar(id1);
      out.setLine(id1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Des ::= Des CAP Exp CCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DesigPosArray out = new DesigPosArray(d1,e1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Des ::= Des PUNTO IdVar 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 DesigCampo out = new DesigCampo(d1,id1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Des ::= PUNTERO PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 DesigRef out = new DesigRef(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Des ::= VALPTR PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 GetPointerVal out = new GetPointerVal(d1);
      out.setLine(d1.getLine());
      RESULT= out; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

