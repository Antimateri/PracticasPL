
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 20 20:50:15 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 20 20:50:15 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\011\000\002\003\011\000" +
    "\002\003\004\000\002\003\015\000\002\003\005\000\002" +
    "\003\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\005\000\002\003\006\000\002\027\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\004\007\000" +
    "\002\004\007\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\011\007\000\002\011\005\000\002" +
    "\011\006\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\012\006\000\002\012\003\000\002\026\005\000" +
    "\002\026\003\000\002\026\005\000\002\026\003\000\002" +
    "\021\004\000\002\021\003\000\002\022\006\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\004" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\003\000\002\024\005\000\002" +
    "\017\003\000\002\016\003\000\002\020\003\000\002\015" +
    "\004\000\002\015\013\000\002\015\012\000\002\015\012" +
    "\000\002\015\011\000\002\015\010\000\002\015\005\000" +
    "\002\014\005\000\002\014\003\000\002\030\003\000\002" +
    "\030\006\000\002\030\005\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\060\004\021\005\041\006\010\010\015\011" +
    "\005\013\023\014\053\016\051\037\055\040\036\041\034" +
    "\047\007\053\004\054\030\055\046\056\025\057\011\060" +
    "\031\061\013\062\024\063\052\064\006\065\040\001\002" +
    "\000\004\065\155\001\002\000\004\065\155\001\002\000" +
    "\040\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\042\uffd9\044" +
    "\uffd9\047\uffd9\051\uffd9\001\002\000\064\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\016" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\046\ufffb\047\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\001\002\000\004\041\274" +
    "\001\002\000\010\054\271\055\273\065\155\001\002\000" +
    "\046\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\001\002" +
    "\000\004\041\266\001\002\000\062\002\265\004\021\005" +
    "\041\006\010\010\015\011\005\013\023\014\053\016\051" +
    "\037\055\040\036\041\034\047\007\053\004\054\030\055" +
    "\046\056\025\057\011\060\031\061\013\062\024\063\052" +
    "\064\006\065\040\001\002\000\016\041\161\053\004\054" +
    "\030\055\046\057\011\060\163\001\002\000\016\042\uffc3" +
    "\043\uffc3\046\uffc3\047\uffc3\051\uffc3\065\uffc3\001\002\000" +
    "\016\042\uffcb\043\uffcb\046\uffcb\047\uffcb\051\uffcb\065\uffcb" +
    "\001\002\000\016\042\uffcd\043\165\046\uffcd\047\uffcd\051" +
    "\uffcd\065\uffcd\001\002\000\004\041\243\001\002\000\004" +
    "\047\242\001\002\000\022\041\063\056\025\060\062\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\040" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\042\uffd8\044\uffd8" +
    "\047\uffd8\051\uffd8\001\002\000\040\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\042\uffd3\044\uffd3\047\uffd3\051\uffd3\001" +
    "\002\000\064\002\uffff\004\uffff\005\uffff\006\uffff\010\uffff" +
    "\011\uffff\013\uffff\014\uffff\016\uffff\037\uffff\040\uffff\041" +
    "\uffff\046\uffff\047\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\001\002\000\004\065\127\001\002\000\016\042\uffca" +
    "\043\uffca\046\uffca\047\uffca\051\uffca\065\uffca\001\002\000" +
    "\014\041\237\053\004\054\030\055\046\057\011\001\002" +
    "\000\006\012\140\017\231\001\002\000\010\024\071\025" +
    "\067\047\230\001\002\000\042\010\015\011\005\014\053" +
    "\016\051\041\034\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\040\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\042\uffda\044\uffda\047\uffda\051\uffda\001\002\000\004\041" +
    "\224\001\002\000\040\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\042\uffde\044\uffde\047\uffde\051\uffde\001\002\000\052" +
    "\012\uffbf\017\uffbf\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\001\002\000\004\041\216\001\002\000\040\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\110\035\107\036\106\042\uffe2\044\uffe2\047\uffe2" +
    "\051\uffe2\001\002\000\032\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\103\033\104\042\uffe5\044\uffe5" +
    "\047\uffe5\051\uffe5\001\002\000\004\047\215\001\002\000" +
    "\026\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\100\031\101" +
    "\042\uffe8\044\uffe8\047\uffe8\051\uffe8\001\002\000\016\042" +
    "\uffc9\043\uffc9\046\uffc9\047\uffc9\051\uffc9\065\uffc9\001\002" +
    "\000\022\024\uffed\025\uffed\026\075\027\076\042\uffed\044" +
    "\uffed\047\uffed\051\uffed\001\002\000\064\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe\016" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\046\ufffe\047\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\001\002\000\004\065\201" +
    "\001\002\000\040\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\042\uffd7\044\uffd7\047\uffd7\051\uffd7\001\002\000\004\065" +
    "\155\001\002\000\044\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\042\uffd6\043\130\047\uffd6\050\152\051\uffd6\052\131" +
    "\001\002\000\004\041\056\001\002\000\022\041\063\056" +
    "\025\060\062\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\004\012\140\001\002\000\044\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\042\uffd6\043\130\044\uffd6\047" +
    "\uffd6\051\uffd6\052\131\001\002\000\010\024\071\025\067" +
    "\042\136\001\002\000\004\041\125\001\002\000\022\041" +
    "\063\056\025\060\062\061\013\062\024\063\052\064\006" +
    "\065\040\001\002\000\006\042\uffcf\051\uffcf\001\002\000" +
    "\004\051\120\001\002\000\012\024\071\025\067\042\070" +
    "\051\uffd1\001\002\000\022\041\073\056\025\060\062\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\040" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\042\uffd5\044\uffd5" +
    "\047\uffd5\051\uffd5\001\002\000\022\041\073\056\025\060" +
    "\062\061\013\062\024\063\052\064\006\065\040\001\002" +
    "\000\022\024\uffef\025\uffef\026\075\027\076\042\uffef\044" +
    "\uffef\047\uffef\051\uffef\001\002\000\022\041\063\056\025" +
    "\060\062\061\013\062\024\063\052\064\006\065\040\001" +
    "\002\000\010\024\071\025\067\042\070\001\002\000\022" +
    "\041\073\056\025\060\062\061\013\062\024\063\052\064" +
    "\006\065\040\001\002\000\022\041\073\056\025\060\062" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\026\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\100\031\101" +
    "\042\uffe9\044\uffe9\047\uffe9\051\uffe9\001\002\000\022\041" +
    "\073\056\025\060\062\061\013\062\024\063\052\064\006" +
    "\065\040\001\002\000\022\041\073\056\025\060\062\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\032" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\103\033\104\042\uffe7\044\uffe7\047\uffe7\051\uffe7\001\002" +
    "\000\022\041\073\056\025\060\062\061\013\062\024\063" +
    "\052\064\006\065\040\001\002\000\022\041\073\056\025" +
    "\060\062\061\013\062\024\063\052\064\006\065\040\001" +
    "\002\000\040\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\110\035\107\036\106\042" +
    "\uffe3\044\uffe3\047\uffe3\051\uffe3\001\002\000\022\041\073" +
    "\056\025\060\062\061\013\062\024\063\052\064\006\065" +
    "\040\001\002\000\022\041\073\056\025\060\062\061\013" +
    "\062\024\063\052\064\006\065\040\001\002\000\022\041" +
    "\073\056\025\060\062\061\013\062\024\063\052\064\006" +
    "\065\040\001\002\000\040\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\042\uffe1\044\uffe1\047\uffe1\051\uffe1\001\002\000" +
    "\040\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\042\uffe0\044" +
    "\uffe0\047\uffe0\051\uffe0\001\002\000\040\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\042\uffdf\044\uffdf\047\uffdf\051\uffdf" +
    "\001\002\000\040\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\110\035\107\036\106" +
    "\042\uffe4\044\uffe4\047\uffe4\051\uffe4\001\002\000\032\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\103" +
    "\033\104\042\uffe6\044\uffe6\047\uffe6\051\uffe6\001\002\000" +
    "\026\024\uffea\025\uffea\026\uffea\027\uffea\030\100\031\101" +
    "\042\uffea\044\uffea\047\uffea\051\uffea\001\002\000\022\024" +
    "\uffee\025\uffee\026\075\027\076\042\uffee\044\uffee\047\uffee" +
    "\051\uffee\001\002\000\022\041\063\056\025\060\062\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\006" +
    "\042\124\051\uffd0\001\002\000\012\024\071\025\067\042" +
    "\123\051\uffd2\001\002\000\016\024\uffec\025\uffec\042\uffec" +
    "\044\uffec\047\uffec\051\uffec\001\002\000\016\024\uffeb\025" +
    "\uffeb\042\uffeb\044\uffeb\047\uffeb\051\uffeb\001\002\000\006" +
    "\060\062\065\127\001\002\000\010\042\132\043\130\052" +
    "\131\001\002\000\126\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\010\uffc1\011\uffc1\013\uffc1\014\uffc1\016\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002" +
    "\000\022\041\063\056\025\060\062\061\013\062\024\063" +
    "\052\064\006\065\040\001\002\000\004\065\127\001\002" +
    "\000\046\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\001" +
    "\002\000\046\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\001\002\000\010\024\071\025\067\044\135\001\002\000" +
    "\046\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\001\002" +
    "\000\004\047\137\001\002\000\064\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\046\ufff5\047\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\001\002\000\006\041\141\065" +
    "\127\001\002\000\024\041\063\042\143\056\025\060\062" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\040\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\042\uffdc\044" +
    "\uffdc\047\uffdc\051\uffdc\001\002\000\040\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\042\uffdb\044\uffdb\047\uffdb\051\uffdb" +
    "\001\002\000\006\042\147\051\146\001\002\000\012\024" +
    "\071\025\067\042\uffd1\051\uffd1\001\002\000\022\041\063" +
    "\056\025\060\062\061\013\062\024\063\052\064\006\065" +
    "\040\001\002\000\040\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\042\uffdd\044\uffdd\047\uffdd\051\uffdd\001\002\000\006" +
    "\042\uffd0\051\uffd0\001\002\000\012\024\071\025\067\042" +
    "\uffd2\051\uffd2\001\002\000\022\041\063\056\025\060\062" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\014\024\071\025\067\042\ufff0\047\ufff0\051\ufff0\001\002" +
    "\000\004\015\156\001\002\000\034\015\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\046\uffc0\047\uffc0\051\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\065\uffc0\001\002\000\004\045" +
    "\157\001\002\000\026\010\015\011\005\014\053\016\051" +
    "\041\161\053\004\054\030\055\046\057\011\060\163\001" +
    "\002\000\010\042\uffb6\046\uffb6\051\uffb6\001\002\000\026" +
    "\010\015\011\005\014\053\016\051\041\161\053\004\054" +
    "\030\055\046\057\011\060\163\001\002\000\006\046\171" +
    "\051\170\001\002\000\014\041\161\053\004\054\030\055" +
    "\046\057\011\001\002\000\016\042\uffce\043\165\046\uffce" +
    "\047\uffce\051\uffce\065\uffce\001\002\000\004\064\166\001" +
    "\002\000\004\044\167\001\002\000\016\042\uffcc\043\uffcc" +
    "\046\uffcc\047\uffcc\051\uffcc\065\uffcc\001\002\000\026\010" +
    "\015\011\005\014\053\016\051\041\161\053\004\054\030" +
    "\055\046\057\011\060\163\001\002\000\012\042\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\001\002\000\010\042\uffb7\046\uffb7" +
    "\051\uffb7\001\002\000\006\042\176\065\127\001\002\000" +
    "\006\042\175\051\170\001\002\000\016\042\uffc7\043\uffc7" +
    "\046\uffc7\047\uffc7\051\uffc7\065\uffc7\001\002\000\016\042" +
    "\uffc2\043\uffc2\046\uffc2\047\uffc2\051\uffc2\065\uffc2\001\002" +
    "\000\012\042\uffbe\046\uffbe\047\uffbe\051\uffbe\001\002\000" +
    "\004\041\202\001\002\000\004\041\uffbf\001\002\000\030" +
    "\010\015\011\005\014\053\016\051\041\161\042\204\053" +
    "\004\054\030\055\046\057\011\060\163\001\002\000\006" +
    "\042\211\051\170\001\002\000\004\045\205\001\002\000" +
    "\060\004\021\005\041\006\010\010\015\011\005\013\023" +
    "\014\053\016\051\037\055\040\036\041\034\047\007\053" +
    "\004\054\030\055\046\056\025\057\011\060\031\061\013" +
    "\062\024\063\052\064\006\065\040\001\002\000\062\004" +
    "\021\005\041\006\010\010\015\011\005\013\023\014\053" +
    "\016\051\037\055\040\036\041\034\046\207\047\007\053" +
    "\004\054\030\055\046\056\025\057\011\060\031\061\013" +
    "\062\024\063\052\064\006\065\040\001\002\000\012\042" +
    "\uffba\046\uffba\047\uffba\051\uffba\001\002\000\064\002\001" +
    "\004\001\005\001\006\001\010\001\011\001\013\001\014" +
    "\001\016\001\037\001\040\001\041\001\046\001\047\001" +
    "\053\001\054\001\055\001\056\001\057\001\060\001\061" +
    "\001\062\001\063\001\064\001\065\001\001\002\000\004" +
    "\045\212\001\002\000\060\004\021\005\041\006\010\010" +
    "\015\011\005\013\023\014\053\016\051\037\055\040\036" +
    "\041\034\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\062\004\021\005\041\006\010\010\015\011" +
    "\005\013\023\014\053\016\051\037\055\040\036\041\034" +
    "\046\214\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\012\042\uffbb\046\uffbb\047\uffbb\051\uffbb\001" +
    "\002\000\064\002\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd" +
    "\011\ufffd\013\ufffd\014\ufffd\016\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\046\ufffd\047\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\001\002\000\022\041\063\056\025\060\062\061\013" +
    "\062\024\063\052\064\006\065\040\001\002\000\010\024" +
    "\071\025\067\042\220\001\002\000\004\045\221\001\002" +
    "\000\060\004\021\005\041\006\010\010\015\011\005\013" +
    "\023\014\053\016\051\037\055\040\036\041\034\047\007" +
    "\053\004\054\030\055\046\056\025\057\011\060\031\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\062" +
    "\004\021\005\041\006\010\010\015\011\005\013\023\014" +
    "\053\016\051\037\055\040\036\041\034\046\223\047\007" +
    "\053\004\054\030\055\046\056\025\057\011\060\031\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\064" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\037\ufff9\040\ufff9\041\ufff9\046\ufff9" +
    "\047\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\001\002" +
    "\000\004\065\127\001\002\000\004\042\226\001\002\000" +
    "\004\047\227\001\002\000\064\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\016\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\046\ufff4\047\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\001\002\000\064\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\046\ufffc\047\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\001\002\000\006\041\232" +
    "\065\127\001\002\000\024\041\063\042\234\056\025\060" +
    "\062\061\013\062\024\063\052\064\006\065\040\001\002" +
    "\000\064\002\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\013\ufff2\014\ufff2\016\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\046\ufff2\047\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\001\002\000\064\002\ufff1\004\ufff1\005\ufff1\006\ufff1\010" +
    "\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\046\ufff1\047\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\001\002\000\010\024\071\025\067\042\236\001" +
    "\002\000\064\002\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3" +
    "\011\ufff3\013\ufff3\014\ufff3\016\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\046\ufff3\047\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\001\002\000\030\010\015\011\005\014\053\016\051" +
    "\041\161\053\004\054\030\055\046\057\011\060\031\065" +
    "\127\001\002\000\010\024\071\025\067\047\241\001\002" +
    "\000\064\002\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\016\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\046\ufff6\047\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\001\002\000\064\002\ufff8\004\ufff8\005\ufff8\006\ufff8\010" +
    "\ufff8\011\ufff8\013\ufff8\014\ufff8\016\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\046\ufff8\047\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\001\002\000\022\041\063\056\025\060\062\061" +
    "\013\062\024\063\052\064\006\065\040\001\002\000\010" +
    "\024\071\025\067\042\245\001\002\000\004\045\246\001" +
    "\002\000\060\004\021\005\041\006\010\010\015\011\005" +
    "\013\023\014\053\016\051\037\055\040\036\041\034\047" +
    "\007\053\004\054\030\055\046\056\025\057\011\060\031" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\062\004\021\005\041\006\010\010\015\011\005\013\023" +
    "\014\053\016\051\037\055\040\036\041\034\046\250\047" +
    "\007\053\004\054\030\055\046\056\025\057\011\060\031" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\064\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa\011\ufffa" +
    "\013\ufffa\014\ufffa\016\ufffa\037\ufffa\040\ufffa\041\ufffa\046" +
    "\ufffa\047\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\001" +
    "\002\000\004\065\201\001\002\000\004\041\253\001\002" +
    "\000\030\010\015\011\005\014\053\016\051\041\161\042" +
    "\255\053\004\054\030\055\046\057\011\060\163\001\002" +
    "\000\006\042\261\051\170\001\002\000\004\045\256\001" +
    "\002\000\060\004\021\005\041\006\010\010\015\011\005" +
    "\013\023\014\053\016\051\037\055\040\036\041\034\047" +
    "\007\053\004\054\030\055\046\056\025\057\011\060\031" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\062\004\021\005\041\006\010\010\015\011\005\013\023" +
    "\014\053\016\051\037\055\040\036\041\034\046\260\047" +
    "\007\053\004\054\030\055\046\056\025\057\011\060\031" +
    "\061\013\062\024\063\052\064\006\065\040\001\002\000" +
    "\012\042\uffbc\046\uffbc\047\uffbc\051\uffbc\001\002\000\004" +
    "\045\262\001\002\000\060\004\021\005\041\006\010\010" +
    "\015\011\005\013\023\014\053\016\051\037\055\040\036" +
    "\041\034\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\062\004\021\005\041\006\010\010\015\011" +
    "\005\013\023\014\053\016\051\037\055\040\036\041\034" +
    "\046\264\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\012\042\uffbd\046\uffbd\047\uffbd\051\uffbd\001" +
    "\002\000\004\002\000\001\002\000\004\065\127\001\002" +
    "\000\004\042\270\001\002\000\040\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\042\uffd4\044\uffd4\047\uffd4\051\uffd4\001" +
    "\002\000\016\042\uffc6\043\uffc6\046\uffc6\047\uffc6\051\uffc6" +
    "\065\uffc6\001\002\000\016\042\uffc4\043\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\065\uffc4\001\002\000\016\042\uffc5\043\uffc5" +
    "\046\uffc5\047\uffc5\051\uffc5\065\uffc5\001\002\000\022\041" +
    "\063\056\025\060\062\061\013\062\024\063\052\064\006" +
    "\065\040\001\002\000\010\024\071\025\067\042\276\001" +
    "\002\000\004\045\277\001\002\000\060\004\021\005\041" +
    "\006\010\010\015\011\005\013\023\014\053\016\051\037" +
    "\055\040\036\041\034\047\007\053\004\054\030\055\046" +
    "\056\025\057\011\060\031\061\013\062\024\063\052\064" +
    "\006\065\040\001\002\000\062\004\021\005\041\006\010" +
    "\010\015\011\005\013\023\014\053\016\051\037\055\040" +
    "\036\041\034\046\301\047\007\053\004\054\030\055\046" +
    "\056\025\057\011\060\031\061\013\062\024\063\052\064" +
    "\006\065\040\001\002\000\004\007\302\001\002\000\004" +
    "\045\303\001\002\000\060\004\021\005\041\006\010\010" +
    "\015\011\005\013\023\014\053\016\051\037\055\040\036" +
    "\041\034\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\062\004\021\005\041\006\010\010\015\011" +
    "\005\013\023\014\053\016\051\037\055\040\036\041\034" +
    "\046\305\047\007\053\004\054\030\055\046\056\025\057" +
    "\011\060\031\061\013\062\024\063\052\064\006\065\040" +
    "\001\002\000\064\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\014\ufff7\016\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\046\ufff7\047\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\001\002\000\016\041\161\053\004\054\030\055" +
    "\046\057\011\060\163\001\002\000\012\042\uffb8\046\uffb8" +
    "\047\uffb8\051\uffb8\001\002\000\016\042\uffc8\043\uffc8\046" +
    "\uffc8\047\uffc8\051\uffc8\065\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\050\002\025\003\047\004\032\005\046\006" +
    "\044\007\042\010\041\011\036\012\034\013\013\015\043" +
    "\017\011\020\031\021\026\022\017\023\016\024\015\027" +
    "\021\030\053\001\001\000\004\016\307\001\001\000\004" +
    "\016\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\207\003\047\004\032\005" +
    "\046\006\044\007\042\010\041\011\036\012\034\015\043" +
    "\017\011\020\031\021\026\022\017\023\016\024\015\027" +
    "\021\030\053\001\001\000\012\021\250\022\017\023\016" +
    "\024\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\237\005\046\006\044\007\042\010\041\011\036\012" +
    "\034\017\011\020\056\030\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\176\001" +
    "\001\000\002\001\001\000\010\022\163\023\016\024\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\065\005\046\006\044\007\042\010\041\011\036\012\034" +
    "\014\173\015\157\017\011\020\056\021\172\022\017\023" +
    "\016\024\015\026\064\027\063\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\177\001\001" +
    "\000\002\001\001\000\004\016\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\060\005\046\006\044" +
    "\007\042\010\041\011\036\012\034\017\011\020\056\030" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\065\005\046\006" +
    "\044\007\042\010\041\011\036\012\034\017\011\020\056" +
    "\026\064\027\063\030\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\116\006\044" +
    "\007\042\010\041\011\036\012\034\017\011\020\056\030" +
    "\057\001\001\000\002\001\001\000\024\005\071\006\044" +
    "\007\042\010\041\011\036\012\034\017\011\020\056\030" +
    "\057\001\001\000\002\001\001\000\026\004\073\005\046" +
    "\006\044\007\042\010\041\011\036\012\034\017\011\020" +
    "\056\030\057\001\001\000\002\001\001\000\022\006\115" +
    "\007\042\010\041\011\036\012\034\017\011\020\056\030" +
    "\057\001\001\000\022\006\076\007\042\010\041\011\036" +
    "\012\034\017\011\020\056\030\057\001\001\000\002\001" +
    "\001\000\020\007\114\010\041\011\036\012\034\017\011" +
    "\020\056\030\057\001\001\000\020\007\101\010\041\011" +
    "\036\012\034\017\011\020\056\030\057\001\001\000\002" +
    "\001\001\000\016\010\113\011\036\012\034\017\011\020" +
    "\056\030\057\001\001\000\016\010\104\011\036\012\034" +
    "\017\011\020\056\030\057\001\001\000\002\001\001\000" +
    "\014\011\112\012\034\017\011\020\056\030\057\001\001" +
    "\000\014\011\111\012\034\017\011\020\056\030\057\001" +
    "\001\000\014\011\110\012\034\017\011\020\056\030\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\121\005\046\006\044\007" +
    "\042\010\041\011\036\012\034\017\011\020\056\027\120" +
    "\030\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\011\030\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\133\005\046\006\044\007\042\010\041\011\036\012\034" +
    "\017\011\020\056\030\057\001\001\000\004\017\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\141\001\001\000\032\004\144\005\046\006\044" +
    "\007\042\010\041\011\036\012\034\017\011\020\056\026" +
    "\143\027\063\030\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\150\005\046\006\044\007\042\010\041\011\036\012\034" +
    "\017\011\020\056\027\147\030\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\152" +
    "\005\046\006\044\007\042\010\041\011\036\012\034\017" +
    "\011\020\056\030\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\161\015\157\021\026\022\017\023\016\024\015\001\001" +
    "\000\002\001\001\000\016\014\173\015\157\021\172\022" +
    "\017\023\016\024\015\001\001\000\002\001\001\000\010" +
    "\022\163\023\016\024\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\171\021\026\022\017\023\016\024\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\202\015\157\021\026\022\017\023\016\024\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\025" +
    "\003\047\004\032\005\046\006\044\007\042\010\041\011" +
    "\036\012\034\013\205\015\043\017\011\020\031\021\026" +
    "\022\017\023\016\024\015\027\021\030\053\001\001\000" +
    "\046\002\207\003\047\004\032\005\046\006\044\007\042" +
    "\010\041\011\036\012\034\015\043\017\011\020\031\021" +
    "\026\022\017\023\016\024\015\027\021\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\025\003\047\004\032\005\046\006\044\007\042" +
    "\010\041\011\036\012\034\013\212\015\043\017\011\020" +
    "\031\021\026\022\017\023\016\024\015\027\021\030\053" +
    "\001\001\000\046\002\207\003\047\004\032\005\046\006" +
    "\044\007\042\010\041\011\036\012\034\015\043\017\011" +
    "\020\031\021\026\022\017\023\016\024\015\027\021\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\216\005\046\006\044\007\042\010\041\011\036\012" +
    "\034\017\011\020\056\030\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\025\003\047\004\032\005" +
    "\046\006\044\007\042\010\041\011\036\012\034\013\221" +
    "\015\043\017\011\020\031\021\026\022\017\023\016\024" +
    "\015\027\021\030\053\001\001\000\046\002\207\003\047" +
    "\004\032\005\046\006\044\007\042\010\041\011\036\012" +
    "\034\015\043\017\011\020\031\021\026\022\017\023\016" +
    "\024\015\027\021\030\053\001\001\000\002\001\001\000" +
    "\004\017\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\232\001" +
    "\001\000\026\004\234\005\046\006\044\007\042\010\041" +
    "\011\036\012\034\017\011\020\056\030\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\173\015\157\017\011\021\172\022" +
    "\017\023\016\024\015\030\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\243\005" +
    "\046\006\044\007\042\010\041\011\036\012\034\017\011" +
    "\020\056\030\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\002\025\003\047\004\032\005\046\006\044" +
    "\007\042\010\041\011\036\012\034\013\246\015\043\017" +
    "\011\020\031\021\026\022\017\023\016\024\015\027\021" +
    "\030\053\001\001\000\046\002\207\003\047\004\032\005" +
    "\046\006\044\007\042\010\041\011\036\012\034\015\043" +
    "\017\011\020\031\021\026\022\017\023\016\024\015\027" +
    "\021\030\053\001\001\000\002\001\001\000\004\020\251" +
    "\001\001\000\002\001\001\000\016\014\253\015\157\021" +
    "\026\022\017\023\016\024\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\025\003\047\004\032\005" +
    "\046\006\044\007\042\010\041\011\036\012\034\013\256" +
    "\015\043\017\011\020\031\021\026\022\017\023\016\024" +
    "\015\027\021\030\053\001\001\000\046\002\207\003\047" +
    "\004\032\005\046\006\044\007\042\010\041\011\036\012" +
    "\034\015\043\017\011\020\031\021\026\022\017\023\016" +
    "\024\015\027\021\030\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\002\025\003\047\004\032\005\046" +
    "\006\044\007\042\010\041\011\036\012\034\013\262\015" +
    "\043\017\011\020\031\021\026\022\017\023\016\024\015" +
    "\027\021\030\053\001\001\000\046\002\207\003\047\004" +
    "\032\005\046\006\044\007\042\010\041\011\036\012\034" +
    "\015\043\017\011\020\031\021\026\022\017\023\016\024" +
    "\015\027\021\030\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\274\005\046\006\044\007\042\010" +
    "\041\011\036\012\034\017\011\020\056\030\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\002\025\003" +
    "\047\004\032\005\046\006\044\007\042\010\041\011\036" +
    "\012\034\013\277\015\043\017\011\020\031\021\026\022" +
    "\017\023\016\024\015\027\021\030\053\001\001\000\046" +
    "\002\207\003\047\004\032\005\046\006\044\007\042\010" +
    "\041\011\036\012\034\015\043\017\011\020\031\021\026" +
    "\022\017\023\016\024\015\027\021\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\025\003\047" +
    "\004\032\005\046\006\044\007\042\010\041\011\036\012" +
    "\034\013\303\015\043\017\011\020\031\021\026\022\017" +
    "\023\016\024\015\027\021\030\053\001\001\000\046\002" +
    "\207\003\047\004\032\005\046\006\044\007\042\010\041" +
    "\011\036\012\034\015\043\017\011\020\031\021\026\022" +
    "\017\023\016\024\015\027\021\030\053\001\001\000\002" +
    "\001\001\000\012\021\306\022\017\023\016\024\015\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Decl PUNTOCOMA 
            {
              Statement RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= PUNTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= PRINT PAP Exp PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Print(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instr ::= READ PAP IdVar PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Read(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instr ::= IdFun EXEC PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E args = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instr ::= IdFun EXEC IdVar 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar args = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instr ::= IdFun EXEC PAP PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asign ::= Des IGUAL Exp 
            {
              InsBin RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(d1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= PAP StructInitOrden COMA Asign PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		InsBin arg2 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addNamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op0 ::= Op0 MUL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op0 ::= Op0 DIV Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op1 ::= Op1 POT Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op1 ::= Op1 MOD Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op2 ::= Op2 AND Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op2 ::= Op2 OR Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op3 ::= Op3 MAYOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op3 ::= Op3 MENOR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op3 ::= Op3 OPIGUAL Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op4 ::= IdFun CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op4 ::= IdFun CALL IdVar 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar args = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op4 ::= IdFun CALL PAP PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Op5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new Bool("true"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Op5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new Bool("false"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op5 ::= Des 
            {
              E RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(KindE.MEM, d1, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Op5 ::= VALPTR PAP IdVar PCIERRE 
            {
              E RESULT =null;
		IdenVar id = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new GetPointerVal(id); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Op5 ::= NULL 
            {
              E RESULT =null;
		 RESULT = new Null(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StructInitOrden ::= StructInitOrden COMA Asign 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StructInitOrden ::= Asign 
            {
              StructIns RESULT =null;
		InsBin arg = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addNamedArg(arg);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo ::= PUNTERO Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TPointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo ::= Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo2 ::= Tipo2 CAP INT CCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo2 ::= Tipo3 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo3 ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo3 ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo3 ::= DOSPUNTOS IdType 
            {
              T RESULT =null;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo3 ::= PAP StructBodyDef PCIERRE 
            {
              T RESULT =null;
		TStruct args1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo3 ::= REF TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo3 ::= REF TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo3 ::= REF IdType 
            {
              T RESULT =null;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo3 ::= Tipo4 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo4 ::= PAP Tipo PCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo4",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IdVar ::= IDEN 
            {
              IdenVar RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenVar(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdVar",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IdType ::= IDEN 
            {
              IdenType RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenType(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdType",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IdFun ::= IDEN 
            {
              IdenFun RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenFun(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdFun",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Decl ::= Tipo IdVar 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT= new DecVar(t1, id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Decl ::= FUN Tipo IdFun PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Decl ::= FUN Tipo IdFun PAP PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(t1, id1, null, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Decl ::= PROC IdFun PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(null, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Decl ::= PROC IdFun PAP PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(null, id1, null, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Decl ::= STRUCT IdType LLEVA LAP StructBodyDef LCIERRE 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecStruct(id1, st1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Decl ::= TIPEDEF IdType Tipo 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new DecTipo(id1,t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StructBodyDef ::= StructBodyDef COMA Decl 
            {
              TStruct RESULT =null;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StructBodyDef ::= Decl 
            {
              TStruct RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new TStruct(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Des ::= IdVar 
            {
              Desig RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new DesigVar(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Des ::= Des CAP Exp CCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DesigPosArray(d1,e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Des ::= Des PUNTO IdVar 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DesigCampo(d1,id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Des ::= PUNTERO PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DesigRef(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

