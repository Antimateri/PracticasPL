
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 25 18:27:13 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 25 18:27:13 CEST 2023

  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\011\000\002\003\011\000" +
    "\002\003\004\000\002\003\015\000\002\003\005\000\002" +
    "\003\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\005\000\002\003\006\000\002\026\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\004\007\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\011\007\000\002\011\005\000\002" +
    "\011\006\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\012\006\000\002\012\003\000\002\012\004\000" +
    "\002\025\005\000\002\025\003\000\002\021\004\000\002" +
    "\021\003\000\002\022\006\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\004\000\002\023\005" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\003\000\002\024\005\000\002\017\003\000\002" +
    "\016\003\000\002\020\003\000\002\015\004\000\002\015" +
    "\013\000\002\015\012\000\002\015\012\000\002\015\011" +
    "\000\002\015\010\000\002\015\005\000\002\014\005\000" +
    "\002\014\003\000\002\027\003\000\002\027\006\000\002" +
    "\027\005\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\062\004\022\005\042\006\010\010\016\011" +
    "\005\013\024\014\054\016\052\034\014\035\056\036\037" +
    "\037\035\045\007\051\004\052\031\053\047\054\026\055" +
    "\011\056\032\057\012\060\025\061\053\062\006\063\041" +
    "\001\002\000\004\063\154\001\002\000\004\063\154\001" +
    "\002\000\042\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\040\uffd9\042\uffd9\045\uffd9\047\uffd9\001\002\000\066" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\001\002\000\004\037\274\001\002\000\010\052\271\053" +
    "\273\063\154\001\002\000\004\037\266\001\002\000\050" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\001" +
    "\002\000\024\034\014\037\072\054\026\056\063\057\012" +
    "\060\025\061\053\062\006\063\127\001\002\000\064\002" +
    "\264\004\022\005\042\006\010\010\016\011\005\013\024" +
    "\014\054\016\052\034\014\035\056\036\037\037\035\045" +
    "\007\051\004\052\031\053\047\054\026\055\011\056\032" +
    "\057\012\060\025\061\053\062\006\063\041\001\002\000" +
    "\016\037\160\051\004\052\031\053\047\055\011\056\162" +
    "\001\002\000\016\040\uffc4\041\uffc4\044\uffc4\045\uffc4\047" +
    "\uffc4\063\uffc4\001\002\000\016\040\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\047\uffcc\063\uffcc\001\002\000\016\040\uffce\041" +
    "\164\044\uffce\045\uffce\047\uffce\063\uffce\001\002\000\004" +
    "\037\242\001\002\000\004\045\241\001\002\000\024\034" +
    "\014\037\064\054\026\056\063\057\012\060\025\061\053" +
    "\062\006\063\041\001\002\000\042\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\040\uffd8\042\uffd8\045\uffd8\047" +
    "\uffd8\001\002\000\042\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\040\uffd3\042\uffd3\045\uffd3\047\uffd3\001\002" +
    "\000\066\002\uffff\004\uffff\005\uffff\006\uffff\010\uffff\011" +
    "\uffff\013\uffff\014\uffff\016\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\044\uffff\045\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\001\002\000\004\063\127\001\002\000\016\040" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\063\uffcb\001\002" +
    "\000\014\037\236\051\004\052\031\053\047\055\011\001" +
    "\002\000\006\012\140\017\230\001\002\000\010\020\071" +
    "\021\067\045\227\001\002\000\044\010\016\011\005\014" +
    "\054\016\052\034\014\037\035\051\004\052\031\053\047" +
    "\054\026\055\011\056\032\057\012\060\025\061\053\062" +
    "\006\063\041\001\002\000\042\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\040\uffda\042\uffda\045\uffda\047\uffda" +
    "\001\002\000\004\037\223\001\002\000\042\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\040\uffde\042\uffde\045" +
    "\uffde\047\uffde\001\002\000\054\012\uffc0\017\uffc0\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002\000" +
    "\004\037\215\001\002\000\042\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\107\027\110\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\040\uffe1\042\uffe1\045\uffe1\047\uffe1" +
    "\001\002\000\036\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\104\025\105\030\uffe4\031\uffe4\032\uffe4\033\uffe4\040\uffe4" +
    "\042\uffe4\045\uffe4\047\uffe4\001\002\000\004\045\214\001" +
    "\002\000\032\020\uffe7\021\uffe7\022\101\023\102\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\040\uffe7\042\uffe7\045\uffe7\047" +
    "\uffe7\001\002\000\016\040\uffca\041\uffca\044\uffca\045\uffca" +
    "\047\uffca\063\uffca\001\002\000\026\020\uffed\021\uffed\030" +
    "\077\031\076\032\075\033\074\040\uffed\042\uffed\045\uffed" +
    "\047\uffed\001\002\000\066\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe\016\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\044\ufffe\045\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\001\002\000\004\063\200\001" +
    "\002\000\042\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\040\uffd7\042\uffd7\045\uffd7\047\uffd7\001\002\000\004" +
    "\063\154\001\002\000\042\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\041\131\045\uffd6\046\151\050\130\001" +
    "\002\000\004\037\057\001\002\000\024\034\014\037\064" +
    "\054\026\056\063\057\012\060\025\061\053\062\006\063" +
    "\041\001\002\000\004\012\140\001\002\000\046\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\040\uffd6\041\131" +
    "\042\uffd6\045\uffd6\047\uffd6\050\130\001\002\000\010\020" +
    "\071\021\067\040\136\001\002\000\004\037\125\001\002" +
    "\000\024\034\014\037\064\054\026\056\063\057\012\060" +
    "\025\061\053\062\006\063\041\001\002\000\004\047\122" +
    "\001\002\000\012\020\071\021\067\040\070\047\uffd0\001" +
    "\002\000\024\034\014\037\072\054\026\056\063\057\012" +
    "\060\025\061\053\062\006\063\041\001\002\000\042\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\040\uffd5\042" +
    "\uffd5\045\uffd5\047\uffd5\001\002\000\024\034\014\037\072" +
    "\054\026\056\063\057\012\060\025\061\053\062\006\063" +
    "\041\001\002\000\024\034\014\037\064\054\026\056\063" +
    "\057\012\060\025\061\053\062\006\063\041\001\002\000" +
    "\026\020\uffef\021\uffef\030\077\031\076\032\075\033\074" +
    "\040\uffef\042\uffef\045\uffef\047\uffef\001\002\000\024\034" +
    "\014\037\072\054\026\056\063\057\012\060\025\061\053" +
    "\062\006\063\041\001\002\000\024\034\014\037\072\054" +
    "\026\056\063\057\012\060\025\061\053\062\006\063\041" +
    "\001\002\000\024\034\014\037\072\054\026\056\063\057" +
    "\012\060\025\061\053\062\006\063\041\001\002\000\024" +
    "\034\014\037\072\054\026\056\063\057\012\060\025\061" +
    "\053\062\006\063\041\001\002\000\032\020\uffeb\021\uffeb" +
    "\022\101\023\102\030\uffeb\031\uffeb\032\uffeb\033\uffeb\040" +
    "\uffeb\042\uffeb\045\uffeb\047\uffeb\001\002\000\024\034\014" +
    "\037\072\054\026\056\063\057\012\060\025\061\053\062" +
    "\006\063\041\001\002\000\024\034\014\037\072\054\026" +
    "\056\063\057\012\060\025\061\053\062\006\063\041\001" +
    "\002\000\036\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\104" +
    "\025\105\030\uffe5\031\uffe5\032\uffe5\033\uffe5\040\uffe5\042" +
    "\uffe5\045\uffe5\047\uffe5\001\002\000\024\034\014\037\072" +
    "\054\026\056\063\057\012\060\025\061\053\062\006\063" +
    "\041\001\002\000\024\034\014\037\072\054\026\056\063" +
    "\057\012\060\025\061\053\062\006\063\041\001\002\000" +
    "\042\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\107\027\110\030\uffe3\031\uffe3\032\uffe3\033\uffe3\040" +
    "\uffe3\042\uffe3\045\uffe3\047\uffe3\001\002\000\024\034\014" +
    "\037\072\054\026\056\063\057\012\060\025\061\053\062" +
    "\006\063\041\001\002\000\024\034\014\037\072\054\026" +
    "\056\063\057\012\060\025\061\053\062\006\063\041\001" +
    "\002\000\042\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\040\uffdf\042\uffdf\045\uffdf\047\uffdf\001\002\000\042" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\040\uffe0" +
    "\042\uffe0\045\uffe0\047\uffe0\001\002\000\042\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\107\027\110" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\040\uffe2\042\uffe2\045" +
    "\uffe2\047\uffe2\001\002\000\036\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\104\025\105\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\040\uffe6\042\uffe6\045\uffe6\047\uffe6\001\002\000\032" +
    "\020\uffea\021\uffea\022\101\023\102\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\040\uffea\042\uffea\045\uffea\047\uffea\001\002" +
    "\000\032\020\uffe9\021\uffe9\022\101\023\102\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\040\uffe9\042\uffe9\045\uffe9\047\uffe9" +
    "\001\002\000\032\020\uffe8\021\uffe8\022\101\023\102\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\040\uffe8\042\uffe8\045\uffe8" +
    "\047\uffe8\001\002\000\010\020\071\021\067\040\070\001" +
    "\002\000\026\020\uffee\021\uffee\030\077\031\076\032\075" +
    "\033\074\040\uffee\042\uffee\045\uffee\047\uffee\001\002\000" +
    "\024\034\014\037\064\054\026\056\063\057\012\060\025" +
    "\061\053\062\006\063\041\001\002\000\012\020\071\021" +
    "\067\040\124\047\uffd1\001\002\000\016\020\uffec\021\uffec" +
    "\040\uffec\042\uffec\045\uffec\047\uffec\001\002\000\006\056" +
    "\063\063\127\001\002\000\010\040\132\041\131\050\130" +
    "\001\002\000\132\002\uffc2\004\uffc2\005\uffc2\006\uffc2\010" +
    "\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\001\002\000\004\063\127\001\002\000\024\034\014" +
    "\037\064\054\026\056\063\057\012\060\025\061\053\062" +
    "\006\063\041\001\002\000\050\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\001\002\000\010\020\071\021" +
    "\067\042\134\001\002\000\050\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\040\uffb5\041\uffb5\042\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\001\002\000\050\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000\004" +
    "\045\137\001\002\000\066\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\016\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\044\ufff5\045\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\001\002\000\006\037\141\063" +
    "\127\001\002\000\026\034\014\037\064\040\143\054\026" +
    "\056\063\057\012\060\025\061\053\062\006\063\041\001" +
    "\002\000\042\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\040\uffdc\042\uffdc\045\uffdc\047\uffdc\001\002\000\042" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040\uffdb" +
    "\042\uffdb\045\uffdb\047\uffdb\001\002\000\006\040\147\047" +
    "\146\001\002\000\012\020\071\021\067\040\uffd0\047\uffd0" +
    "\001\002\000\024\034\014\037\064\054\026\056\063\057" +
    "\012\060\025\061\053\062\006\063\041\001\002\000\042" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\040\uffdd" +
    "\042\uffdd\045\uffdd\047\uffdd\001\002\000\012\020\071\021" +
    "\067\040\uffd1\047\uffd1\001\002\000\024\034\014\037\064" +
    "\054\026\056\063\057\012\060\025\061\053\062\006\063" +
    "\041\001\002\000\010\020\071\021\067\045\ufff0\001\002" +
    "\000\004\015\155\001\002\000\034\015\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\044\uffc1\045\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\056\uffc1\063\uffc1\001\002\000\004\043" +
    "\156\001\002\000\026\010\016\011\005\014\054\016\052" +
    "\037\160\051\004\052\031\053\047\055\011\056\162\001" +
    "\002\000\010\040\uffb7\044\uffb7\047\uffb7\001\002\000\026" +
    "\010\016\011\005\014\054\016\052\037\160\051\004\052" +
    "\031\053\047\055\011\056\162\001\002\000\006\044\170" +
    "\047\167\001\002\000\014\037\160\051\004\052\031\053" +
    "\047\055\011\001\002\000\016\040\uffcf\041\164\044\uffcf" +
    "\045\uffcf\047\uffcf\063\uffcf\001\002\000\004\062\165\001" +
    "\002\000\004\042\166\001\002\000\016\040\uffcd\041\uffcd" +
    "\044\uffcd\045\uffcd\047\uffcd\063\uffcd\001\002\000\026\010" +
    "\016\011\005\014\054\016\052\037\160\051\004\052\031" +
    "\053\047\055\011\056\162\001\002\000\012\040\uffba\044" +
    "\uffba\045\uffba\047\uffba\001\002\000\010\040\uffb8\044\uffb8" +
    "\047\uffb8\001\002\000\006\040\175\063\127\001\002\000" +
    "\006\040\174\047\167\001\002\000\016\040\uffc8\041\uffc8" +
    "\044\uffc8\045\uffc8\047\uffc8\063\uffc8\001\002\000\016\040" +
    "\uffc3\041\uffc3\044\uffc3\045\uffc3\047\uffc3\063\uffc3\001\002" +
    "\000\012\040\uffbf\044\uffbf\045\uffbf\047\uffbf\001\002\000" +
    "\004\037\201\001\002\000\004\037\uffc0\001\002\000\030" +
    "\010\016\011\005\014\054\016\052\037\160\040\203\051" +
    "\004\052\031\053\047\055\011\056\162\001\002\000\006" +
    "\040\210\047\167\001\002\000\004\043\204\001\002\000" +
    "\062\004\022\005\042\006\010\010\016\011\005\013\024" +
    "\014\054\016\052\034\014\035\056\036\037\037\035\045" +
    "\007\051\004\052\031\053\047\054\026\055\011\056\032" +
    "\057\012\060\025\061\053\062\006\063\041\001\002\000" +
    "\064\004\022\005\042\006\010\010\016\011\005\013\024" +
    "\014\054\016\052\034\014\035\056\036\037\037\035\044" +
    "\206\045\007\051\004\052\031\053\047\054\026\055\011" +
    "\056\032\057\012\060\025\061\053\062\006\063\041\001" +
    "\002\000\012\040\uffbb\044\uffbb\045\uffbb\047\uffbb\001\002" +
    "\000\066\002\001\004\001\005\001\006\001\010\001\011" +
    "\001\013\001\014\001\016\001\034\001\035\001\036\001" +
    "\037\001\044\001\045\001\051\001\052\001\053\001\054" +
    "\001\055\001\056\001\057\001\060\001\061\001\062\001" +
    "\063\001\001\002\000\004\043\211\001\002\000\062\004" +
    "\022\005\042\006\010\010\016\011\005\013\024\014\054" +
    "\016\052\034\014\035\056\036\037\037\035\045\007\051" +
    "\004\052\031\053\047\054\026\055\011\056\032\057\012" +
    "\060\025\061\053\062\006\063\041\001\002\000\064\004" +
    "\022\005\042\006\010\010\016\011\005\013\024\014\054" +
    "\016\052\034\014\035\056\036\037\037\035\044\213\045" +
    "\007\051\004\052\031\053\047\054\026\055\011\056\032" +
    "\057\012\060\025\061\053\062\006\063\041\001\002\000" +
    "\012\040\uffbc\044\uffbc\045\uffbc\047\uffbc\001\002\000\066" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\014\ufffd\016\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\044\ufffd\045\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\001\002\000\024\034\014\037\064\054\026\056\063\057" +
    "\012\060\025\061\053\062\006\063\041\001\002\000\010" +
    "\020\071\021\067\040\217\001\002\000\004\043\220\001" +
    "\002\000\062\004\022\005\042\006\010\010\016\011\005" +
    "\013\024\014\054\016\052\034\014\035\056\036\037\037" +
    "\035\045\007\051\004\052\031\053\047\054\026\055\011" +
    "\056\032\057\012\060\025\061\053\062\006\063\041\001" +
    "\002\000\064\004\022\005\042\006\010\010\016\011\005" +
    "\013\024\014\054\016\052\034\014\035\056\036\037\037" +
    "\035\044\222\045\007\051\004\052\031\053\047\054\026" +
    "\055\011\056\032\057\012\060\025\061\053\062\006\063" +
    "\041\001\002\000\066\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\014\ufff9\016\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\001\002\000\004\063\127\001\002" +
    "\000\004\040\225\001\002\000\004\045\226\001\002\000" +
    "\066\002\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\044\ufff4\045\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\001\002\000\066\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\010\ufffc\011\ufffc\013\ufffc\014\ufffc\016\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\001\002\000\006\037\231\063\127" +
    "\001\002\000\026\034\014\037\064\040\233\054\026\056" +
    "\063\057\012\060\025\061\053\062\006\063\041\001\002" +
    "\000\066\002\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\013\ufff2\014\ufff2\016\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\001\002\000\066\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\044\ufff1\045\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\001\002\000\010\020\071\021" +
    "\067\040\235\001\002\000\066\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\016\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\044\ufff3\045\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\001\002\000\030\010\016" +
    "\011\005\014\054\016\052\037\160\051\004\052\031\053" +
    "\047\055\011\056\032\063\127\001\002\000\010\020\071" +
    "\021\067\045\240\001\002\000\066\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002\000\066\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\ufff8\013\ufff8" +
    "\014\ufff8\016\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\044" +
    "\ufff8\045\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001" +
    "\002\000\024\034\014\037\064\054\026\056\063\057\012" +
    "\060\025\061\053\062\006\063\041\001\002\000\010\020" +
    "\071\021\067\040\244\001\002\000\004\043\245\001\002" +
    "\000\062\004\022\005\042\006\010\010\016\011\005\013" +
    "\024\014\054\016\052\034\014\035\056\036\037\037\035" +
    "\045\007\051\004\052\031\053\047\054\026\055\011\056" +
    "\032\057\012\060\025\061\053\062\006\063\041\001\002" +
    "\000\064\004\022\005\042\006\010\010\016\011\005\013" +
    "\024\014\054\016\052\034\014\035\056\036\037\037\035" +
    "\044\247\045\007\051\004\052\031\053\047\054\026\055" +
    "\011\056\032\057\012\060\025\061\053\062\006\063\041" +
    "\001\002\000\066\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\014\ufffa\016\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\001\002\000\004\063\200\001\002\000" +
    "\004\037\252\001\002\000\030\010\016\011\005\014\054" +
    "\016\052\037\160\040\254\051\004\052\031\053\047\055" +
    "\011\056\162\001\002\000\006\040\260\047\167\001\002" +
    "\000\004\043\255\001\002\000\062\004\022\005\042\006" +
    "\010\010\016\011\005\013\024\014\054\016\052\034\014" +
    "\035\056\036\037\037\035\045\007\051\004\052\031\053" +
    "\047\054\026\055\011\056\032\057\012\060\025\061\053" +
    "\062\006\063\041\001\002\000\064\004\022\005\042\006" +
    "\010\010\016\011\005\013\024\014\054\016\052\034\014" +
    "\035\056\036\037\037\035\044\257\045\007\051\004\052" +
    "\031\053\047\054\026\055\011\056\032\057\012\060\025" +
    "\061\053\062\006\063\041\001\002\000\012\040\uffbd\044" +
    "\uffbd\045\uffbd\047\uffbd\001\002\000\004\043\261\001\002" +
    "\000\062\004\022\005\042\006\010\010\016\011\005\013" +
    "\024\014\054\016\052\034\014\035\056\036\037\037\035" +
    "\045\007\051\004\052\031\053\047\054\026\055\011\056" +
    "\032\057\012\060\025\061\053\062\006\063\041\001\002" +
    "\000\064\004\022\005\042\006\010\010\016\011\005\013" +
    "\024\014\054\016\052\034\014\035\056\036\037\037\035" +
    "\044\263\045\007\051\004\052\031\053\047\054\026\055" +
    "\011\056\032\057\012\060\025\061\053\062\006\063\041" +
    "\001\002\000\012\040\uffbe\044\uffbe\045\uffbe\047\uffbe\001" +
    "\002\000\004\002\000\001\002\000\042\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\040\uffd2\042\uffd2\045\uffd2" +
    "\047\uffd2\001\002\000\004\063\127\001\002\000\004\040" +
    "\270\001\002\000\042\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\040\uffd4\042\uffd4\045\uffd4\047\uffd4\001\002" +
    "\000\016\040\uffc7\041\uffc7\044\uffc7\045\uffc7\047\uffc7\063" +
    "\uffc7\001\002\000\016\040\uffc5\041\uffc5\044\uffc5\045\uffc5" +
    "\047\uffc5\063\uffc5\001\002\000\016\040\uffc6\041\uffc6\044" +
    "\uffc6\045\uffc6\047\uffc6\063\uffc6\001\002\000\024\034\014" +
    "\037\064\054\026\056\063\057\012\060\025\061\053\062" +
    "\006\063\041\001\002\000\010\020\071\021\067\040\276" +
    "\001\002\000\004\043\277\001\002\000\062\004\022\005" +
    "\042\006\010\010\016\011\005\013\024\014\054\016\052" +
    "\034\014\035\056\036\037\037\035\045\007\051\004\052" +
    "\031\053\047\054\026\055\011\056\032\057\012\060\025" +
    "\061\053\062\006\063\041\001\002\000\064\004\022\005" +
    "\042\006\010\010\016\011\005\013\024\014\054\016\052" +
    "\034\014\035\056\036\037\037\035\044\301\045\007\051" +
    "\004\052\031\053\047\054\026\055\011\056\032\057\012" +
    "\060\025\061\053\062\006\063\041\001\002\000\004\007" +
    "\302\001\002\000\004\043\303\001\002\000\062\004\022" +
    "\005\042\006\010\010\016\011\005\013\024\014\054\016" +
    "\052\034\014\035\056\036\037\037\035\045\007\051\004" +
    "\052\031\053\047\054\026\055\011\056\032\057\012\060" +
    "\025\061\053\062\006\063\041\001\002\000\064\004\022" +
    "\005\042\006\010\010\016\011\005\013\024\014\054\016" +
    "\052\034\014\035\056\036\037\037\035\044\305\045\007" +
    "\051\004\052\031\053\047\054\026\055\011\056\032\057" +
    "\012\060\025\061\053\062\006\063\041\001\002\000\066" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\001\002\000\016\037\160\051\004\052\031\053\047\055" +
    "\011\056\162\001\002\000\012\040\uffb9\044\uffb9\045\uffb9" +
    "\047\uffb9\001\002\000\016\040\uffc9\041\uffc9\044\uffc9\045" +
    "\uffc9\047\uffc9\063\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\050\002\026\003\050\004\033\005\047\006" +
    "\045\007\043\010\042\011\037\012\035\013\014\015\044" +
    "\017\012\020\032\021\027\022\020\023\017\024\016\026" +
    "\022\027\054\001\001\000\004\016\307\001\001\000\004" +
    "\016\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\264\017\012\027\060\001" +
    "\001\000\046\002\206\003\050\004\033\005\047\006\045" +
    "\007\043\010\042\011\037\012\035\015\044\017\012\020" +
    "\032\021\027\022\020\023\017\024\016\026\022\027\054" +
    "\001\001\000\012\021\247\022\020\023\017\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\236\005" +
    "\047\006\045\007\043\010\042\011\037\012\035\017\012" +
    "\020\057\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\175\001\001\000\002" +
    "\001\001\000\010\022\162\023\017\024\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\065\005\047" +
    "\006\045\007\043\010\042\011\037\012\035\014\172\015" +
    "\156\017\012\020\057\021\171\022\020\023\017\024\016" +
    "\025\064\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\176\001\001\000\002\001\001\000" +
    "\004\016\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\061\005\047\006\045\007\043\010\042\011" +
    "\037\012\035\017\012\020\057\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\065\005\047\006\045\007\043\010\042" +
    "\011\037\012\035\017\012\020\057\025\064\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\120" +
    "\006\045\007\043\010\042\011\037\012\035\017\012\020" +
    "\057\027\060\001\001\000\002\001\001\000\024\005\072" +
    "\006\045\007\043\010\042\011\037\012\035\017\012\020" +
    "\057\027\060\001\001\000\026\004\117\005\047\006\045" +
    "\007\043\010\042\011\037\012\035\017\012\020\057\027" +
    "\060\001\001\000\002\001\001\000\022\006\116\007\043" +
    "\010\042\011\037\012\035\017\012\020\057\027\060\001" +
    "\001\000\022\006\115\007\043\010\042\011\037\012\035" +
    "\017\012\020\057\027\060\001\001\000\022\006\114\007" +
    "\043\010\042\011\037\012\035\017\012\020\057\027\060" +
    "\001\001\000\022\006\077\007\043\010\042\011\037\012" +
    "\035\017\012\020\057\027\060\001\001\000\002\001\001" +
    "\000\020\007\113\010\042\011\037\012\035\017\012\020" +
    "\057\027\060\001\001\000\020\007\102\010\042\011\037" +
    "\012\035\017\012\020\057\027\060\001\001\000\002\001" +
    "\001\000\016\010\112\011\037\012\035\017\012\020\057" +
    "\027\060\001\001\000\016\010\105\011\037\012\035\017" +
    "\012\020\057\027\060\001\001\000\002\001\001\000\014" +
    "\011\111\012\035\017\012\020\057\027\060\001\001\000" +
    "\014\011\110\012\035\017\012\020\057\027\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\122\005\047\006\045\007\043\010\042\011\037\012\035" +
    "\017\012\020\057\027\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\012\027\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\134\001\001\000" +
    "\026\004\132\005\047\006\045\007\043\010\042\011\037" +
    "\012\035\017\012\020\057\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\141\001" +
    "\001\000\030\004\144\005\047\006\045\007\043\010\042" +
    "\011\037\012\035\017\012\020\057\025\143\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\147\005\047\006\045\007" +
    "\043\010\042\011\037\012\035\017\012\020\057\027\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\151\005\047\006\045\007\043\010\042\011\037\012\035" +
    "\017\012\020\057\027\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\160\015\156\021\027\022\020\023\017\024\016\001" +
    "\001\000\002\001\001\000\016\014\172\015\156\021\171" +
    "\022\020\023\017\024\016\001\001\000\002\001\001\000" +
    "\010\022\162\023\017\024\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\170\021\027\022\020\023\017\024\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\201\015\156\021\027\022\020\023\017\024\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\026\003\050\004\033\005\047\006\045\007\043\010\042" +
    "\011\037\012\035\013\204\015\044\017\012\020\032\021" +
    "\027\022\020\023\017\024\016\026\022\027\054\001\001" +
    "\000\046\002\206\003\050\004\033\005\047\006\045\007" +
    "\043\010\042\011\037\012\035\015\044\017\012\020\032" +
    "\021\027\022\020\023\017\024\016\026\022\027\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\026\003\050\004\033\005\047\006\045\007" +
    "\043\010\042\011\037\012\035\013\211\015\044\017\012" +
    "\020\032\021\027\022\020\023\017\024\016\026\022\027" +
    "\054\001\001\000\046\002\206\003\050\004\033\005\047" +
    "\006\045\007\043\010\042\011\037\012\035\015\044\017" +
    "\012\020\032\021\027\022\020\023\017\024\016\026\022" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\215\005\047\006\045\007\043\010\042\011\037" +
    "\012\035\017\012\020\057\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\026\003\050\004\033" +
    "\005\047\006\045\007\043\010\042\011\037\012\035\013" +
    "\220\015\044\017\012\020\032\021\027\022\020\023\017" +
    "\024\016\026\022\027\054\001\001\000\046\002\206\003" +
    "\050\004\033\005\047\006\045\007\043\010\042\011\037" +
    "\012\035\015\044\017\012\020\032\021\027\022\020\023" +
    "\017\024\016\026\022\027\054\001\001\000\002\001\001" +
    "\000\004\017\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\231" +
    "\001\001\000\026\004\233\005\047\006\045\007\043\010" +
    "\042\011\037\012\035\017\012\020\057\027\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\172\015\156\017\012\021\171" +
    "\022\020\023\017\024\016\027\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\242" +
    "\005\047\006\045\007\043\010\042\011\037\012\035\017" +
    "\012\020\057\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\026\003\050\004\033\005\047\006" +
    "\045\007\043\010\042\011\037\012\035\013\245\015\044" +
    "\017\012\020\032\021\027\022\020\023\017\024\016\026" +
    "\022\027\054\001\001\000\046\002\206\003\050\004\033" +
    "\005\047\006\045\007\043\010\042\011\037\012\035\015" +
    "\044\017\012\020\032\021\027\022\020\023\017\024\016" +
    "\026\022\027\054\001\001\000\002\001\001\000\004\020" +
    "\250\001\001\000\002\001\001\000\016\014\252\015\156" +
    "\021\027\022\020\023\017\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\026\003\050\004\033" +
    "\005\047\006\045\007\043\010\042\011\037\012\035\013" +
    "\255\015\044\017\012\020\032\021\027\022\020\023\017" +
    "\024\016\026\022\027\054\001\001\000\046\002\206\003" +
    "\050\004\033\005\047\006\045\007\043\010\042\011\037" +
    "\012\035\015\044\017\012\020\032\021\027\022\020\023" +
    "\017\024\016\026\022\027\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\026\003\050\004\033\005" +
    "\047\006\045\007\043\010\042\011\037\012\035\013\261" +
    "\015\044\017\012\020\032\021\027\022\020\023\017\024" +
    "\016\026\022\027\054\001\001\000\046\002\206\003\050" +
    "\004\033\005\047\006\045\007\043\010\042\011\037\012" +
    "\035\015\044\017\012\020\032\021\027\022\020\023\017" +
    "\024\016\026\022\027\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\274\005\047" +
    "\006\045\007\043\010\042\011\037\012\035\017\012\020" +
    "\057\027\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\026\003\050\004\033\005\047\006\045\007" +
    "\043\010\042\011\037\012\035\013\277\015\044\017\012" +
    "\020\032\021\027\022\020\023\017\024\016\026\022\027" +
    "\054\001\001\000\046\002\206\003\050\004\033\005\047" +
    "\006\045\007\043\010\042\011\037\012\035\015\044\017" +
    "\012\020\032\021\027\022\020\023\017\024\016\026\022" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\026\003\050\004\033\005\047\006\045\007\043" +
    "\010\042\011\037\012\035\013\303\015\044\017\012\020" +
    "\032\021\027\022\020\023\017\024\016\026\022\027\054" +
    "\001\001\000\046\002\206\003\050\004\033\005\047\006" +
    "\045\007\043\010\042\011\037\012\035\015\044\017\012" +
    "\020\032\021\027\022\020\023\017\024\016\026\022\027" +
    "\054\001\001\000\002\001\001\000\012\021\306\022\020" +
    "\023\017\024\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner(); 
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Bl ::= Bl Linea 
            {
              Bloque RESULT =null;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 b1.append(l1);
      RESULT= b1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Bl EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bl ::= Linea 
            {
              Bloque RESULT =null;
		Statement l1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(l1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bl",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= Instr 
            {
              Statement RESULT =null;
		Statement i1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= Decl PUNTOCOMA 
            {
              Statement RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=d1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= PUNTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Linea",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instr ::= IF PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2);
      RESULT= new InsBin(KindI.IF,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instr ::= WHILE PAP Exp PCIERRE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); 
      RESULT= new InsBin(KindI.WHILE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instr ::= Asign PUNTOCOMA 
            {
              Statement RESULT =null;
		InsBin a1 = (InsBin)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=a1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instr ::= IFELSE PAP Exp PCIERRE LAP Bl LCIERRE ELSE LAP Bl LCIERRE 
            {
              Statement RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Bloque b2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(e2); array.add(b2); array.add(b3);
      RESULT= new InsBin(KindI.IFELSE,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instr ::= RETURN Exp PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instr ::= PRINT PAP Exp PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Print(e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instr ::= READ PAP IdVar PCIERRE PUNTOCOMA 
            {
              Statement RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT= new Read(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instr ::= IdFun EXEC PAP Exp PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E args = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instr ::= IdFun EXEC IdVar 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar args = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instr ::= IdFun EXEC PAP PCIERRE 
            {
              Statement RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asign ::= Des IGUAL Exp 
            {
              InsBin RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Statement> array = new ArrayList<Statement>();
      array.add(d1); array.add(e2);
      RESULT= new InsBin(KindI.ASIG,array); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asign",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= Exp SUMA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= Exp RESTA Op0 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.RESTA,aDeexp1,aDeterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Op0 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= PAP StructInitOrden COMA Exp PCIERRE 
            {
              E RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op0 ::= Op0 MAYOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MAY,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op0 ::= Op0 MENOR Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MEN,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op0 ::= Op0 OPIGUAL Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.EQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op0 ::= Op0 DIST Op1 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.NEQ,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op0 ::= Op1 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op1 ::= Op1 MUL Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op1 ::= Op1 DIV Op2 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op1 ::= Op2 
            {
              E RESULT =null;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op2 ::= Op2 POT Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.POT,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op2 ::= Op2 MOD Op3 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.MOD,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op2 ::= Op3 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op3 ::= Op3 AND Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op3 ::= Op3 OR Op4 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeterm1,aDefact); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op3 ::= Op4 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op4 ::= IdFun CALL PAP StructInitOrden PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		StructIns args = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Op4 ::= IdFun CALL IdVar 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar args = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new FunctCall(id1,args); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Op4 ::= IdFun CALL PAP PCIERRE 
            {
              E RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT= new FunctCall(id1,null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Op4 ::= Op5 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op4",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Op5 ::= INT 
            {
              E RESULT =null;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Int(intValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Op5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new Bool("true"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Op5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new Bool("false"); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op5 ::= Des 
            {
              E RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(KindE.MEM, d1, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op5 ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Op5 ::= VALPTR PAP IdVar PCIERRE 
            {
              E RESULT =null;
		IdenVar id = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new GetPointerVal(id); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Op5 ::= NULL 
            {
              E RESULT =null;
		 RESULT = new Null(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Op5 ::= NOT Op5 
            {
              E RESULT =null;
		E arg = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(KindE.NOT, arg, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op5",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StructInitOrden ::= StructInitOrden COMA Exp 
            {
              StructIns RESULT =null;
		StructIns args1 = (StructIns)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StructInitOrden ::= Exp 
            {
              StructIns RESULT =null;
		E arg2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 StructIns args1 = new StructIns();
      args1.addUnnamedArg(arg2);
      RESULT= args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructInitOrden",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= PUNTERO Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TPointer(t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo ::= Tipo2 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo2 ::= Tipo2 CAP INT CCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue intValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TList(t1, Integer.parseInt(intValue.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo2 ::= Tipo3 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo3 ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo3 ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo3 ::= DOSPUNTOS IdType 
            {
              T RESULT =null;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.VALUE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo3 ::= PAP StructBodyDef PCIERRE 
            {
              T RESULT =null;
		TStruct args1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = args1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo3 ::= REF TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.INT, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo3 ::= REF TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TSimple(KindT.BOOL, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo3 ::= REF IdType 
            {
              T RESULT =null;
		IdenType id = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TComp(id, RefMode.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo3 ::= Tipo4 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo3",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo4 ::= PAP Tipo PCIERRE 
            {
              T RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo4",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IdVar ::= IDEN 
            {
              IdenVar RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenVar(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdVar",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IdType ::= IDEN 
            {
              IdenType RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenType(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdType",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IdFun ::= IDEN 
            {
              IdenFun RESULT =null;
		TokenValue idValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new IdenFun(idValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdFun",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Decl ::= Tipo IdVar 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT= new DecVar(t1, id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Decl ::= FUN Tipo IdFun PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(t1, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Decl ::= FUN Tipo IdFun PAP PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(t1, id1, null, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Decl ::= PROC IdFun PAP StructBodyDef PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(null, id1, st1, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Decl ::= PROC IdFun PAP PCIERRE LAP Bl LCIERRE 
            {
              Dec RESULT =null;
		IdenFun id1 = (IdenFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecFun(null, id1, null, b1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Decl ::= STRUCT IdType LLEVA LAP StructBodyDef LCIERRE 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT= new DecStruct(id1, st1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Decl ::= TIPEDEF IdType Tipo 
            {
              Dec RESULT =null;
		IdenType id1 = (IdenType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T t1 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new DecTipo(id1,t1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StructBodyDef ::= StructBodyDef COMA Decl 
            {
              TStruct RESULT =null;
		TStruct st1 = (TStruct)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 st1.append(d1);
      RESULT= st1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StructBodyDef ::= Decl 
            {
              TStruct RESULT =null;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new TStruct(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("StructBodyDef",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Des ::= IdVar 
            {
              Desig RESULT =null;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new DesigVar(id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Des ::= Des CAP Exp CCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DesigPosArray(d1,e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Des ::= Des PUNTO IdVar 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IdenVar id1 = (IdenVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DesigCampo(d1,id1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Des ::= PUNTERO PAP Des PCIERRE 
            {
              Desig RESULT =null;
		Desig d1 = (Desig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DesigRef(d1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Des",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

